import type { defined, Kind, newtype } from "./types.js"

declare namespace Template {
  //////////////
  /// templates
  type Entry<T = string> = [string, _?: T]
  type createProperty<T extends Template.Entry> = `„Äñ${T[0]}„Äó`
  type createEmoji<$_$ extends string, namespace extends string, name extends string | void> =
    | never
    | `### ÔΩõ {@link utf16.${namespace}.${name & string} \` Ô∏è${$_$}‚Äç \` } ÔΩù`
  //////////////
  /// apply
  interface Identity extends Kind<Template.Entry, string> {
    ["~1"]: defined<this["~0"]>[0]
  }
  interface Property<_NS extends string = string> extends Kind<Template.Entry, string> {
    ["~1"]: createProperty<defined<this["~0"]>>
  }
  interface Emoji<NS extends string> extends Kind<Template.Entry, string> {
    ["~1"]: createEmoji<defined<this["~0"]>[0], NS, defined<this["~0"]>[1]>
  }
  // interface Letter extends Kind<Template.Entry, unknown>
  //   { ["~1"]: [upper: this["~0"][0], lower: this["~0"][1]]  }
  interface Letter<CS extends readonly [upper: string, lower: string]> extends newtype<CS> {}
}

export type JsDoc<F extends Kind<Template.Entry>, T extends { [x: string]: defined<F["~0"]>[1] }> =
  | never
  | { [K in keyof T]: Kind.apply<F, [T[K] & defined<F["~0"]>[0], K & defined<F["~0"]>[1]]> }

export type Charset<T extends { [x: string]: readonly [upper: string, lower: string] }> =
  | never
  | { [K in keyof T]: Letter<T[K][0], T[K][1]> }

export type Letter<A extends string, a extends string> = never | Template.Letter<[upper: A, lower: a]>

export type jsdoc = typeof jsdoc
export declare const jsdoc: emoji & gitmoji & greek & math

export type emoji = typeof emoji
export declare const emoji: JsDoc<
  Template.Emoji<"emoji">,
  {
    constructor: "üèóÔ∏è"
    combining: "ü™¢"
    curried: "üçõ"
    destructor: "‚õìÔ∏è‚Äçüí•Ô∏è"
    empty: "üï≥Ô∏è"
    filtering: "‚è≥"
    folding: "ü™≠"
    guard: "ü¶∫"
    mapping: "üåà"
    preserves_structure: "üåø"
    preserves_reference: "üß©"
    optimization: "üî•"
    roundtrip: "ü™É"
  }
>

export type gitmoji = typeof gitmoji
export declare const gitmoji: JsDoc<
  Template.Emoji<"gitmoji">,
  {
    feat: "‚ú®"
    fix: "üêõ"
    docs: "üìù"
    types: "Ô∏èüè∑Ô∏è"
    perf: "‚ö°Ô∏è"
    break: "üí•"
    refactor: "‚ôªÔ∏è"
    infra: "üß±"
    add: "‚ûï"
    rm: "‚ûñ"
    up: "‚¨ÜÔ∏è"
    down: "‚¨áÔ∏è"
  }
>

export type math = typeof math
export declare const math: JsDoc<
  Template.Identity,
  {
    integer: "‚Ñ§"
    natural: "‚Ñï"
    real: "‚Ñù"
    nullary: "ùüò"
    unary: "ùüô"
    binary: "ùüö"
    ternary: "ùüõ"
    union: "‚à™"
    intersection: "‚à©"
    join: "‚à®"
    meet: "‚àß"
    top: "‚ä§"
    bottom: "‚ä•"
    unit: "()"
    infinity: "‚àû"
  }
>

export type greek = typeof greek
export declare const greek: Charset<{
  /** stuff */
  alpha: ["A", "Œ±"]
  beta: ["Œí", "Œ≤"]
  gamma: ["Œì", "Œ≥"]
  delta: ["Œî", "Œ¥"]
  epsilon: ["Œï", "Œµ"]
  zeta: ["Œñ", "Œ∂"]
  eta: ["Œó", "Œ∑"]
  theta: ["Œò", "Œ∏"]
  iota: ["Œô", "Œπ"]
  kappa: ["Œö", "Œ∫"]
  lambda: ["Œõ", "Œª"]
  mu: ["Œú", "Œº"]
  nu: ["Œù", "ŒΩ"]
  xi: ["Œû", "Œæ"]
  omicron: ["Œü", "Œø"]
  pi: ["Œ†", "œÄ"]
  rho: ["Œ°", "œÅ"]
  sigma: ["Œ£", "œÉ"]
  tau: ["Œ§", "œÑ"]
  upsilon: ["Œ•", "œÖ"]
  phi: ["Œ¶", "œÜ"]
  chi: ["Œß", "œá"]
  psi: ["Œ®", "œà"]
  omega: ["Œ©", "œâ"]
}>
