export default {
  "openapi": "3.0.3",
  "info": {
    "version": "8.0.1",
    "title": "GitHub's official OpenAPI spec + Octokit extension",
    "description": "OpenAPI specs from https://github.com/github/rest-api-description with the 'x-octokit' extension required by the Octokit SDKs",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT"
    },
    "termsOfService": "https://docs.github.com/articles/github-terms-of-service",
    "contact": {
      "name": "Support",
      "url": "https://github.com/octokit/openapi"
    }
  },
  "tags": [
    {
      "name": "actions",
      "description": "Endpoints to manage GitHub Actions using the REST API."
    },
    {
      "name": "activity",
      "description": "Activity APIs provide access to notifications, subscriptions, and timelines."
    },
    {
      "name": "apps",
      "description": "Information for integrations and installations."
    },
    {
      "name": "billing",
      "description": "Monitor charges and usage from Actions and Packages."
    },
    {
      "name": "checks",
      "description": "Rich interactions with checks run by your integrations."
    },
    {
      "name": "code-scanning",
      "description": "Retrieve code scanning alerts from a repository."
    },
    {
      "name": "codes-of-conduct",
      "description": "Insight into codes of conduct for your communities."
    },
    {
      "name": "codespaces",
      "description": "Endpoints to manage Codespaces using the REST API."
    },
    {
      "name": "emojis",
      "description": "List emojis available to use on GitHub."
    },
    {
      "name": "enterprise-admin",
      "description": "Administer a GitHub enterprise."
    },
    {
      "name": "dependabot",
      "description": "Endpoints to manage Dependabot."
    },
    {
      "name": "dependency-graph",
      "description": "Endpoints to access Dependency Graph features."
    },
    {
      "name": "gists",
      "description": "View, modify your gists."
    },
    {
      "name": "git",
      "description": "Raw Git functionality."
    },
    {
      "name": "gitignore",
      "description": "View gitignore templates"
    },
    {
      "name": "interactions",
      "description": "Owner or admin management of users interactions."
    },
    {
      "name": "issues",
      "description": "Interact with GitHub Issues."
    },
    {
      "name": "licenses",
      "description": "View various OSS licenses."
    },
    {
      "name": "markdown",
      "description": "Render GitHub flavored markdown"
    },
    {
      "name": "merge-queue",
      "description": "Interact with GitHub Merge Queues."
    },
    {
      "name": "meta",
      "description": "Endpoints that give information about the API."
    },
    {
      "name": "migrations",
      "description": "Move projects to or from GitHub."
    },
    {
      "name": "orgs",
      "description": "Interact with GitHub Orgs."
    },
    {
      "name": "packages",
      "description": "Manage packages for authenticated users and organizations."
    },
    {
      "name": "projects",
      "description": "Interact with GitHub Projects."
    },
    {
      "name": "pulls",
      "description": "Interact with GitHub Pull Requests."
    },
    {
      "name": "rate-limit",
      "description": "Check your current rate limit status"
    },
    {
      "name": "reactions",
      "description": "Interact with reactions to various GitHub entities."
    },
    {
      "name": "repos",
      "description": "Interact with GitHub Repos."
    },
    {
      "name": "search",
      "description": "Look for stuff on GitHub."
    },
    {
      "name": "secret-scanning",
      "description": "Retrieve secret scanning alerts from a repository."
    },
    {
      "name": "server-statistics",
      "description": "GHES statistics"
    },
    {
      "name": "teams",
      "description": "Interact with GitHub Teams."
    },
    {
      "name": "users",
      "description": "Interact with and view information about users and also current user."
    }
  ],
  "servers": [
    {
      "url": "{protocol}://{hostname}/api/v3",
      "variables": {
        "hostname": {
          "description": "Self-hosted Enterprise Server or Enterprise Cloud hostname",
          "default": "HOSTNAME"
        },
        "protocol": {
          "description": "Self-hosted Enterprise Server or Enterprise Cloud protocol",
          "default": "http"
        }
      }
    }
  ],
  "externalDocs": {
    "description": "GitHub Enterprise Developer Docs",
    "url": "https://docs.github.com/enterprise-server@3.6/rest/"
  },
  "paths": {
    "ð›°Žadminð›°Žhooks": {
      "get": {
        "summary": "List global webhooks",
        "description": "",
        "operationId": "enterprise-admin/list-global-webhooks",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-global-webhooks"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žglobalã„§hookã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žglobalã„§hook",
                    "$unref": "#/components/schemas/global-hook"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žglobalã„§hook",
                      "$unref": "#/components/schemas/global-hook"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a global webhook",
        "description": "",
        "operationId": "enterprise-admin/create-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#create-a-global-webhook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "name": "web",
                    "events": [
                      "organization",
                      "user"
                    ],
                    "config": {
                      "url": "https://example.com/webhook",
                      "content_type": "json",
                      "secret": "secret"
                    }
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "config"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "Must be passed as \"web\"."
                    }
                  },
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook.",
                    "required": [
                      "url"
                    ],
                    "properties": {
                      "url": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The URL to which the payloads will be delivered."
                        }
                      },
                      "content_type": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                        }
                      },
                      "secret": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#delivery-headers) header."
                        }
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                        }
                      }
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                      "default": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žglobalã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žglobalã„§hook",
                  "$unref": "#/components/schemas/global-hook"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žhooksð›°Žð›°§hook_idð›°¨": {
      "get": {
        "summary": "Get a global webhook",
        "description": "",
        "operationId": "enterprise-admin/get-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-a-global-webhook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žhookã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žglobalã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žglobalã„§hook",
                  "$unref": "#/components/schemas/global-hook"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a global webhook",
        "description": "Parameters that are not provided will be overwritten with the default value or removed if no default exists.",
        "operationId": "enterprise-admin/update-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-a-global-webhook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žhookã„§id"
          }
        ],
        "requestBody": {
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "events": [
                      "organization"
                    ],
                    "config": {
                      "url": "https://example.com/webhook"
                    }
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook.",
                    "required": [
                      "url"
                    ],
                    "properties": {
                      "url": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The URL to which the payloads will be delivered."
                        }
                      },
                      "content_type": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                        }
                      },
                      "secret": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#delivery-headers) header."
                        }
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                        }
                      }
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                      "default": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žglobalã„§hookã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žglobalã„§hookã„§2",
                  "$unref": "#/components/schemas/global-hook-2"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a global webhook",
        "description": "",
        "operationId": "enterprise-admin/delete-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-global-webhook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žhookã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žadminð›°Žhooksð›°Žð›°§hook_idð›°¨ð›°Žpings": {
      "post": {
        "summary": "Ping a global webhook",
        "description": "This will trigger a [ping event](https://docs.github.com/enterprise-server@3.6/webhooks/#ping-event) to be sent to the webhook.",
        "operationId": "enterprise-admin/ping-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#ping-a-global-webhook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žhookã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žadminð›°Žkeys": {
      "get": {
        "summary": "List public keys",
        "description": "",
        "operationId": "enterprise-admin/list-public-keys",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-public-keys"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "created",
                "updated",
                "accessed"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "created",
                  "updated",
                  "accessed"
                ],
                "default": "created"
              }
            }
          },
          {
            "name": "since",
            "description": "Only show public keys accessed after the given time.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Ženterpriseã„§publicã„§keyã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žpublicã„§keyã„§full",
                    "$unref": "#/components/schemas/public-key-full"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žpublicã„§keyã„§full",
                      "$unref": "#/components/schemas/public-key-full"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žkeysð›°Žð›°§key_idsð›°¨": {
      "delete": {
        "summary": "Delete a public key",
        "description": "",
        "operationId": "enterprise-admin/delete-public-key",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-public-key"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žkeyã„§ids"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žadminð›°Žldapð›°Žteamsð›°Žð›°§team_idð›°¨ð›°Žmapping": {
      "patch": {
        "summary": "Update LDAP mapping for a team",
        "description": "Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.",
        "operationId": "enterprise-admin/update-ldap-mapping-for-team",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "ldap"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žteamã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "ldap_dn": "cn=Enterprise Ops,ou=teams,dc=github,dc=com"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "ldap_dn"
                ],
                "properties": {
                  "ldap_dn": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žldapã„§mappingã„§team"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žldapã„§mappingã„§team",
                  "$unref": "#/components/schemas/ldap-mapping-team"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žldapð›°Žteamsð›°Žð›°§team_idð›°¨ð›°Žsync": {
      "post": {
        "summary": "Sync LDAP mapping for a team",
        "description": "Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.",
        "operationId": "enterprise-admin/sync-ldap-mapping-for-team",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "ldap"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žteamã„§id"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "value": {
                      "status": "queued"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žldapð›°Žusersð›°Žð›°§usernameð›°¨ð›°Žmapping": {
      "patch": {
        "summary": "Update LDAP mapping for a user",
        "description": "",
        "operationId": "enterprise-admin/update-ldap-mapping-for-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "ldap"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "ldap_dn"
                ],
                "properties": {
                  "ldap_dn": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žldapã„§mappingã„§user"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žldapã„§mappingã„§user",
                  "$unref": "#/components/schemas/ldap-mapping-user"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žldapð›°Žusersð›°Žð›°§usernameð›°¨ð›°Žsync": {
      "post": {
        "summary": "Sync LDAP mapping for a user",
        "description": "Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.",
        "operationId": "enterprise-admin/sync-ldap-mapping-for-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "ldap"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "value": {
                      "status": "queued"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žorganizations": {
      "post": {
        "summary": "Create an organization",
        "description": "",
        "operationId": "enterprise-admin/create-org",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#create-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "orgs"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "login": "github",
                    "profile_name": "GitHub, Inc.",
                    "admin": "monalisaoctocat"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "login",
                  "admin"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The organization's username."
                    }
                  },
                  "admin": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The login of the user who will manage this organization."
                    }
                  },
                  "profile_name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The organization's display name."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorganizationã„§simple"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žorganizationã„§simple",
                  "$unref": "#/components/schemas/organization-simple"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žorganizationsð›°Žð›°§orgð›°¨": {
      "patch": {
        "summary": "Update an organization name",
        "description": "",
        "operationId": "enterprise-admin/update-org-name",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-an-organization-name"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "orgs"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "login": "the-new-octocats"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "login"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The organization's new name."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "value": {
                      "message": "Job queued to rename organization. It may take a few minutes to complete.",
                      "url": "https://<hostname>/api/v3/organizations/1"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "url": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žpreã„§receiveã„§environments": {
      "get": {
        "summary": "List pre-receive environments",
        "description": "",
        "operationId": "enterprise-admin/list-pre-receive-environments",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-pre-receive-environments"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "created",
                  "updated",
                  "name"
                ],
                "default": "created"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§environmentã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žpreã„§receiveã„§environment",
                    "$unref": "#/components/schemas/pre-receive-environment"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žpreã„§receiveã„§environment",
                      "$unref": "#/components/schemas/pre-receive-environment"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a pre-receive environment",
        "description": "",
        "operationId": "enterprise-admin/create-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#create-a-pre-receive-environment"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "name": "DevTools Hook Env",
                    "image_url": "https://my_file_server/path/to/devtools_env.tar.gz"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "image_url"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The new pre-receive environment's name."
                    }
                  },
                  "image_url": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "URL from which to download a tarball of this environment."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§environment"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§environment",
                  "$unref": "#/components/schemas/pre-receive-environment"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žpreã„§receiveã„§environmentsð›°Žð›°§pre_receive_environment_idð›°¨": {
      "get": {
        "summary": "Get a pre-receive environment",
        "description": "",
        "operationId": "enterprise-admin/get-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-a-pre-receive-environment"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§environmentã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§environment"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§environment",
                  "$unref": "#/components/schemas/pre-receive-environment"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a pre-receive environment",
        "description": "You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.",
        "operationId": "enterprise-admin/update-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-a-pre-receive-environment"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§environmentã„§id"
          }
        ],
        "requestBody": {
          "content": {
            "applicationð›°Žjson": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "This pre-receive environment's new name."
                    }
                  },
                  "image_url": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "URL from which to download a tarball of this environment."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "defaultã„§response": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§environmentã„§defaultã„§response"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§environment",
                  "$unref": "#/components/schemas/pre-receive-environment"
                }
              }
            }
          },
          "422": {
            "description": "Client Errors",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "clientã„§errors": {
                    "value": {
                      "message": "Validation Failed",
                      "errors": [
                        {
                          "resource": "PreReceiveEnvironment",
                          "code": "custom",
                          "message": "Cannot modify or delete the default environment"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          },
                          "code": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          },
                          "message": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "resource": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a pre-receive environment",
        "description": "If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.\n\nThe possible error messages are:\n\n*   _Cannot modify or delete the default environment_\n*   _Cannot delete environment that has hooks_\n*   _Cannot delete environment when download is in progress_",
        "operationId": "enterprise-admin/delete-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-pre-receive-environment"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§environmentã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "422": {
            "description": "Client Errors",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "clientã„§errors": {
                    "value": {
                      "message": "Validation Failed",
                      "errors": [
                        {
                          "resource": "PreReceiveEnvironment",
                          "code": "custom",
                          "message": "Cannot modify or delete the default environment"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          },
                          "code": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          },
                          "message": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "resource": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žpreã„§receiveã„§environmentsð›°Žð›°§pre_receive_environment_idð›°¨ð›°Ždownloads": {
      "post": {
        "summary": "Start a pre-receive environment download",
        "description": "Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.\n\nIf a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.\n\nThe possible error messages are:\n\n* _Cannot modify or delete the default environment_\n* _Can not start a new download when a download is in progress_",
        "operationId": "enterprise-admin/start-pre-receive-environment-download",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#start-a-pre-receive-environment-download"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§environmentã„§id"
          }
        ],
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "defaultã„§response": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§environmentã„§downloadã„§statusã„§defaultã„§response"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§environmentã„§downloadã„§status",
                  "$unref": "#/components/schemas/pre-receive-environment-download-status"
                }
              }
            }
          },
          "422": {
            "description": "Client Errors",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "clientã„§errors": {
                    "value": {
                      "message": "Validation Failed",
                      "errors": [
                        {
                          "resource": "PreReceiveEnvironment",
                          "code": "custom",
                          "message": "Can not start a new download when a download is in progress"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          },
                          "code": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          },
                          "message": {
                            "type": "string",
                            "meta": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "resource": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žpreã„§receiveã„§environmentsð›°Žð›°§pre_receive_environment_idð›°¨ð›°Ždownloadsð›°Žlatest": {
      "get": {
        "summary": "Get the download status for a pre-receive environment",
        "description": "In addition to seeing the download status at the \"[Get a pre-receive environment](#get-a-pre-receive-environment)\" endpoint, there is also this separate endpoint for just the download status.",
        "operationId": "enterprise-admin/get-download-status-for-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§environmentã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§environmentã„§downloadã„§status"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§environmentã„§downloadã„§status",
                  "$unref": "#/components/schemas/pre-receive-environment-download-status"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žpreã„§receiveã„§hooks": {
      "get": {
        "summary": "List pre-receive hooks",
        "description": "",
        "operationId": "enterprise-admin/list-pre-receive-hooks",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-pre-receive-hooks"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "name": "sort",
            "description": "The property to sort the results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "created",
                  "updated",
                  "name"
                ],
                "default": "created"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§hookã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žpreã„§receiveã„§hook",
                    "$unref": "#/components/schemas/pre-receive-hook"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žpreã„§receiveã„§hook",
                      "$unref": "#/components/schemas/pre-receive-hook"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a pre-receive hook",
        "description": "",
        "operationId": "enterprise-admin/create-pre-receive-hook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#create-a-pre-receive-hook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "name": "Check Commits",
                    "script": "scripts/commit_check.sh",
                    "enforcement": "disabled",
                    "allow_downstream_configuration": false,
                    "script_repository": {
                      "full_name": "DevIT/hooks"
                    },
                    "environment": {
                      "id": 2
                    }
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "script",
                  "script_repository",
                  "environment"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the hook."
                    }
                  },
                  "script": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The script that the hook runs."
                    }
                  },
                  "script_repository": {
                    "type": "object",
                    "description": "The GitHub repository where the script is kept.",
                    "properties": {},
                    "additionalProperties": true
                  },
                  "environment": {
                    "type": "object",
                    "description": "The pre-receive environment where the script is executed.",
                    "properties": {},
                    "additionalProperties": true
                  },
                  "enforcement": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The state of enforcement for this hook. default: `disabled`"
                    }
                  },
                  "allow_downstream_configuration": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether enforcement can be overridden at the org or repo level. default: `false`"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§hook",
                  "$unref": "#/components/schemas/pre-receive-hook"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žpreã„§receiveã„§hooksð›°Žð›°§pre_receive_hook_idð›°¨": {
      "get": {
        "summary": "Get a pre-receive hook",
        "description": "",
        "operationId": "enterprise-admin/get-pre-receive-hook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-a-pre-receive-hook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§hook",
                  "$unref": "#/components/schemas/pre-receive-hook"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a pre-receive hook",
        "description": "",
        "operationId": "enterprise-admin/update-pre-receive-hook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-a-pre-receive-hook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "requestBody": {
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "name": "Check Commits",
                    "environment": {
                      "id": 1
                    },
                    "allow_downstream_configuration": true
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the hook."
                    }
                  },
                  "script": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The script that the hook runs."
                    }
                  },
                  "script_repository": {
                    "type": "object",
                    "description": "The GitHub repository where the script is kept.",
                    "properties": {},
                    "additionalProperties": true
                  },
                  "environment": {
                    "type": "object",
                    "description": "The pre-receive environment where the script is executed.",
                    "properties": {},
                    "additionalProperties": true
                  },
                  "enforcement": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The state of enforcement for this hook."
                    }
                  },
                  "allow_downstream_configuration": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether enforcement can be overridden at the org or repo level."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpreã„§receiveã„§hookã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žpreã„§receiveã„§hook",
                  "$unref": "#/components/schemas/pre-receive-hook"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a pre-receive hook",
        "description": "",
        "operationId": "enterprise-admin/delete-pre-receive-hook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-pre-receive-hook"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žadminð›°Žtokens": {
      "get": {
        "summary": "List personal access tokens",
        "description": "Lists personal access tokens for all users, including admin users.",
        "operationId": "enterprise-admin/list-personal-access-tokens",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-personal-access-tokens"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žauthorization",
                    "$unref": "#/components/schemas/authorization"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žauthorization",
                      "$unref": "#/components/schemas/authorization"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žtokensð›°Žð›°§token_idð›°¨": {
      "delete": {
        "summary": "Delete a personal access token",
        "description": "Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.",
        "operationId": "enterprise-admin/delete-personal-access-token",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-personal-access-token"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žtokenã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žadminð›°Žusers": {
      "post": {
        "summary": "Create a user",
        "description": "If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.\n\nThe login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `\"octo_cat\"` as the login, a user named `\"octo-cat\"` will be created.\n\nIf the login name or email address is already associated with an account, the server will return a `422` response.",
        "operationId": "enterprise-admin/create-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#create-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "login": "monalisa",
                    "email": "octocat@github.com"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "login"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The user's username."
                    }
                  },
                  "email": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "**Required for built-in authentication.** The user's email\naddress. This parameter can be omitted when using CAS, LDAP, or SAML.\nFor more information, see \"[About authentication for your enterprise](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise).\""
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žsimpleã„§user"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žsimpleã„§user",
                  "$unref": "#/components/schemas/simple-user"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žadminð›°Žusersð›°Žð›°§usernameð›°¨": {
      "patch": {
        "summary": "Update the username for a user",
        "description": "",
        "operationId": "enterprise-admin/update-username-for-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-the-username-for-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "login": "thenewmonalisa"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "login"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The user's new username."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "value": {
                      "message": "Job queued to rename user. It may take a few minutes to complete.",
                      "url": "https://api.github.com/user/1"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "url": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#suspend-a-user) is often a better option.\n\nYou can delete any user account except your own.",
        "operationId": "enterprise-admin/delete-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žadminð›°Žusersð›°Žð›°§usernameð›°¨ð›°Žauthorizations": {
      "post": {
        "summary": "Create an impersonation OAuth token",
        "description": "",
        "operationId": "enterprise-admin/create-impersonation-o-auth-token",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#create-an-impersonation-oauth-token"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "A list of [scopes](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response when getting an existing impersonation OAuth token",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorization"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "201": {
            "description": "Response when creating a new impersonation OAuth token",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorization"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an impersonation OAuth token",
        "description": "",
        "operationId": "enterprise-admin/delete-impersonation-o-auth-token",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žappð›°Žinstallations": {
      "get": {
        "summary": "List installations for the authenticated app",
        "description": "You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/list-installations",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#list-installations-for-the-authenticated-app"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "apps",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsince"
          },
          {
            "name": "outdated",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The permissions the installation has are included under the `permissions` key.",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žbaseã„§installationã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žinstallation",
                    "$unref": "#/components/schemas/installation"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žinstallation",
                      "$unref": "#/components/schemas/installation"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      }
    },
    "ð›°Žappð›°Žinstallationsð›°Žð›°§installation_idð›°¨": {
      "get": {
        "summary": "Get an installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find an installation's information using the installation id.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#get-an-installation-for-the-authenticated-app"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "apps",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žinstallationã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žbaseã„§installation"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žinstallation",
                  "$unref": "#/components/schemas/installation"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žappð›°Žinstallationsð›°Žð›°§installation_idð›°¨ð›°Žaccess_tokens": {
      "post": {
        "summary": "Create an installation access token for an app",
        "description": "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/create-installation-access-token",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps/#create-an-installation-access-token-for-an-app"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "apps",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žinstallationã„§id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "repository": "Hello-World",
                    "permissions": {
                      "issues": "write",
                      "contents": "read"
                    }
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "repositories": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string",
                        "example": "rails"
                      }
                    },
                    "meta": {
                      "description": "List of repository names that the token should have access to",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "rails"
                      }
                    }
                  },
                  "repository_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "meta": {
                        "type": "integer"
                      }
                    },
                    "meta": {
                      "description": "List of repository IDs that the token should have access to",
                      "example": [
                        1
                      ],
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  },
                  "permissions": {
                    "$ref": "#/components/schemasð›°Žappã„§permissions",
                    "$unref": "#/components/schemas/app-permissions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žinstallationã„§token"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žinstallationã„§token",
                  "$unref": "#/components/schemas/installation-token"
                }
              }
            }
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žapplicationsð›°Žgrants": {
      "get": {
        "summary": "List your grants",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nYou can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/list-grants",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#list-your-grants"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "description": "The client ID of your GitHub app.",
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žapplicationã„§grantã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žapplicationã„§grant",
                    "$unref": "#/components/schemas/application-grant"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žapplicationã„§grant",
                      "$unref": "#/components/schemas/application-grant"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žapplicationsð›°Žgrantsð›°Žð›°§grant_idð›°¨": {
      "get": {
        "summary": "Get a single grant",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/get-grant",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#get-a-single-grant"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žgrantã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žapplicationã„§grant"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žapplicationã„§grant",
                  "$unref": "#/components/schemas/application-grant"
                }
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          }
        }
      },
      "delete": {
        "summary": "Delete a grant",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/delete-grant",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#delete-a-grant"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žgrantã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          }
        }
      }
    },
    "ð›°Žapplicationsð›°Žð›°§client_idð›°¨ð›°Žtoken": {
      "post": {
        "summary": "Check a token",
        "description": "OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/check-token",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#check-a-token"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "oauth-applications"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žclientã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                  }
                }
              },
              "schema": {
                "required": [
                  "access_token"
                ],
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "meta": {
                      "description": "The access_token of the OAuth application.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§withã„§user"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      },
      "patch": {
        "summary": "Reset a token",
        "description": "OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/reset-token",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#reset-a-token"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "oauth-applications"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žclientã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                  }
                }
              },
              "schema": {
                "required": [
                  "access_token"
                ],
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "meta": {
                      "description": "The access_token of the OAuth application.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§withã„§user"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žapplicationsð›°Žð›°§client_idð›°¨ð›°Žtokenð›°Žscoped": {
      "post": {
        "summary": "Create a scoped access token",
        "description": "Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/scope-token",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#create-a-scoped-access-token"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "oauth-applications"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žclientã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a",
                    "target": "octocat",
                    "permissions": {
                      "metadata": "read",
                      "issues": "write",
                      "contents": "read"
                    }
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "access_token"
                ],
                "properties": {
                  "access_token": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The OAuth access token used to authenticate to the GitHub API.",
                      "example": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                    }
                  },
                  "target": {
                    "type": "string",
                    "meta": {
                      "description": "The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.",
                      "type": "string",
                      "example": "octocat"
                    }
                  },
                  "target_id": {
                    "type": "integer",
                    "meta": {
                      "description": "The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.",
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "repositories": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string",
                        "example": "rails"
                      }
                    },
                    "meta": {
                      "description": "The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "rails"
                      }
                    }
                  },
                  "repository_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "meta": {
                        "type": "integer"
                      }
                    },
                    "meta": {
                      "description": "The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.",
                      "example": [
                        1
                      ],
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  },
                  "permissions": {
                    "$ref": "#/components/schemasð›°Žappã„§permissions",
                    "$unref": "#/components/schemas/app-permissions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscopeã„§token"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žauthorizations": {
      "get": {
        "summary": "List your authorizations",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/list-authorizations",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#list-your-authorizations"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "description": "The client ID of your GitHub app.",
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žauthorization",
                    "$unref": "#/components/schemas/authorization"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žauthorization",
                      "$unref": "#/components/schemas/authorization"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      },
      "post": {
        "summary": "Create a new authorization",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nCreates OAuth tokens using [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n\nTo create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.\n\nYou can also create tokens on GitHub Enterprise Server from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).\n\nOrganizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/create-authorization",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#create-a-new-authorization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "summary": "Create an authorization",
                  "value": {
                    "scopes": [
                      "public_repo"
                    ],
                    "note": "optional note",
                    "note_url": "http://optional/note/url",
                    "client_id": "abcde12345fghij67890",
                    "client_secret": "3ef4ad510c59ad37bac6bb4f80047fb3aee3cc7f"
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "description": "A list of scopes that this authorization is in.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "public_repo",
                        "user"
                      ],
                      "nullable": true
                    }
                  },
                  "note": {
                    "type": "string",
                    "meta": {
                      "description": "A note to remind you what the OAuth token is for.",
                      "type": "string",
                      "example": "Update all gems"
                    }
                  },
                  "note_url": {
                    "type": "string",
                    "meta": {
                      "description": "A URL to remind you what app the OAuth token is for.",
                      "type": "string"
                    }
                  },
                  "client_id": {
                    "type": "string",
                    "meta": {
                      "description": "The OAuth app client key for which to create the token.",
                      "maxLength": 20,
                      "type": "string"
                    }
                  },
                  "client_secret": {
                    "type": "string",
                    "meta": {
                      "description": "The OAuth app client secret for which to create the token.",
                      "maxLength": 40,
                      "type": "string"
                    }
                  },
                  "fingerprint": {
                    "type": "string",
                    "meta": {
                      "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorization"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "410": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žgone"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žauthorizationsð›°Žclientsð›°Žð›°§client_idð›°¨": {
      "put": {
        "summary": "Get-or-create an authorization for a specific app",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nCreates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n\n**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/get-or-create-authorization-for-app",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žoauthã„§clientã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "summary": "Create an authorization for an app",
                  "value": {
                    "client_secret": "3ef4ad510c59ad37bac6bb4f80047fb3aee3cc7f",
                    "scopes": [
                      "public_repo"
                    ],
                    "note": "optional note",
                    "note_url": "http://optional/note/url"
                  }
                }
              },
              "schema": {
                "required": [
                  "client_secret"
                ],
                "type": "object",
                "properties": {
                  "client_secret": {
                    "type": "string",
                    "meta": {
                      "description": "The OAuth app client secret for which to create the token.",
                      "maxLength": 40,
                      "type": "string"
                    }
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "description": "A list of scopes that this authorization is in.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "public_repo",
                        "user"
                      ],
                      "nullable": true
                    }
                  },
                  "note": {
                    "type": "string",
                    "meta": {
                      "description": "A note to remind you what the OAuth token is for.",
                      "type": "string",
                      "example": "Update all gems"
                    }
                  },
                  "note_url": {
                    "type": "string",
                    "meta": {
                      "description": "A URL to remind you what app the OAuth token is for.",
                      "type": "string"
                    }
                  },
                  "fingerprint": {
                    "type": "string",
                    "meta": {
                      "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "if returning an existing token",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "responseã„§ifã„§returningã„§anã„§existingã„§token": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§responseã„§ifã„§returningã„§anã„§existingã„§tokenã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "201": {
            "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorization"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žauthorizationsð›°Žclientsð›°Žð›°§client_idð›°¨ð›°Žð›°§fingerprintð›°¨": {
      "put": {
        "summary": "Get-or-create an authorization for a specific app and fingerprint",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nThis method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app-and-fingerprint"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žoauthã„§clientã„§id"
          },
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "summary": "Create an authorization for an app and fingerprint",
                  "value": {
                    "client_secret": "3ef4ad510c59ad37bac6bb4f80047fb3aee3cc7f",
                    "scopes": [
                      "public_repo"
                    ],
                    "note": "optional note",
                    "note_url": "http://optional/note/url"
                  }
                }
              },
              "schema": {
                "required": [
                  "client_secret"
                ],
                "type": "object",
                "properties": {
                  "client_secret": {
                    "type": "string",
                    "meta": {
                      "description": "The OAuth app client secret for which to create the token.",
                      "maxLength": 40,
                      "type": "string"
                    }
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "description": "A list of scopes that this authorization is in.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "public_repo",
                        "user"
                      ],
                      "nullable": true
                    }
                  },
                  "note": {
                    "type": "string",
                    "meta": {
                      "description": "A note to remind you what the OAuth token is for.",
                      "type": "string",
                      "example": "Update all gems"
                    }
                  },
                  "note_url": {
                    "type": "string",
                    "meta": {
                      "description": "A URL to remind you what app the OAuth token is for.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "if returning an existing token",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "responseã„§ifã„§returningã„§anã„§existingã„§token": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§responseã„§ifã„§returningã„§anã„§existingã„§token"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Response if returning a new token",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§3"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žauthorizationsð›°Žð›°§authorization_idð›°¨": {
      "get": {
        "summary": "Get a single authorization",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/get-authorization",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#get-a-single-authorization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauthorizationã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          }
        }
      },
      "patch": {
        "summary": "Update an existing authorization",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n\nYou can only send one of these scope keys at a time.",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/update-authorization",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#update-an-existing-authorization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauthorizationã„§id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "description": "A list of scopes that this authorization is in.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "public_repo",
                        "user"
                      ],
                      "nullable": true
                    }
                  },
                  "add_scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "description": "A list of scopes to add to this authorization.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "remove_scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "description": "A list of scopes to remove from this authorization.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "note": {
                    "type": "string",
                    "meta": {
                      "description": "A note to remind you what the OAuth token is for.",
                      "type": "string",
                      "example": "Update all gems"
                    }
                  },
                  "note_url": {
                    "type": "string",
                    "meta": {
                      "description": "A URL to remind you what app the OAuth token is for.",
                      "type": "string"
                    }
                  },
                  "fingerprint": {
                    "type": "string",
                    "meta": {
                      "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauthorizationã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žauthorization",
                  "$unref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      },
      "delete": {
        "summary": "Delete an authorization",
        "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "tags": [
          "oauth-authorizations"
        ],
        "operationId": "oauth-authorizations/delete-authorization",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#delete-an-authorization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2020-11-13",
          "deprecationDate": "2020-02-14",
          "category": "oauth-authorizations",
          "subcategory": null
        },
        "deprecated": true,
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauthorizationã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žannouncement": {
      "get": {
        "summary": "Get the global announcement banner",
        "description": "Gets the current message and expiration date of the global announcement banner in your enterprise.",
        "tags": [
          "enterprise-admin"
        ],
        "operationId": "enterprise-admin/get-announcement",
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "announcement"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žannouncement"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žannouncement",
                  "$unref": "#/components/schemas/announcement"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Set the global announcement banner",
        "description": "Sets the message and expiration time for the global announcement banner in your enterprise.",
        "tags": [
          "enterprise-admin"
        ],
        "operationId": "enterprise-admin/set-announcement",
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "announcement"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "schema": {
                "$ref": "#/components/schemasð›°Žannouncement",
                "$unref": "#/components/schemas/announcement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žannouncement"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žannouncement",
                  "$unref": "#/components/schemas/announcement"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove the global announcement banner",
        "description": "Removes the global announcement banner in your enterprise.",
        "tags": [
          "enterprise-admin"
        ],
        "operationId": "enterprise-admin/remove-announcement",
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "announcement"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žsettingsð›°Žlicense": {
      "get": {
        "summary": "Get license information",
        "description": "",
        "operationId": "enterprise-admin/get-license-information",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-license-information"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "license"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žlicenseã„§info"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žlicenseã„§info",
                  "$unref": "#/components/schemas/license-info"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žall": {
      "get": {
        "summary": "Get all statistics",
        "description": "",
        "operationId": "enterprise-admin/get-all-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Ženterpriseã„§overview"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§overview",
                  "$unref": "#/components/schemas/enterprise-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žcomments": {
      "get": {
        "summary": "Get comment statistics",
        "description": "",
        "operationId": "enterprise-admin/get-comment-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-comment-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§commentã„§overview",
                  "$unref": "#/components/schemas/enterprise-comment-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žgists": {
      "get": {
        "summary": "Get gist statistics",
        "description": "",
        "operationId": "enterprise-admin/get-gist-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-gist-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§gistã„§overview",
                  "$unref": "#/components/schemas/enterprise-gist-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žhooks": {
      "get": {
        "summary": "Get hooks statistics",
        "operationId": "enterprise-admin/get-hooks-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-hooks-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§hookã„§overview",
                  "$unref": "#/components/schemas/enterprise-hook-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žissues": {
      "get": {
        "summary": "Get issue statistics",
        "description": "",
        "operationId": "enterprise-admin/get-issue-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-issues-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§issueã„§overview",
                  "$unref": "#/components/schemas/enterprise-issue-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žmilestones": {
      "get": {
        "summary": "Get milestone statistics",
        "description": "",
        "operationId": "enterprise-admin/get-milestone-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-milestone-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§milestoneã„§overview",
                  "$unref": "#/components/schemas/enterprise-milestone-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žorgs": {
      "get": {
        "summary": "Get organization statistics",
        "description": "",
        "operationId": "enterprise-admin/get-org-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-organization-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§organizationã„§overview",
                  "$unref": "#/components/schemas/enterprise-organization-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žpages": {
      "get": {
        "summary": "Get pages statistics",
        "description": "",
        "operationId": "enterprise-admin/get-pages-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-pages-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§pageã„§overview",
                  "$unref": "#/components/schemas/enterprise-page-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žpulls": {
      "get": {
        "summary": "Get pull request statistics",
        "description": "",
        "operationId": "enterprise-admin/get-pull-request-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-pull-requests-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§pullã„§requestã„§overview",
                  "$unref": "#/components/schemas/enterprise-pull-request-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žrepos": {
      "get": {
        "summary": "Get repository statistics",
        "operationId": "enterprise-admin/get-repo-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-repository-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§repositoryã„§overview",
                  "$unref": "#/components/schemas/enterprise-repository-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterpriseð›°Žstatsð›°Žusers": {
      "get": {
        "summary": "Get users statistics",
        "description": "",
        "operationId": "enterprise-admin/get-user-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-users-statistics"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§userã„§overview",
                  "$unref": "#/components/schemas/enterprise-user-overview"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°Žactionsð›°Žcacheð›°Žusageã„§policy": {
      "get": {
        "summary": "Get GitHub Actions cache usage policy for an enterprise",
        "description": "Gets the GitHub Actions cache usage policy for an enterprise.\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\nGitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/get-actions-cache-usage-policy-for-enterprise",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-github-actions-cache-usage-policy-for-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "cache"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žactionsã„§cacheã„§usageã„§policyã„§enterprise"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žactionsã„§cacheã„§usageã„§policyã„§enterprise",
                  "$unref": "#/components/schemas/actions-cache-usage-policy-enterprise"
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Set GitHub Actions cache usage policy for an enterprise",
        "description": "Sets the GitHub Actions cache usage policy for an enterprise.\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\nGitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/set-actions-cache-usage-policy-for-enterprise",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#set-github-actions-cache-usage-policy-for-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "cache"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "selected_actions": {
                  "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žactionsã„§cacheã„§usageã„§policyã„§enterprise"
                }
              },
              "schema": {
                "$ref": "#/components/schemasð›°Žactionsã„§cacheã„§usageã„§policyã„§enterprise",
                "$unref": "#/components/schemas/actions-cache-usage-policy-enterprise"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°Žactionsð›°Žpermissionsð›°Žselectedã„§actions": {
      "get": {
        "summary": "Get allowed actions for an enterprise",
        "description": "Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/get-allowed-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-allowed-actions-for-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "permissions"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žselectedã„§actions"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žselectedã„§actions",
                  "$unref": "#/components/schemas/selected-actions"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set allowed actions for an enterprise",
        "description": "Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/set-allowed-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#set-allowed-actions-for-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "permissions"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "selected_actions": {
                  "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žselectedã„§actions"
                }
              },
              "schema": {
                "$ref": "#/components/schemasð›°Žselectedã„§actions",
                "$unref": "#/components/schemas/selected-actions"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°Žauditã„§log": {
      "get": {
        "summary": "Get the audit log for an enterprise",
        "operationId": "enterprise-admin/get-audit-log",
        "description": "Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise"
        },
        "xã„§github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "audit-log"
        },
        "xã„§octokit": {
          "changes": [
            {
              "type": "OPERATION",
              "date": "2021-04-30",
              "before": {
                "operationId": "audit-log/get-audit-log"
              }
            }
          ],
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§phrase"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§include"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§after"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§before"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§order"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauditã„§log"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žauditã„§logã„§event",
                    "$unref": "#/components/schemas/audit-log-event"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žauditã„§logã„§event",
                      "$unref": "#/components/schemas/audit-log-event"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°Žsecretã„§scanningð›°Žalerts": {
      "get": {
        "summary": "List secret scanning alerts for an enterprise",
        "description": "Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.\nTo use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).",
        "tags": [
          "secret-scanning"
        ],
        "operationId": "secret-scanning/list-alerts-for-enterprise",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "secret-scanning",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§state"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§secretã„§type"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§resolution"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§sort"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpaginationã„§before"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpaginationã„§after"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorganizationã„§secretã„§scanningã„§alertã„§list"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žorganizationã„§secretã„§scanningã„§alert",
                    "$unref": "#/components/schemas/organization-secret-scanning-alert"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žorganizationã„§secretã„§scanningã„§alert",
                      "$unref": "#/components/schemas/organization-secret-scanning-alert"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          },
          "503": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žservice_unavailable"
          }
        }
      }
    },
    "ð›°Žmeta": {
      "get": {
        "summary": "Get GitHub Enterprise Server meta information",
        "description": "",
        "tags": [
          "meta"
        ],
        "operationId": "meta/get",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/meta#get-github-meta-information"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "meta",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žapiã„§overview"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žapiã„§overview",
                  "$unref": "#/components/schemas/api-overview"
                }
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          }
        }
      }
    },
    "ð›°Žorganizationsð›°Žð›°§organization_idð›°¨ð›°Žcustom_roles": {
      "get": {
        "summary": "List custom repository roles in an organization",
        "description": "List the custom repository roles available in this organization. In order to see custom\nrepository roles in an organization, the authenticated user must be an organization owner.\n\nTo use this endpoint the authenticated user must be an administrator for the organization or of an repository of the organizaiton and must use an access token with `admin:org repo` scope.\nGitHub Apps must have the `organization_custom_roles:read` organization permission to use this endpoint.\n\nFor more information on custom repository roles, see \"[Managing custom repository roles for an organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)\".",
        "tags": [
          "orgs"
        ],
        "operationId": "orgs/list-custom-roles",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#list-custom-repository-roles-in-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": "custom_roles"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "The unique identifier of the organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response - list of custom role names",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorganizationã„§customã„§repositoryã„§roleã„§example"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "meta": {
                        "description": "The number of custom roles in this organization",
                        "example": 3,
                        "type": "integer"
                      }
                    },
                    "custom_roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemasð›°Žorganizationã„§customã„§repositoryã„§role",
                        "$unref": "#/components/schemas/organization-custom-repository-role"
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemasð›°Žorganizationã„§customã„§repositoryã„§role",
                          "$unref": "#/components/schemas/organization-custom-repository-role"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨": {
      "get": {
        "summary": "Get an organization",
        "description": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nGitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below.\"",
        "tags": [
          "orgs"
        ],
        "operationId": "orgs/get",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#get-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "defaultã„§response": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorganizationã„§fullã„§defaultã„§response"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žorganizationã„§full",
                  "$unref": "#/components/schemas/organization-full"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      },
      "patch": {
        "summary": "Update an organization",
        "description": "**Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\nEnables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.",
        "tags": [
          "orgs"
        ],
        "operationId": "orgs/update",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/orgs/#update-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "billing_email": "mona@github.com",
                    "company": "GitHub",
                    "email": "mona@github.com",
                    "twitter_username": "github",
                    "location": "San Francisco",
                    "name": "github",
                    "description": "GitHub, the company.",
                    "default_repository_permission": "read",
                    "members_can_create_repositories": true,
                    "members_allowed_repository_creation_type": "all"
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "Billing email address. This address is not publicized."
                    }
                  },
                  "company": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The company name."
                    }
                  },
                  "email": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The publicly visible email address."
                    }
                  },
                  "twitter_username": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The Twitter username of the company."
                    }
                  },
                  "location": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The location."
                    }
                  },
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The shorthand name of the company."
                    }
                  },
                  "description": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The description of the company."
                    }
                  },
                  "has_organization_projects": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether an organization can use organization projects."
                    }
                  },
                  "has_repository_projects": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether repositories that belong to the organization can use repository projects."
                    }
                  },
                  "default_repository_permission": {
                    "type": "enum",
                    "enum": [
                      "read",
                      "write",
                      "admin",
                      "none"
                    ],
                    "meta": {
                      "type": "string",
                      "description": "Default permission level members have for organization repositories.",
                      "enum": [
                        "read",
                        "write",
                        "admin",
                        "none"
                      ],
                      "default": "read"
                    }
                  },
                  "members_can_create_repositories": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
                      "default": true
                    }
                  },
                  "members_can_create_internal_repositories": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                    }
                  },
                  "members_can_create_private_repositories": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                    }
                  },
                  "members_can_create_public_repositories": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                    }
                  },
                  "members_allowed_repository_creation_type": {
                    "type": "enum",
                    "enum": [
                      "all",
                      "private",
                      "none"
                    ],
                    "meta": {
                      "type": "string",
                      "description": "Specifies which types of repositories non-admin organization members can create. \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.",
                      "enum": [
                        "all",
                        "private",
                        "none"
                      ]
                    }
                  },
                  "members_can_create_pages": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.",
                      "default": true
                    }
                  },
                  "members_can_fork_private_repositories": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether organization members can fork private organization repositories.",
                      "default": false
                    }
                  },
                  "web_commit_signoff_required": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.",
                      "default": false
                    }
                  },
                  "blog": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "example": "\"http://github.blog\""
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorganizationã„§full"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žorganizationã„§full",
                  "$unref": "#/components/schemas/organization-full"
                }
              }
            }
          },
          "409": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žconflict"
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "applicationð›°Žjson": {
                "schema": {
                  "type": "oneOf",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemasð›°Žvalidationã„§error",
                      "$unref": "#/components/schemas/validation-error"
                    },
                    {
                      "$ref": "#/components/schemasð›°Žvalidationã„§errorã„§simple",
                      "$unref": "#/components/schemas/validation-error-simple"
                    }
                  ],
                  "meta": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemasð›°Žvalidationã„§error",
                        "$unref": "#/components/schemas/validation-error"
                      },
                      {
                        "$ref": "#/components/schemasð›°Žvalidationã„§errorã„§simple",
                        "$unref": "#/components/schemas/validation-error-simple"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žactionsð›°Žpermissionsð›°Žselectedã„§actions": {
      "get": {
        "summary": "Get allowed actions for an organization",
        "description": "Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.",
        "operationId": "actions/get-allowed-actions-organization",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-allowed-actions-for-an-organization"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "permissions"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žselectedã„§actions"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žselectedã„§actions",
                  "$unref": "#/components/schemas/selected-actions"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set allowed actions for an organization",
        "description": "Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nIf the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.\n\nTo use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.",
        "operationId": "actions/set-allowed-actions-organization",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#set-allowed-actions-for-an-organization"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "permissions"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "selected_actions": {
                  "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žselectedã„§actions"
                }
              },
              "schema": {
                "$ref": "#/components/schemasð›°Žselectedã„§actions",
                "$unref": "#/components/schemas/selected-actions"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žauditã„§log": {
      "get": {
        "summary": "Get the audit log for an organization",
        "description": "Gets the audit log for an organization. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\"\n\nTo use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.\n\nBy default, the response includes up to 30 events from the past three months. Use the `phrase` parameter to filter results and retrieve older events. For example, use the `phrase` parameter with the `created` qualifier to filter events based on when the events occurred. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.6/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).\"\n\nUse pagination to retrieve fewer or more than 30 events. For more information, see \"[Resources in the REST API](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).\"",
        "operationId": "orgs/get-audit-log",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#get-audit-log"
        },
        "xã„§github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§phrase"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§include"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§after"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§before"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žauditã„§logã„§order"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žauditã„§log"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žauditã„§logã„§event",
                    "$unref": "#/components/schemas/audit-log-event"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žauditã„§logã„§event",
                      "$unref": "#/components/schemas/audit-log-event"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žexternalã„§groupð›°Žð›°§group_idð›°¨": {
      "get": {
        "summary": "Get an external group",
        "description": "Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.\n\nYou can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/external-idp-group-info-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/teams#external-idp-group-info-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žgroupã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žexternalã„§group"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žexternalã„§group",
                  "$unref": "#/components/schemas/external-group"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žexternalã„§groups": {
      "get": {
        "summary": "List external groups in an organization",
        "description": "Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub Enterprise Server generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"\n\nYou can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/list-external-idp-groups-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-external-idp-groups-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "name": "page",
            "description": "Page token",
            "in": "query",
            "schema": {
              "type": "integer",
              "meta": {
                "type": "integer"
              }
            }
          },
          {
            "name": "display_name",
            "description": "Limits the list to groups containing the text in the group name",
            "in": "query",
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žexternalã„§groups"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žexternalã„§groups",
                  "$unref": "#/components/schemas/external-groups"
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel=\"next\"",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žinstallation": {
      "get": {
        "summary": "Get an organization installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-org-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žinstallation"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žinstallation",
                  "$unref": "#/components/schemas/installation"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žinstallations": {
      "get": {
        "summary": "List app installations for an organization",
        "description": "Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.",
        "tags": [
          "orgs"
        ],
        "operationId": "orgs/list-app-installations",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#list-app-installations-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žinstallationã„§paginated"
                  }
                },
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "installations"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "meta": {
                        "type": "integer"
                      }
                    },
                    "installations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemasð›°Žinstallation",
                        "$unref": "#/components/schemas/installation"
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemasð›°Žinstallation",
                          "$unref": "#/components/schemas/installation"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žpreã„§receiveã„§hooks": {
      "get": {
        "summary": "List pre-receive hooks for an organization",
        "description": "List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.",
        "operationId": "enterprise-admin/list-pre-receive-hooks-for-org",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "org-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "name": "sort",
            "description": "The sort order for the response collection.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "created",
                  "updated",
                  "name"
                ],
                "default": "created"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorgã„§preã„§receiveã„§hookã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žorgã„§preã„§receiveã„§hook",
                    "$unref": "#/components/schemas/org-pre-receive-hook"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žorgã„§preã„§receiveã„§hook",
                      "$unref": "#/components/schemas/org-pre-receive-hook"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žpreã„§receiveã„§hooksð›°Žð›°§pre_receive_hook_idð›°¨": {
      "get": {
        "summary": "Get a pre-receive hook for an organization",
        "description": "",
        "operationId": "enterprise-admin/get-pre-receive-hook-for-org",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "org-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorgã„§preã„§receiveã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žorgã„§preã„§receiveã„§hook",
                  "$unref": "#/components/schemas/org-pre-receive-hook"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update pre-receive hook enforcement for an organization",
        "description": "For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`",
        "operationId": "enterprise-admin/update-pre-receive-hook-enforcement-for-org",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "org-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "requestBody": {
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "enforcement": "enabled",
                    "allow_downstream_configuration": false
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "enforcement": {
                    "type": "string",
                    "meta": {
                      "description": "The state of enforcement for the hook on this repository.",
                      "type": "string"
                    }
                  },
                  "allow_downstream_configuration": {
                    "type": "boolean",
                    "meta": {
                      "description": "Whether repositories can override enforcement.",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorgã„§preã„§receiveã„§hookã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žorgã„§preã„§receiveã„§hook",
                  "$unref": "#/components/schemas/org-pre-receive-hook"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove pre-receive hook enforcement for an organization",
        "description": "Removes any overrides for this hook at the org level for this org.",
        "operationId": "enterprise-admin/remove-pre-receive-hook-enforcement-for-org",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "org-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorgã„§preã„§receiveã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žorgã„§preã„§receiveã„§hook",
                  "$unref": "#/components/schemas/org-pre-receive-hook"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žsecretã„§scanningð›°Žalerts": {
      "get": {
        "summary": "List secret scanning alerts for an organization",
        "description": "Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.\nTo use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
        "tags": [
          "secret-scanning"
        ],
        "operationId": "secret-scanning/list-alerts-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-organization"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "secret-scanning",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§state"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§secretã„§type"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§resolution"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§sort"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žorganizationã„§secretã„§scanningã„§alertã„§list"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žorganizationã„§secretã„§scanningã„§alert",
                    "$unref": "#/components/schemas/organization-secret-scanning-alert"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žorganizationã„§secretã„§scanningã„§alert",
                      "$unref": "#/components/schemas/organization-secret-scanning-alert"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          },
          "503": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žservice_unavailable"
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žteams": {
      "post": {
        "summary": "Create a team",
        "description": "To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"\n\nWhen you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".",
        "tags": [
          "teams"
        ],
        "operationId": "teams/create",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-team"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "name": "Justice League",
                    "description": "A great team",
                    "permission": "push",
                    "privacy": "closed"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the team."
                    }
                  },
                  "description": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The description of the team."
                    }
                  },
                  "maintainers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "List GitHub IDs for organization members who will become team maintainers.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "repo_names": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "privacy": {
                    "type": "enum",
                    "enum": [
                      "secret",
                      "closed"
                    ],
                    "meta": {
                      "type": "string",
                      "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
                      "enum": [
                        "secret",
                        "closed"
                      ]
                    }
                  },
                  "permission": {
                    "type": "enum",
                    "enum": [
                      "pull",
                      "push"
                    ],
                    "meta": {
                      "type": "string",
                      "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified.",
                      "enum": [
                        "pull",
                        "push"
                      ],
                      "default": "pull"
                    }
                  },
                  "parent_team_id": {
                    "type": "integer",
                    "meta": {
                      "type": "integer",
                      "description": "The ID of a team to set as the parent team."
                    }
                  },
                  "ldap_dn": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the \"[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)\" endpoint to change the LDAP DN. For more information, see \"[Using LDAP](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync).\""
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žteamã„§full"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žteamã„§full",
                  "$unref": "#/components/schemas/team-full"
                }
              }
            }
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žorgsð›°Žð›°§orgð›°¨ð›°Žteamsð›°Žð›°§team_slugð›°¨ð›°Žexternalã„§groups": {
      "get": {
        "summary": "List a connection between an external group and a team",
        "description": "Lists a connection between a team and an external group.\n\nYou can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/list-linked-external-idp-groups-to-team-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-external-idp-group-team-connection"
        },
        "xã„§github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žteamã„§slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žexternalã„§groups"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žexternalã„§groups",
                  "$unref": "#/components/schemas/external-groups"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update the connection between an external group and a team",
        "description": "Creates a connection between a team and an external group.  Only one external group can be linked to a team.\n\nYou can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/link-external-idp-group-to-team-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/teams#link-external-idp-group-team-connection"
        },
        "xã„§github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": false,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žteamã„§slug"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "group_id": 123
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "group_id"
                ],
                "properties": {
                  "group_id": {
                    "type": "integer",
                    "meta": {
                      "type": "integer",
                      "description": "External Group Id",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žexternalã„§group"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žexternalã„§group",
                  "$unref": "#/components/schemas/external-group"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove the connection between an external group and a team",
        "description": "Deletes a connection between a team and an external group.\n\nYou can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/unlink-external-idp-group-from-team-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/teams#unlink-external-idp-group-team-connection"
        },
        "xã„§github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": false,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žorg"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žteamã„§slug"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žrate_limit": {
      "get": {
        "summary": "Get rate limit status for the authenticated user",
        "description": "**Note:** Accessing this endpoint does not count against your REST API rate limit.\n\n**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.",
        "tags": [
          "rate-limit"
        ],
        "operationId": "rate-limit/get",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "rate-limit",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrateã„§limitã„§overview"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrateã„§limitã„§overview",
                  "$unref": "#/components/schemas/rate-limit-overview"
                }
              }
            },
            "headers": {
              "Xã„§RateLimitã„§Limit": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žxã„§rateã„§limitã„§limit"
              },
              "Xã„§RateLimitã„§Remaining": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žxã„§rateã„§limitã„§remaining"
              },
              "Xã„§RateLimitã„§Reset": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žxã„§rateã„§limitã„§reset"
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žactionsð›°Žcacheð›°Žusageã„§policy": {
      "get": {
        "summary": "Get GitHub Actions cache usage policy for a repository",
        "description": "Gets GitHub Actions cache usage policy for a repository.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions:read` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/get-actions-cache-usage-policy",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-github-actions-cache-usage-policy-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "cache"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žactionsã„§cacheã„§usageã„§policy"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žactionsã„§cacheã„§usageã„§policyã„§forã„§repository",
                  "$unref": "#/components/schemas/actions-cache-usage-policy-for-repository"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Set GitHub Actions cache usage policy for a repository",
        "description": "Sets GitHub Actions cache usage policy for a repository.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions:write` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/set-actions-cache-usage-policy",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#set-github-actions-cache-usage-policy-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "cache"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "selected_actions": {
                  "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žactionsã„§cacheã„§usageã„§policy"
                }
              },
              "schema": {
                "$ref": "#/components/schemasð›°Žactionsã„§cacheã„§usageã„§policyã„§forã„§repository",
                "$unref": "#/components/schemas/actions-cache-usage-policy-for-repository"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žactionsð›°Žpermissionsð›°Žselectedã„§actions": {
      "get": {
        "summary": "Get allowed actions for a repository",
        "description": "Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.",
        "operationId": "actions/get-allowed-actions-repository",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-allowed-actions-for-a-repository"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "permissions"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žselectedã„§actions"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žselectedã„§actions",
                  "$unref": "#/components/schemas/selected-actions"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set allowed actions for a repository",
        "description": "Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n\nIf the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.\n\nTo use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.",
        "operationId": "actions/set-allowed-actions-repository",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#set-allowed-actions-for-a-repository"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "permissions"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "selected_actions": {
                  "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žselectedã„§actions"
                }
              },
              "schema": {
                "$ref": "#/components/schemasð›°Žselectedã„§actions",
                "$unref": "#/components/schemas/selected-actions"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žactionsð›°Žruns": {
      "get": {
        "summary": "List workflow runs for a repository",
        "description": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-workflow-runs-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#list-workflow-runs-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žactor"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žworkflowã„§runã„§branch"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ževent"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žworkflowã„§runã„§status"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žcreated"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žexcludeã„§pullã„§requests"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žworkflowã„§runã„§checkã„§suiteã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žworkflowã„§runã„§paginated"
                  }
                },
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "workflow_runs"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "meta": {
                        "type": "integer"
                      }
                    },
                    "workflow_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemasð›°Žworkflowã„§run",
                        "$unref": "#/components/schemas/workflow-run"
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemasð›°Žworkflowã„§run",
                          "$unref": "#/components/schemas/workflow-run"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žactionsð›°Žrunsð›°Žð›°§run_idð›°¨": {
      "get": {
        "summary": "Get a workflow run",
        "description": "Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/get-workflow-run",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-a-workflow-run"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrunã„§id"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žexcludeã„§pullã„§requests"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žworkflowã„§run"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žworkflowã„§run",
                  "$unref": "#/components/schemas/workflow-run"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žactionsð›°Žrunsð›°Žð›°§run_idð›°¨ð›°Žattemptsð›°Žð›°§attempt_numberð›°¨": {
      "get": {
        "summary": "Get a workflow run attempt",
        "description": "Gets a specific workflow run attempt. Anyone with read access to the repository\ncan use this endpoint. If the repository is private you must use an access token\nwith the `repo` scope. GitHub Apps must have the `actions:read` permission to\nuse this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/get-workflow-run-attempt",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-a-workflow-run-attempt"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrunã„§id"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žattemptã„§number"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žexcludeã„§pullã„§requests"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žworkflowã„§run"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žworkflowã„§run",
                  "$unref": "#/components/schemas/workflow-run"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žactionsð›°Žworkflowsð›°Žð›°§workflow_idð›°¨ð›°Žruns": {
      "get": {
        "summary": "List workflow runs for a workflow",
        "description": "List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-workflow-runs",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/actions#list-workflow-runs"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žworkflowã„§id"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žactor"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žworkflowã„§runã„§branch"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ževent"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žworkflowã„§runã„§status"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žcreated"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žexcludeã„§pullã„§requests"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žworkflowã„§runã„§checkã„§suiteã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žworkflowã„§runã„§paginated"
                  }
                },
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "workflow_runs"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "meta": {
                        "type": "integer"
                      }
                    },
                    "workflow_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemasð›°Žworkflowã„§run",
                        "$unref": "#/components/schemas/workflow-run"
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemasð›°Žworkflowã„§run",
                          "$unref": "#/components/schemas/workflow-run"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žautolinks": {
      "get": {
        "summary": "List all autolinks of a repository",
        "description": "This returns a list of autolinks configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-autolinks",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/v3/repos#list-autolinks"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "autolinks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žautolinkã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žautolink",
                    "$unref": "#/components/schemas/autolink"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žautolink",
                      "$unref": "#/components/schemas/autolink"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an autolink reference for a repository",
        "description": "Users with admin access to the repository can create an autolink.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-autolink",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/v3/repos#create-an-autolink"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "autolinks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "key_prefix": "TICKET-",
                    "url_template": "https://example.com/TICKET?query=<num>",
                    "is_alphanumeric": true
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "key_prefix",
                  "url_template"
                ],
                "properties": {
                  "key_prefix": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit."
                    }
                  },
                  "url_template": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The URL must contain `<num>` for the reference number."
                    }
                  },
                  "is_alphanumeric": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "default": "true",
                      "description": "Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žautolink"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žautolink",
                  "$unref": "#/components/schemas/autolink"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/autolinks/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žautolinksð›°Žð›°§autolink_idð›°¨": {
      "get": {
        "summary": "Get an autolink reference of a repository",
        "description": "This returns a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-autolink",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/v3/repos#get-autolink"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "autolinks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žautolinkã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žautolink"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žautolink",
                  "$unref": "#/components/schemas/autolink"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žcodeã„§scanningð›°Žanalyses": {
      "get": {
        "summary": "List code scanning analyses for a repository",
        "description": "Lists the details of all code scanning analyses for a repository,\nstarting with the most recent.\nThe response is paginated and you can use the `page` and `per_page` parameters\nto list the analyses you're interested in.\nBy default 30 analyses are listed per page.\n\nThe `rules_count` field in the response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nYou must use an access token with the `security_events` scope to use this endpoint with private repos,\nthe `public_repo` scope also grants permission to read security events on public repos only.\nGitHub Apps must have the `security_events` read permission to use this endpoint.\n\n**Deprecation notice**:\nThe `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.",
        "operationId": "code-scanning/list-recent-analyses",
        "tags": [
          "code-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "code-scanning"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žtoolã„§name"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žtoolã„§guid"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "name": "ref",
            "in": "query",
            "description": "The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§ref",
              "$unref": "#/components/schemas/code-scanning-ref"
            }
          },
          {
            "name": "sarif_id",
            "in": "query",
            "description": "Filter analyses belonging to the same SARIF upload.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§sarifã„§id",
              "$unref": "#/components/schemas/code-scanning-analysis-sarif-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žcodeã„§scanningã„§analysisã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysis",
                    "$unref": "#/components/schemas/code-scanning-analysis"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysis",
                      "$unref": "#/components/schemas/code-scanning-analysis"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žcode_scanning_forbidden_read"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          },
          "503": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žservice_unavailable"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žcollaborators": {
      "get": {
        "summary": "List repository collaborators",
        "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\n\nTeam members will include the members of child teams.\n\nYou must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this\nendpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this\nendpoint.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-collaborators",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/collaborators/collaborators#list-repository-collaborators"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "collaborators"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "name": "affiliation",
            "description": "Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "outside",
                "direct",
                "all"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "outside",
                  "direct",
                  "all"
                ],
                "default": "all"
              }
            }
          },
          {
            "name": "permission",
            "description": "Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "pull",
                "triage",
                "push",
                "maintain",
                "admin"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "pull",
                  "triage",
                  "push",
                  "maintain",
                  "admin"
                ]
              }
            }
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žcollaboratorã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žcollaborator",
                    "$unref": "#/components/schemas/collaborator"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žcollaborator",
                      "$unref": "#/components/schemas/collaborator"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žcollaboratorsð›°Žð›°§usernameð›°¨ð›°Žpermission": {
      "get": {
        "summary": "Get repository permissions for a user",
        "description": "Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-collaborator-permission-level",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/collaborators/collaborators#get-repository-permissions-for-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "collaborators"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "responses": {
          "200": {
            "description": "if user has admin permissions",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "responseã„§ifã„§userã„§hasã„§adminã„§permissions": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrepositoryã„§collaboratorã„§permissionã„§responseã„§ifã„§userã„§hasã„§adminã„§permissions"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrepositoryã„§collaboratorã„§permission",
                  "$unref": "#/components/schemas/repository-collaborator-permission"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Ždependencyã„§graphð›°Žcompareð›°Žð›°§baseheadð›°¨": {
      "get": {
        "summary": "Get a diff of the dependencies between commits",
        "description": "Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.",
        "tags": [
          "dependency-graph"
        ],
        "operationId": "dependency-graph/diff-range",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/dependency-graph#get-a-diff-of-the-dependencies-between-commits"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "category": "dependency-graph",
          "subcategory": "dependency-review"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "name": "basehead",
            "description": "The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žmanifestã„§path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Ždiffã„§rangeã„§response"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Ždependencyã„§graphã„§diff",
                  "$unref": "#/components/schemas/dependency-graph-diff"
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žforks": {
      "post": {
        "summary": "Create a fork",
        "description": "Create a fork for the authenticated user.\n\n**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-fork",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-fork"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "forks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "schema": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "organization": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "Optional parameter to specify the organization name if forking into an organization."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žfullã„§repository"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žfullã„§repository",
                  "$unref": "#/components/schemas/full-repository"
                }
              }
            }
          },
          "400": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žbad_request"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žinstallation": {
      "get": {
        "summary": "Get a repository installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-repo-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žinstallation"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žinstallation",
                  "$unref": "#/components/schemas/installation"
                }
              }
            }
          },
          "301": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žmoved_permanently"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žkeys": {
      "get": {
        "summary": "List deploy keys",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-deploy-keys",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-deploy-keys"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "keys"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Ždeployã„§keyã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Ždeployã„§key",
                    "$unref": "#/components/schemas/deploy-key"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Ždeployã„§key",
                      "$unref": "#/components/schemas/deploy-key"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a deploy key",
        "description": "You can create a read-only deploy key.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-deploy-key",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-deploy-key"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "keys"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "title": "octocat@octomac",
                    "key": "ssh-rsa AAA...",
                    "read_only": true
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "A name for the key."
                    }
                  },
                  "key": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The contents of the key."
                    }
                  },
                  "read_only": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\""
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Ždeployã„§key"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Ždeployã„§key",
                  "$unref": "#/components/schemas/deploy-key"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/keys/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žkeysð›°Žð›°§key_idð›°¨": {
      "get": {
        "summary": "Get a deploy key",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-deploy-key",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-a-deploy-key"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "keys"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žkeyã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Ždeployã„§key"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Ždeployã„§key",
                  "$unref": "#/components/schemas/deploy-key"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žpreã„§receiveã„§hooks": {
      "get": {
        "summary": "List pre-receive hooks for a repository",
        "description": "List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.",
        "operationId": "enterprise-admin/list-pre-receive-hooks-for-repo",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "repo-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "created",
                  "updated",
                  "name"
                ],
                "default": "created"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrepositoryã„§preã„§receiveã„§hookã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žrepositoryã„§preã„§receiveã„§hook",
                    "$unref": "#/components/schemas/repository-pre-receive-hook"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žrepositoryã„§preã„§receiveã„§hook",
                      "$unref": "#/components/schemas/repository-pre-receive-hook"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žpreã„§receiveã„§hooksð›°Žð›°§pre_receive_hook_idð›°¨": {
      "get": {
        "summary": "Get a pre-receive hook for a repository",
        "description": "",
        "operationId": "enterprise-admin/get-pre-receive-hook-for-repo",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "repo-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrepositoryã„§preã„§receiveã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrepositoryã„§preã„§receiveã„§hook",
                  "$unref": "#/components/schemas/repository-pre-receive-hook"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update pre-receive hook enforcement for a repository",
        "description": "For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`",
        "operationId": "enterprise-admin/update-pre-receive-hook-enforcement-for-repo",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "repo-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "requestBody": {
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "enforcement": "enabled"
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "enforcement": {
                    "type": "enum",
                    "enum": [
                      "enabled",
                      "disabled",
                      "testing"
                    ],
                    "meta": {
                      "description": "The state of enforcement for the hook on this repository.",
                      "type": "string",
                      "enum": [
                        "enabled",
                        "disabled",
                        "testing"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrepositoryã„§preã„§receiveã„§hookã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrepositoryã„§preã„§receiveã„§hook",
                  "$unref": "#/components/schemas/repository-pre-receive-hook"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove pre-receive hook enforcement for a repository",
        "description": "Deletes any overridden enforcement on this repository for the specified hook.\n\nResponds with effective values inherited from owner and/or global level.",
        "operationId": "enterprise-admin/remove-pre-receive-hook-enforcement-for-repo",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "enterprise-admin",
          "subcategory": "repo-pre-receive-hooks"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpreã„§receiveã„§hookã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with effective values inherited from owner and/or global level.",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrepositoryã„§preã„§receiveã„§hook"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrepositoryã„§preã„§receiveã„§hook",
                  "$unref": "#/components/schemas/repository-pre-receive-hook"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žreleases": {
      "get": {
        "summary": "List releases",
        "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-releases",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-releases"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žreleaseã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žrelease",
                    "$unref": "#/components/schemas/release"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žrelease",
                      "$unref": "#/components/schemas/release"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      },
      "post": {
        "summary": "Create a release",
        "description": "Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-release",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-release"
        },
        "xã„§github": {
          "triggersNotification": true,
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "tag_name": "v1.0.0",
                    "target_commitish": "master",
                    "name": "v1.0.0",
                    "body": "Description of the release",
                    "draft": false,
                    "prerelease": false,
                    "generate_release_notes": false
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "tag_name"
                ],
                "properties": {
                  "tag_name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the tag."
                    }
                  },
                  "target_commitish": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`)."
                    }
                  },
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the release."
                    }
                  },
                  "body": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "Text describing the contents of the tag."
                    }
                  },
                  "draft": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
                      "default": false
                    }
                  },
                  "prerelease": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
                      "default": false
                    }
                  },
                  "generate_release_notes": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.",
                      "default": false
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrelease"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrelease",
                  "$unref": "#/components/schemas/release"
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žreleasesð›°Žlatest": {
      "get": {
        "summary": "Get the latest release",
        "description": "View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-latest-release",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-the-latest-release"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrelease"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrelease",
                  "$unref": "#/components/schemas/release"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žreleasesð›°Žtagsð›°Žð›°§tagð›°¨": {
      "get": {
        "summary": "Get a release by tag name",
        "description": "Get a published release with the specified tag.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-release-by-tag",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-a-release-by-tag-name"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "name": "tag",
            "description": "tag parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "xã„§multiã„§segment": true
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrelease"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrelease",
                  "$unref": "#/components/schemas/release"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žreleasesð›°Žð›°§release_idð›°¨": {
      "get": {
        "summary": "Get a release",
        "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia).",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-release",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-a-release"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žreleaseã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia).",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrelease"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrelease",
                  "$unref": "#/components/schemas/release"
                }
              }
            }
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      },
      "patch": {
        "summary": "Update a release",
        "description": "Users with push access to the repository can edit a release.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/update-release",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#update-a-release"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žreleaseã„§id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "tag_name": "v1.0.0",
                    "target_commitish": "master",
                    "name": "v1.0.0",
                    "body": "Description of the release",
                    "draft": false,
                    "prerelease": false
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "tag_name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the tag."
                    }
                  },
                  "target_commitish": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`)."
                    }
                  },
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the release."
                    }
                  },
                  "body": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "Text describing the contents of the tag."
                    }
                  },
                  "draft": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "`true` makes the release a draft, and `false` publishes the release."
                    }
                  },
                  "prerelease": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean",
                      "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žrelease"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žrelease",
                  "$unref": "#/components/schemas/release"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žreplicasð›°Žcaches": {
      "get": {
        "summary": "List repository cache replication status",
        "description": "Lists the status of each repository cache replica.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-cache-info",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-repository-cache-replication-status"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "Status information for cache replicas",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "value": [
                      {
                        "host": "host-1",
                        "location": "berlin",
                        "git": [
                          {
                            "sync_status": "in_sync"
                          },
                          {
                            "last_sync": "2022-01-10T19:33:52Z"
                          }
                        ]
                      },
                      {
                        "host": "host-2",
                        "location": "chicago",
                        "git": [
                          {
                            "sync_status": "offline"
                          },
                          {
                            "last_sync": "2022-01-10T19:34:12Z"
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "description": "Status for a cache replica",
                    "type": "object",
                    "required": [
                      "host",
                      "location",
                      "git"
                    ],
                    "properties": {
                      "host": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      },
                      "location": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      },
                      "git": {
                        "type": "object",
                        "required": [
                          "sync_status",
                          "last_sync"
                        ],
                        "properties": {
                          "sync_status": {
                            "type": "enum",
                            "enum": [
                              "offline",
                              "inactive",
                              "in_sync",
                              "not_in_sync"
                            ],
                            "meta": {
                              "type": "string",
                              "enum": [
                                "offline",
                                "inactive",
                                "in_sync",
                                "not_in_sync"
                              ]
                            }
                          },
                          "last_sync": {
                            "type": "string",
                            "meta": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "description": "Status for a cache replica",
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string"
                        },
                        "location": {
                          "type": "string"
                        },
                        "git": {
                          "type": "object",
                          "properties": {
                            "sync_status": {
                              "type": "string",
                              "enum": [
                                "offline",
                                "inactive",
                                "in_sync",
                                "not_in_sync"
                              ]
                            },
                            "last_sync": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "required": [
                            "sync_status",
                            "last_sync"
                          ]
                        }
                      },
                      "required": [
                        "host",
                        "location",
                        "git"
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          },
          "404": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_found"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žsecretã„§scanningð›°Žalerts": {
      "get": {
        "summary": "List secret scanning alerts for a repository",
        "description": "Lists secret scanning alerts for an eligible repository, from newest to oldest.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
        "tags": [
          "secret-scanning"
        ],
        "operationId": "secret-scanning/list-alerts-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "secret-scanning",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§state"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§secretã„§type"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§resolution"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsecretã„§scanningã„§alertã„§sort"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ždirection"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žsecretã„§scanningã„§alertã„§list"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alert",
                    "$unref": "#/components/schemas/secret-scanning-alert"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alert",
                      "$unref": "#/components/schemas/secret-scanning-alert"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Repository is public or secret scanning is disabled for the repository"
          },
          "503": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žservice_unavailable"
          }
        }
      }
    },
    "ð›°Žreposð›°Žð›°§ownerð›°¨ð›°Žð›°§repoð›°¨ð›°Žsecretã„§scanningð›°Žalertsð›°Žð›°§alert_numberð›°¨": {
      "get": {
        "summary": "Get a secret scanning alert",
        "description": "Gets a single secret scanning alert detected in an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
        "tags": [
          "secret-scanning"
        ],
        "operationId": "secret-scanning/get-alert",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/secret-scanning#get-a-secret-scanning-alert"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "secret-scanning",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žalertã„§number"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žsecretã„§scanningã„§alertã„§open"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alert",
                  "$unref": "#/components/schemas/secret-scanning-alert"
                }
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "404": {
            "description": "Repository is public, or secret scanning is disabled for the repository, or the resource is not found"
          },
          "503": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žservice_unavailable"
          }
        }
      },
      "patch": {
        "summary": "Update a secret scanning alert",
        "description": "Updates the status of a secret scanning alert in an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.",
        "operationId": "secret-scanning/update-alert",
        "tags": [
          "secret-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/secret-scanning#update-a-secret-scanning-alert"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "secret-scanning"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žowner"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žrepo"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žalertã„§number"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "state": "resolved",
                    "resolution": "false_positive"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "state"
                ],
                "properties": {
                  "state": {
                    "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alertã„§state",
                    "$unref": "#/components/schemas/secret-scanning-alert-state"
                  },
                  "resolution": {
                    "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alertã„§resolution",
                    "$unref": "#/components/schemas/secret-scanning-alert-resolution"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žsecretã„§scanningã„§alertã„§resolved"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alert",
                  "$unref": "#/components/schemas/secret-scanning-alert"
                }
              }
            }
          },
          "404": {
            "description": "Repository is public, or secret scanning is disabled for the repository, or the resource is not found"
          },
          "422": {
            "description": "State does not match the resolution"
          },
          "503": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žservice_unavailable"
          }
        }
      }
    },
    "ð›°Žrepositories": {
      "get": {
        "summary": "List public repositories",
        "description": "Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-public",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-public-repositories"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žsinceã„§repo"
          },
          {
            "name": "visibility",
            "description": "Specifies the types of repositories to return. This endpoint will only list repositories available to all users on the enterprise.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "enum",
              "enum": [
                "all",
                "public"
              ],
              "meta": {
                "type": "string",
                "default": "public",
                "example": "all",
                "enum": [
                  "all",
                  "public"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žpublicã„§repositoryã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žminimalã„§repository",
                    "$unref": "#/components/schemas/minimal-repository"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žminimalã„§repository",
                      "$unref": "#/components/schemas/minimal-repository"
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/repositories?since=364>; rel=\"next\"",
                "schema": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "422": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žvalidation_failed"
          }
        }
      }
    },
    "ð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°ŽGroups": {
      "get": {
        "summary": "List provisioned SCIM groups for an enterprise",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.",
        "operationId": "enterprise-admin/list-provisioned-groups-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žstartã„§index"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žcount"
          },
          {
            "name": "filter",
            "description": "filter results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          },
          {
            "name": "excludedAttributes",
            "description": "attributes to exclude",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§groupã„§list"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§groupã„§listã„§enterprise",
                  "$unref": "#/components/schemas/scim-group-list-enterprise"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Provision a SCIM enterprise group and invite users",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n\nProvision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.",
        "operationId": "enterprise-admin/provision-and-invite-enterprise-group",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#provision-a-scim-enterprise-group-and-invite-users"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "schemas": [
                      "urn:ietf:params:scim:schemas:core:2.0:Group"
                    ],
                    "displayName": "octo-org",
                    "members": [
                      {
                        "value": "92b58aaa-a1d6-11ea-8227-b9ce9e023ccc"
                      },
                      {
                        "value": "aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "schemas",
                  "displayName"
                ],
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The SCIM schema URIs.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the SCIM group. This must match the GitHub organization that the group maps to."
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "properties": {
                        "value": {
                          "type": "string",
                          "meta": {
                            "type": "string",
                            "description": "The SCIM user ID for a user."
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The SCIM user ID for a user."
                          }
                        },
                        "required": [
                          "value"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§group"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§group",
                  "$unref": "#/components/schemas/scim-enterprise-group"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°ŽGroupsð›°Žð›°§scim_group_idð›°¨": {
      "get": {
        "summary": "Get SCIM provisioning information for an enterprise group",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.",
        "operationId": "enterprise-admin/get-provisioning-information-for-enterprise-group",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§groupã„§id"
          },
          {
            "name": "excludedAttributes",
            "description": "Attributes to exclude.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§group"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§group",
                  "$unref": "#/components/schemas/scim-enterprise-group"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set SCIM information for a provisioned enterprise group",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n\nReplaces an existing provisioned groupâ€™s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.",
        "operationId": "enterprise-admin/set-information-for-provisioned-enterprise-group",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§groupã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "schemas": [
                      "urn:ietf:params:scim:schemas:core:2.0:Group"
                    ],
                    "displayName": "octo-org",
                    "members": [
                      {
                        "value": "92b58aaa-a1d6-11ea-8227-b9ce9e023ccc"
                      },
                      {
                        "value": "aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "schemas",
                  "displayName"
                ],
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The SCIM schema URIs.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The name of the SCIM group. This must match the GitHub organization that the group maps to."
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "properties": {
                        "value": {
                          "type": "string",
                          "meta": {
                            "type": "string",
                            "description": "The SCIM user ID for a user."
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The SCIM user ID for a user."
                          }
                        },
                        "required": [
                          "value"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§group"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§group",
                  "$unref": "#/components/schemas/scim-enterprise-group"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an attribute for a SCIM enterprise group",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n\nAllows you to change a provisioned groupâ€™s individual attributes. To change a groupâ€™s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).",
        "operationId": "enterprise-admin/update-attribute-for-enterprise-group",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§groupã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "schemas": [
                      "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                    ],
                    "Operations": [
                      {
                        "op": "remove",
                        "path": "members",
                        "value": [
                          {
                            "value": "aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5"
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "schemas",
                  "Operations"
                ],
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The SCIM schema URIs.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "Operations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "op"
                      ],
                      "properties": {
                        "op": {
                          "type": "enum",
                          "enum": [
                            "add",
                            "Add",
                            "remove",
                            "Remove",
                            "replace",
                            "Replace"
                          ],
                          "meta": {
                            "type": "string",
                            "enum": [
                              "add",
                              "Add",
                              "remove",
                              "Remove",
                              "replace",
                              "Replace"
                            ]
                          }
                        },
                        "path": {
                          "type": "string",
                          "meta": {
                            "type": "string"
                          }
                        },
                        "value": {
                          "description": "Can be any value - string, number, array or object."
                        }
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "type": "string",
                            "enum": [
                              "add",
                              "Add",
                              "remove",
                              "Remove",
                              "replace",
                              "Replace"
                            ]
                          },
                          "path": {
                            "type": "string"
                          },
                          "value": {
                            "description": "Can be any value - string, number, array or object."
                          }
                        },
                        "required": [
                          "op"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§groupã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§group",
                  "$unref": "#/components/schemas/scim-enterprise-group"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a SCIM group from an enterprise",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.",
        "operationId": "enterprise-admin/delete-scim-group-from-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§groupã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°ŽUsers": {
      "get": {
        "summary": "List SCIM provisioned identities for an enterprise",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n\nRetrieves a paginated list of all provisioned enterprise members, including pending invitations.\n\nWhen a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Server. This can happen in certain cases where an external identity associated with an organization will not match an organization member:\n  - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.\n  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).\n  - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.\n\nThe returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Server account after completing SSO:\n\n1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Server enterprise.\n\n1. The user attempts to access the GitHub Enterprise Server enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Server account.\n\n1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Server account:\n   - If the user signs in, their GitHub Enterprise Server account is linked to this entry.\n   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Server enterprise, and the external identity `null` entry remains in place.",
        "operationId": "enterprise-admin/list-provisioned-identities-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žstartã„§index"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žcount"
          },
          {
            "name": "filter",
            "description": "filter results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§userã„§list"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§userã„§listã„§enterprise",
                  "$unref": "#/components/schemas/scim-user-list-enterprise"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Provision and invite a SCIM enterprise user",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n\nProvision enterprise membership for a user, and send organization invitation emails to the email address.\n\nYou can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.",
        "operationId": "enterprise-admin/provision-and-invite-enterprise-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#provision-and-invite-a-scim-enterprise-user"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "schemas": [
                      "urn:ietf:params:scim:schemas:core:2.0:User"
                    ],
                    "userName": "mona.octocat@okta.example.com",
                    "name": {
                      "familyName": "Octocat",
                      "givenName": "Mona"
                    },
                    "emails": [
                      {
                        "value": "mona.octocat@okta.example.com",
                        "type": "work",
                        "primary": true
                      }
                    ],
                    "groups": [
                      {
                        "value": "468dd3fa-a1d6-11ea-9031-15a1f0d7811d"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "schemas",
                  "userName",
                  "name",
                  "emails"
                ],
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The SCIM schema URIs.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "userName": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The username for the user."
                    }
                  },
                  "name": {
                    "type": "object",
                    "required": [
                      "givenName",
                      "familyName"
                    ],
                    "properties": {
                      "givenName": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The first name of the user."
                        }
                      },
                      "familyName": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The last name of the user."
                        }
                      }
                    }
                  },
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "value",
                        "type",
                        "primary"
                      ],
                      "properties": {
                        "value": {
                          "type": "string",
                          "meta": {
                            "type": "string",
                            "description": "The email address."
                          }
                        },
                        "type": {
                          "type": "string",
                          "meta": {
                            "type": "string",
                            "description": "The type of email address."
                          }
                        },
                        "primary": {
                          "type": "boolean",
                          "meta": {
                            "type": "boolean",
                            "description": "Whether this email address is the primary address."
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "List of user emails.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The email address."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of email address."
                          },
                          "primary": {
                            "type": "boolean",
                            "description": "Whether this email address is the primary address."
                          }
                        },
                        "required": [
                          "value",
                          "type",
                          "primary"
                        ]
                      }
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "meta": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "List of SCIM group IDs the user is a member of.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§user"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§user",
                  "$unref": "#/components/schemas/scim-enterprise-user"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žð›°§enterpriseð›°¨ð›°ŽUsersð›°Žð›°§scim_user_idð›°¨": {
      "get": {
        "summary": "Get SCIM provisioning information for an enterprise user",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.",
        "operationId": "enterprise-admin/get-provisioning-information-for-enterprise-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§userã„§id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§user"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§user",
                  "$unref": "#/components/schemas/scim-enterprise-user"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set SCIM information for a provisioned enterprise user",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n\nReplaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.\n\nYou must at least provide the required values for the user: `userName`, `name`, and `emails`.\n\n**Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.",
        "operationId": "enterprise-admin/set-information-for-provisioned-enterprise-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§userã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "schemas": [
                      "urn:ietf:params:scim:schemas:core:2.0:User"
                    ],
                    "userName": "mona.octocat@okta.example.com",
                    "name": {
                      "familyName": "Octocat",
                      "givenName": "Mona"
                    },
                    "emails": [
                      {
                        "value": "mona.octocat@okta.example.com",
                        "type": "work",
                        "primary": true
                      }
                    ],
                    "groups": [
                      {
                        "value": "468dd3fa-a1d6-11ea-9031-15a1f0d7811d"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "schemas",
                  "userName",
                  "name",
                  "emails"
                ],
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The SCIM schema URIs.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "userName": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The username for the user."
                    }
                  },
                  "name": {
                    "type": "object",
                    "required": [
                      "givenName",
                      "familyName"
                    ],
                    "properties": {
                      "givenName": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The first name of the user."
                        }
                      },
                      "familyName": {
                        "type": "string",
                        "meta": {
                          "type": "string",
                          "description": "The last name of the user."
                        }
                      }
                    }
                  },
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "value",
                        "type",
                        "primary"
                      ],
                      "properties": {
                        "value": {
                          "type": "string",
                          "meta": {
                            "type": "string",
                            "description": "The email address."
                          }
                        },
                        "type": {
                          "type": "string",
                          "meta": {
                            "type": "string",
                            "description": "The type of email address."
                          }
                        },
                        "primary": {
                          "type": "boolean",
                          "meta": {
                            "type": "boolean",
                            "description": "Whether this email address is the primary address."
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "List of user emails.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The email address."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of email address."
                          },
                          "primary": {
                            "type": "boolean",
                            "description": "Whether this email address is the primary address."
                          }
                        },
                        "required": [
                          "value",
                          "type",
                          "primary"
                        ]
                      }
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "meta": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "List of SCIM group IDs the user is a member of.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§user"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§user",
                  "$unref": "#/components/schemas/scim-enterprise-user"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an attribute for a SCIM enterprise user",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n\nAllows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n\n**Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.\n\n**Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.\n\n```\n{\n  \"Operations\":[{\n    \"op\":\"replace\",\n    \"value\":{\n      \"active\":false\n    }\n  }]\n}\n```",
        "operationId": "enterprise-admin/update-attribute-for-enterprise-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§userã„§id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žjson": {
              "examples": {
                "default": {
                  "value": {
                    "schemas": [
                      "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                    ],
                    "Operations": [
                      {
                        "op": "add",
                        "path": "emails",
                        "value": [
                          {
                            "value": "monalisa@octocat.github.com",
                            "type": "home"
                          }
                        ]
                      },
                      {
                        "op": "replace",
                        "path": "name.givenName",
                        "value": "Monalisa"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "schemas",
                  "Operations"
                ],
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "The SCIM schema URIs.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "Operations": {
                    "type": "array",
                    "items": {
                      "type": "record",
                      "meta": {
                        "type": "object"
                      }
                    },
                    "meta": {
                      "type": "array",
                      "description": "Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žscimã„§enterpriseã„§userã„§2"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žscimã„§enterpriseã„§user",
                  "$unref": "#/components/schemas/scim-enterprise-user"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a SCIM user from an enterprise",
        "description": "**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.",
        "operationId": "enterprise-admin/delete-user-from-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise"
        },
        "xã„§github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "enterprise-admin",
          "subcategory": "scim"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Ženterprise"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žscimã„§userã„§id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žsetupð›°Žapið›°Žconfigcheck": {
      "get": {
        "summary": "Get the configuration status",
        "description": "This endpoint allows you to check the status of the most recent configuration process:\n\nNote that you may need to wait several seconds after you start a process before you can check its status.\n\nThe different statuses are:\n\n| Status        | Description                       |\n| ------------- | --------------------------------- |\n| `PENDING`     | The job has not started yet       |\n| `CONFIGURING` | The job is running                |\n| `DONE`        | The job has finished correctly    |\n| `FAILED`      | The job has finished unexpectedly |",
        "operationId": "enterprise-admin/get-configuration-status",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-the-configuration-status"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žconfigurationã„§status"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žconfigurationã„§status",
                  "$unref": "#/components/schemas/configuration-status"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žsetupð›°Žapið›°Žconfigure": {
      "post": {
        "summary": "Start a configuration process",
        "description": "This endpoint allows you to start a configuration process at any time for your updated settings to take effect:",
        "operationId": "enterprise-admin/start-configuration-process",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#start-a-configuration-process"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žsetupð›°Žapið›°Žmaintenance": {
      "get": {
        "summary": "Get the maintenance status",
        "description": "Check your installation's maintenance status:",
        "operationId": "enterprise-admin/get-maintenance-status",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-the-maintenance-status"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žmaintenanceã„§status"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žmaintenanceã„§status",
                  "$unref": "#/components/schemas/maintenance-status"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Enable or disable maintenance mode",
        "description": "**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).",
        "operationId": "enterprise-admin/enable-or-disable-maintenance-mode",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žxã„§wwwã„§formã„§urlencoded": {
              "examples": {
                "default": {
                  "value": {
                    "maintenance": "{\"enabled\":true, \"when\":\"now\"}"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "maintenance"
                ],
                "properties": {
                  "maintenance": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "A JSON string with the attributes `enabled` and `when`.\n\nThe possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.\n\nThe possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic)."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žmaintenanceã„§status"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žmaintenanceã„§status",
                  "$unref": "#/components/schemas/maintenance-status"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žsetupð›°Žapið›°Žsettings": {
      "get": {
        "summary": "Get settings",
        "description": "Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#set-settings).\n\n**Note:** You cannot retrieve the management console password with the Enterprise administration API.",
        "operationId": "enterprise-admin/get-settings",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Ženterpriseã„§settings"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Ženterpriseã„§settings",
                  "$unref": "#/components/schemas/enterprise-settings"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set settings",
        "description": "Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings).\n\n**Notes:**\n\n- The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).\n- You cannot set the management console password with the Enterprise administration API. Use the `ghe-set-password` utility to change the management console password. For more information, see \"[Command-line utilities](https://docs.github.com/enterprise-server@3.6/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password).\"",
        "operationId": "enterprise-admin/set-settings",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#set-settings"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žxã„§wwwã„§formã„§urlencoded": {
              "examples": {
                "204": {
                  "value": {
                    "settings": "{ \"enterprise\": { \"public_pages\": true }}"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "settings"
                ],
                "properties": {
                  "settings": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings)."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žsetupð›°Žapið›°Žsettingsð›°Žauthorizedã„§keys": {
      "get": {
        "summary": "Get all authorized SSH keys",
        "description": "",
        "operationId": "enterprise-admin/get-all-authorized-ssh-keys",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-all-authorized-ssh-keys"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žsshã„§keyã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žsshã„§key",
                    "$unref": "#/components/schemas/ssh-key"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žsshã„§key",
                      "$unref": "#/components/schemas/ssh-key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add an authorized SSH key",
        "description": "**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).",
        "operationId": "enterprise-admin/add-authorized-ssh-key",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#add-an-authorized-ssh-key"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žxã„§wwwã„§formã„§urlencoded": {
              "examples": {
                "default": {
                  "value": {
                    "authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCssTL/Vtu/ODLTj0VtZoRAbvf7uiv5997GyDq0MoAZUjb5jmA5wYe2/wF6sFuhiZTnZoF1ZtCHunPp0hM/GHrn6VySBhNncx14YO8FPt1CIhEeRMSEjUK9cY3xAbS365oXY8vnUHJsS9+1tr/2bx/+4NJfcUt/Ezf1OR/0LStQXw=="
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "authorized_key"
                ],
                "properties": {
                  "authorized_key": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The public SSH key."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žsshã„§keyã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žsshã„§key",
                    "$unref": "#/components/schemas/ssh-key"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žsshã„§key",
                      "$unref": "#/components/schemas/ssh-key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove an authorized SSH key",
        "description": "**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).",
        "operationId": "enterprise-admin/remove-authorized-ssh-key",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#remove-an-authorized-ssh-key"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žxã„§wwwã„§formã„§urlencoded": {
              "examples": {
                "default": {
                  "value": {
                    "authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCssTL/Vtu/ODLTj0VtZoRAbvf7uiv5997GyDq0MoAZUjb5jmA5wYe2/wF6sFuhiZTnZoF1ZtCHunPp0hM/GHrn6VySBhNncx14YO8FPt1CIhEeRMSEjUK9cY3xAbS365oXY8vnUHJsS9+1tr/2bx/+4NJfcUt/Ezf1OR/0LStQXw=="
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "authorized_key"
                ],
                "properties": {
                  "authorized_key": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The public SSH key."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žsshã„§keyã„§items"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemasð›°Žsshã„§key",
                    "$unref": "#/components/schemas/ssh-key"
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemasð›°Žsshã„§key",
                      "$unref": "#/components/schemas/ssh-key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žsetupð›°Žapið›°Žstart": {
      "post": {
        "summary": "Create a GitHub license",
        "description": "When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.\n\nNote that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.\n\nWhen using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:\n\n1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.\n2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.\n\n**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).",
        "operationId": "enterprise-admin/create-enterprise-server-license",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#create-a-github-enterprise-server-license"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "applicationð›°Žxã„§wwwã„§formã„§urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "license"
                ],
                "properties": {
                  "license": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The content of your _.ghl_ license file."
                    }
                  },
                  "password": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter."
                    }
                  },
                  "settings": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings)."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žsetupð›°Žapið›°Župgrade": {
      "post": {
        "summary": "Upgrade a license",
        "description": "This API upgrades your license and also triggers the configuration process.\n\n**Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).",
        "operationId": "enterprise-admin/upgrade-license",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#upgrade-a-license"
        },
        "servers": [
          {
            "url": "{protocol}://{hostname}",
            "variables": {
              "hostname": {
                "default": "HOSTNAME",
                "description": "Self-hosted Enterprise Server hostname"
              },
              "protocol": {
                "default": "http",
                "description": "Self-hosted Enterprise Server protocol"
              }
            }
          }
        ],
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "management-console"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "requestBody": {
          "content": {
            "applicationð›°Žxã„§wwwã„§formã„§urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "license": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The content of your new _.ghl_ license file."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žuserð›°Žinstallations": {
      "get": {
        "summary": "List app installations accessible to the user access token",
        "description": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/list-installations-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "installations"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žperã„§page"
          },
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žpage"
          }
        ],
        "responses": {
          "200": {
            "description": "You can find the permissions for the installation under the `permissions` key.",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žbaseã„§installationã„§forã„§authã„§userã„§paginated"
                  }
                },
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "installations"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer",
                      "meta": {
                        "type": "integer"
                      }
                    },
                    "installations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemasð›°Žinstallation",
                        "$unref": "#/components/schemas/installation"
                      },
                      "meta": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemasð›°Žinstallation",
                          "$unref": "#/components/schemas/installation"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "ê–›ð›°Žcomponentsð›°Žheadersð›°Žlink"
              }
            }
          },
          "304": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žnot_modified"
          },
          "401": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žrequires_authentication"
          },
          "403": {
            "$ref": "ê–›ð›°Žcomponentsð›°Žresponsesð›°Žforbidden"
          }
        }
      }
    },
    "ð›°Žusersð›°Žð›°§usernameð›°¨ð›°Žinstallation": {
      "get": {
        "summary": "Get a user installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the userâ€™s installation information.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-user-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/apps#get-a-user-installation-for-the-authenticated-app"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": null
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "changed"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "applicationð›°Žjson": {
                "examples": {
                  "default": {
                    "$ref": "ê–›ð›°Žcomponentsð›°Žexamplesð›°Žinstallation"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemasð›°Žinstallation",
                  "$unref": "#/components/schemas/installation"
                }
              }
            }
          }
        }
      }
    },
    "ð›°Žusersð›°Žð›°§usernameð›°¨ð›°Žsite_admin": {
      "put": {
        "summary": "Promote a user to be a site administrator",
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs).\"",
        "operationId": "enterprise-admin/promote-user-to-be-site-administrator",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      },
      "delete": {
        "summary": "Demote a site administrator",
        "description": "You can demote any user account except your own.",
        "operationId": "enterprise-admin/demote-site-administrator",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#demote-a-site-administrator"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    },
    "ð›°Žusersð›°Žð›°§usernameð›°¨ð›°Žsuspended": {
      "put": {
        "summary": "Suspend a user",
        "description": "If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.\n\nYou can suspend any user account except your own.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs).\"",
        "operationId": "enterprise-admin/suspend-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#suspend-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "requestBody": {
          "content": {
            "applicationð›°Žjson": {
              "schema": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "reason": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.6/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to \"Suspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      },
      "delete": {
        "summary": "Unsuspend a user",
        "description": "If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.",
        "operationId": "enterprise-admin/unsuspend-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#unsuspend-a-user"
        },
        "xã„§github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "xã„§octokit": {
          "diff": {
            "apiâ´°githubâ´°com": {
              "type": "added"
            }
          }
        },
        "parameters": [
          {
            "$ref": "ê–›ð›°Žcomponentsð›°Žparametersð›°Žusername"
          }
        ],
        "requestBody": {
          "content": {
            "applicationð›°Žjson": {
              "schema": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "reason": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "description": "The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.6/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to \"Unsuspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "perã„§page": {
        "name": "per_page",
        "description": "The number of results per page (max 100).",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 30
        }
      },
      "page": {
        "name": "page",
        "description": "Page number of the results to fetch.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "hookã„§id": {
        "name": "hook_id",
        "description": "The unique identifier of the hook.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "direction": {
        "name": "direction",
        "description": "The direction to sort the results by.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "desc"
        }
      },
      "keyã„§ids": {
        "name": "key_ids",
        "description": "The unique identifier of the key.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "teamã„§id": {
        "name": "team_id",
        "description": "The unique identifier of the team.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "username": {
        "name": "username",
        "description": "The handle for the GitHub user account.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "org": {
        "name": "org",
        "description": "The organization name. The name is not case sensitive.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "preã„§receiveã„§environmentã„§id": {
        "name": "pre_receive_environment_id",
        "description": "The unique identifier of the pre-receive environment.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "preã„§receiveã„§hookã„§id": {
        "name": "pre_receive_hook_id",
        "description": "The unique identifier of the pre-receive hook.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "tokenã„§id": {
        "name": "token_id",
        "description": "The unique identifier of the token.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "since": {
        "name": "since",
        "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "installationã„§id": {
        "name": "installation_id",
        "description": "The unique identifier of the installation.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "examples": {
          "default": {
            "value": 1
          }
        }
      },
      "grantã„§id": {
        "name": "grant_id",
        "description": "The unique identifier of the grant.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "clientã„§id": {
        "name": "client_id",
        "in": "path",
        "required": true,
        "description": "The client ID of the GitHub app.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "default": {
            "value": "Iv1.8a61f9b3a7aba766"
          }
        }
      },
      "oauthã„§clientã„§id": {
        "name": "client_id",
        "in": "path",
        "required": true,
        "description": "The client ID of the OAuth app.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "default": {
            "value": "abcde12345fghij67890"
          }
        }
      },
      "authorizationã„§id": {
        "name": "authorization_id",
        "description": "The unique identifier of the authorization.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "enterprise": {
        "name": "enterprise",
        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "auditã„§logã„§phrase": {
        "name": "phrase",
        "description": "A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "auditã„§logã„§include": {
        "name": "include",
        "description": "The event types to include:\n\n- `web` - returns web (non-Git) events.\n- `git` - returns Git events.\n- `all` - returns both web and Git events.\n\nThe default is `web`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "web",
            "git",
            "all"
          ]
        }
      },
      "auditã„§logã„§after": {
        "name": "after",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "auditã„§logã„§before": {
        "name": "before",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "auditã„§logã„§order": {
        "name": "order",
        "description": "The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.\n\nThe default is `desc`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "desc",
            "asc"
          ]
        }
      },
      "secretã„§scanningã„§alertã„§state": {
        "name": "state",
        "in": "query",
        "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "open",
            "resolved"
          ]
        }
      },
      "secretã„§scanningã„§alertã„§secretã„§type": {
        "name": "secret_type",
        "in": "query",
        "description": "A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "secretã„§scanningã„§alertã„§resolution": {
        "name": "resolution",
        "in": "query",
        "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "secretã„§scanningã„§alertã„§sort": {
        "name": "sort",
        "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "created",
            "updated"
          ],
          "default": "created"
        }
      },
      "paginationã„§before": {
        "name": "before",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "paginationã„§after": {
        "name": "after",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "groupã„§id": {
        "name": "group_id",
        "description": "The unique identifier of the group.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "teamã„§slug": {
        "name": "team_slug",
        "description": "The slug of the team name.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "owner": {
        "name": "owner",
        "description": "The account owner of the repository. The name is not case sensitive.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repo": {
        "name": "repo",
        "description": "The name of the repository. The name is not case sensitive.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "actor": {
        "name": "actor",
        "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "workflowã„§runã„§branch": {
        "name": "branch",
        "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "event": {
        "name": "event",
        "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "workflowã„§runã„§status": {
        "name": "status",
        "description": "Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "completed",
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "skipped",
            "stale",
            "success",
            "timed_out",
            "in_progress",
            "queued",
            "requested",
            "waiting"
          ]
        }
      },
      "created": {
        "name": "created",
        "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.6/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "excludeã„§pullã„§requests": {
        "name": "exclude_pull_requests",
        "description": "If `true` pull requests are omitted from the response (empty array).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "workflowã„§runã„§checkã„§suiteã„§id": {
        "name": "check_suite_id",
        "description": "Returns workflow runs with the `check_suite_id` that you specify.",
        "in": "query",
        "schema": {
          "type": "integer"
        }
      },
      "runã„§id": {
        "name": "run_id",
        "description": "The unique identifier of the workflow run.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "attemptã„§number": {
        "name": "attempt_number",
        "description": "The attempt number of the workflow run.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "workflowã„§id": {
        "name": "workflow_id",
        "in": "path",
        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
        "required": true,
        "schema": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "autolinkã„§id": {
        "name": "autolink_id",
        "description": "The unique identifier of the autolink.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "toolã„§name": {
        "name": "tool_name",
        "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§toolã„§name",
          "$unref": "#/components/schemas/code-scanning-analysis-tool-name"
        }
      },
      "toolã„§guid": {
        "name": "tool_guid",
        "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§toolã„§guid",
          "$unref": "#/components/schemas/code-scanning-analysis-tool-guid"
        }
      },
      "manifestã„§path": {
        "name": "name",
        "description": "The full path, relative to the repository root, of the dependency manifest file.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "keyã„§id": {
        "name": "key_id",
        "description": "The unique identifier of the key.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "releaseã„§id": {
        "name": "release_id",
        "description": "The unique identifier of the release.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "alertã„§number": {
        "name": "alert_number",
        "in": "path",
        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemasð›°Žalertã„§number",
          "$unref": "#/components/schemas/alert-number"
        }
      },
      "sinceã„§repo": {
        "name": "since",
        "description": "A repository ID. Only return repositories with an ID greater than this ID.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "startã„§index": {
        "name": "startIndex",
        "description": "Used for pagination: the index of the first result to return.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "count": {
        "name": "count",
        "description": "Used for pagination: the number of results to return.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "scimã„§groupã„§id": {
        "name": "scim_group_id",
        "description": "Identifier generated by the GitHub SCIM endpoint.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "scimã„§userã„§id": {
        "name": "scim_user_id",
        "description": "The unique identifier of the SCIM user.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "globalã„§hook": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "content_type": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "insecure_ssl": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "secret": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "ping_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          }
        }
      },
      "globalã„§hookã„§2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "content_type": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "insecure_ssl": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "ping_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          }
        }
      },
      "publicã„§keyã„§full": {
        "type": "object",
        "required": [
          "id",
          "key",
          "url",
          "title",
          "verified",
          "created_at",
          "read_only",
          "last_used",
          "user_id",
          "repository_id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "key": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "user_id": {
            "type": "integer",
            "meta": {
              "nullable": true,
              "type": "integer"
            }
          },
          "repository_id": {
            "type": "integer",
            "meta": {
              "nullable": true,
              "type": "integer"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "read_only": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "verified": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "ldapã„§mappingã„§team": {
        "type": "object",
        "properties": {
          "ldap_dn": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "slug": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "privacy": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "permission": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "members_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "repositories_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "parent": {
            "nullable": true
          }
        }
      },
      "ldapã„§mappingã„§user": {
        "title": "Ldap Private User",
        "description": "Ldap Private User",
        "type": "object",
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url",
          "bio",
          "blog",
          "company",
          "email",
          "followers",
          "following",
          "hireable",
          "location",
          "name",
          "public_gists",
          "public_repos",
          "created_at",
          "updated_at",
          "collaborators",
          "disk_usage",
          "owned_private_repos",
          "private_gists",
          "total_private_repos",
          "two_factor_authentication"
        ],
        "properties": {
          "ldap_dn": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "gravatar_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            }
          },
          "followers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            }
          },
          "following_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            }
          },
          "gists_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            }
          },
          "starred_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            }
          },
          "subscriptions_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            }
          },
          "organizations_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            }
          },
          "received_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            }
          },
          "type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "User"
            }
          },
          "site_admin": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "monalisa octocat",
              "nullable": true
            }
          },
          "company": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "GitHub",
              "nullable": true
            }
          },
          "blog": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/blog",
              "nullable": true
            }
          },
          "location": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "San Francisco",
              "nullable": true
            }
          },
          "email": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "email",
              "example": "octocat@github.com",
              "nullable": true
            }
          },
          "hireable": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "nullable": true
            }
          },
          "bio": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "There once was...",
              "nullable": true
            }
          },
          "twitter_username": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "monalisa",
              "nullable": true
            }
          },
          "public_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 2
            }
          },
          "public_gists": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "followers": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 20
            }
          },
          "following": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2008-01-14T04:33:35Z"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2008-01-14T04:33:35Z"
            }
          },
          "private_gists": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 81
            }
          },
          "total_private_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 100
            }
          },
          "owned_private_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 100
            }
          },
          "disk_usage": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 10000
            }
          },
          "collaborators": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 8
            }
          },
          "two_factor_authentication": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "plan": {
            "type": "object",
            "required": [
              "collaborators",
              "name",
              "space",
              "private_repos"
            ],
            "properties": {
              "collaborators": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "space": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "private_repos": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              }
            }
          },
          "suspended_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "business_plus": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          }
        }
      },
      "organizationã„§simple": {
        "title": "Organization Simple",
        "description": "Organization Simple",
        "type": "object",
        "required": [
          "login",
          "url",
          "id",
          "node_id",
          "repos_url",
          "events_url",
          "hooks_url",
          "issues_url",
          "members_url",
          "public_members_url",
          "avatar_url",
          "description"
        ],
        "properties": {
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEyOk9yZ2FuaXphdGlvbjE="
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/events"
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/hooks"
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/issues"
            }
          },
          "members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/members{/member}"
            }
          },
          "public_members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/public_members{/member}"
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "A great organization",
              "nullable": true
            }
          }
        }
      },
      "preã„§receiveã„§environment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "image_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "default_environment": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "hooks_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "download": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "state": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "downloaded_at": {
                "type": "string",
                "meta": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "message": {
                "type": "string",
                "meta": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "preã„§receiveã„§environmentã„§downloadã„§status": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "downloaded_at": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "message": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          }
        }
      },
      "preã„§receiveã„§hook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "enforcement": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "script": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "script_repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "full_name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "html_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          },
          "environment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "image_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "html_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "default_environment": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "created_at": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "hooks_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "download": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "state": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "downloaded_at": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "message": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "allow_downstream_configuration": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          }
        }
      },
      "authorization": {
        "title": "Authorization",
        "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
        "type": "object",
        "required": [
          "app",
          "id",
          "note",
          "note_url",
          "scopes",
          "token",
          "hashed_token",
          "token_last_eight",
          "fingerprint",
          "url",
          "created_at",
          "updated_at",
          "expires_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "description": "A list of scopes that this authorization is in.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          "token": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "token_last_eight": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "hashed_token": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "app": {
            "type": "object",
            "required": [
              "client_id",
              "name",
              "url"
            ],
            "properties": {
              "client_id": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "meta": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "note": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "note_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "nullable": true
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "fingerprint": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "user": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "installation": {
            "$ref": "#/components/schemasð›°Žnullableã„§scopedã„§installation",
            "$unref": "#/components/schemas/nullable-scoped-installation"
          },
          "expires_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        }
      },
      "simpleã„§user": {
        "title": "Simple User",
        "description": "Simple User",
        "type": "object",
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ],
        "properties": {
          "name": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "email": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "gravatar_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            }
          },
          "followers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            }
          },
          "following_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            }
          },
          "gists_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            }
          },
          "starred_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            }
          },
          "subscriptions_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            }
          },
          "organizations_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            }
          },
          "received_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            }
          },
          "type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "User"
            }
          },
          "site_admin": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "starred_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "\"2020-07-09T00:17:55Z\""
            }
          }
        }
      },
      "installation": {
        "title": "Installation",
        "description": "Installation",
        "type": "object",
        "required": [
          "id",
          "app_id",
          "app_slug",
          "target_id",
          "target_type",
          "single_file_name",
          "repository_selection",
          "access_tokens_url",
          "html_url",
          "repositories_url",
          "events",
          "account",
          "permissions",
          "created_at",
          "updated_at",
          "suspended_by",
          "suspended_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "description": "The ID of the installation.",
              "type": "integer",
              "example": 1
            }
          },
          "account": {
            "type": "anyOf",
            "anyOf": [
              {
                "$ref": "#/components/schemasð›°Žsimpleã„§user",
                "$unref": "#/components/schemas/simple-user"
              },
              {
                "$ref": "#/components/schemasð›°Ženterprise",
                "$unref": "#/components/schemas/enterprise"
              }
            ],
            "meta": {
              "nullable": true,
              "anyOf": [
                {
                  "$ref": "#/components/schemasð›°Žsimpleã„§user",
                  "$unref": "#/components/schemas/simple-user"
                },
                {
                  "$ref": "#/components/schemasð›°Ženterprise",
                  "$unref": "#/components/schemas/enterprise"
                }
              ]
            }
          },
          "repository_selection": {
            "type": "enum",
            "enum": [
              "all",
              "selected"
            ],
            "meta": {
              "description": "Describe whether all repositories have been selected or there's a selection involved",
              "type": "string",
              "enum": [
                "all",
                "selected"
              ]
            }
          },
          "access_tokens_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/installations/1/access_tokens"
            }
          },
          "repositories_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/installation/repositories"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/organizations/github/settings/installations/1"
            }
          },
          "app_id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "target_id": {
            "type": "integer",
            "meta": {
              "description": "The ID of the user or organization this token is being scoped to.",
              "type": "integer"
            }
          },
          "target_type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Organization"
            }
          },
          "permissions": {
            "$ref": "#/components/schemasð›°Žappã„§permissions",
            "$unref": "#/components/schemas/app-permissions"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "single_file_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "config.yaml",
              "nullable": true
            }
          },
          "has_multiple_single_files": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "single_file_paths": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ]
            }
          },
          "app_slug": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github-actions"
            }
          },
          "suspended_by": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "suspended_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "contact_email": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "\"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com\"",
              "nullable": true
            }
          }
        }
      },
      "appã„§permissions": {
        "title": "App Permissions",
        "type": "object",
        "description": "The permissions granted to the user-to-server access token.",
        "example": {
          "contents": "read",
          "issues": "read",
          "deployments": "write",
          "single_file": "read"
        },
        "properties": {
          "actions": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "administration": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "checks": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for checks on code.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "contents": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "deployments": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for deployments and deployment statuses.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "environments": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for managing repository environments.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "issues": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "metadata": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "packages": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "pages": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "pull_requests": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "repository_hooks": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "repository_projects": {
            "type": "enum",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
              "enum": [
                "read",
                "write",
                "admin"
              ]
            }
          },
          "secret_scanning_alerts": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "secrets": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage repository secrets.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "security_events": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "single_file": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage just a single file.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "statuses": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for commit statuses.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "vulnerability_alerts": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage Dependabot alerts.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "workflows": {
            "type": "enum",
            "enum": [
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
              "enum": [
                "write"
              ]
            }
          },
          "members": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for organization teams and members.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "organization_administration": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage access to an organization.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "organization_hooks": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "organization_plan": {
            "type": "enum",
            "enum": [
              "read"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for viewing an organization's plan.",
              "enum": [
                "read"
              ]
            }
          },
          "organization_projects": {
            "type": "enum",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage organization projects and projects beta (where available).",
              "enum": [
                "read",
                "write",
                "admin"
              ]
            }
          },
          "organization_packages": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "organization_secrets": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage organization secrets.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "organization_self_hosted_runners": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "organization_user_blocking": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "team_discussions": {
            "type": "enum",
            "enum": [
              "read",
              "write"
            ],
            "meta": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage team discussions and related comments.",
              "enum": [
                "read",
                "write"
              ]
            }
          }
        }
      },
      "installationã„§token": {
        "title": "Installation Token",
        "description": "Authentication token for a GitHub App installed on a user or org.",
        "type": "object",
        "required": [
          "token",
          "expires_at"
        ],
        "properties": {
          "token": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "expires_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "permissions": {
            "$ref": "#/components/schemasð›°Žappã„§permissions",
            "$unref": "#/components/schemas/app-permissions"
          },
          "repository_selection": {
            "type": "enum",
            "enum": [
              "all",
              "selected"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "all",
                "selected"
              ]
            }
          },
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemasð›°Žrepository",
              "$unref": "#/components/schemas/repository"
            },
            "meta": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemasð›°Žrepository",
                "$unref": "#/components/schemas/repository"
              }
            }
          },
          "single_file": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "README.md"
            }
          },
          "has_multiple_single_files": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "single_file_paths": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ]
            }
          }
        }
      },
      "applicationã„§grant": {
        "title": "Application Grant",
        "description": "The authorization associated with an OAuth Access.",
        "type": "object",
        "required": [
          "app",
          "id",
          "scopes",
          "url",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/applications/grants/1"
            }
          },
          "app": {
            "type": "object",
            "required": [
              "client_id",
              "name",
              "url"
            ],
            "properties": {
              "client_id": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "meta": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-09-06T17:26:27Z"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-09-06T20:39:23Z"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "public_repo"
              ]
            }
          },
          "user": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          }
        }
      },
      "announcement": {
        "title": "Enterprise Announcement",
        "description": "Enterprise global announcement",
        "type": "object",
        "required": [
          "announcement"
        ],
        "properties": {
          "announcement": {
            "$ref": "#/components/schemasð›°Žannouncementã„§message",
            "$unref": "#/components/schemas/announcement-message"
          },
          "expires_at": {
            "$ref": "#/components/schemasð›°Žannouncementã„§expiration",
            "$unref": "#/components/schemas/announcement-expiration"
          }
        }
      },
      "licenseã„§info": {
        "type": "object",
        "properties": {
          "seats": {
            "type": "oneOf",
            "oneOf": [
              {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              }
            ],
            "meta": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "seats_used": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "seats_available": {
            "type": "oneOf",
            "oneOf": [
              {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              }
            ],
            "meta": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "kind": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "days_until_expiration": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "expire_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          }
        }
      },
      "enterpriseã„§overview": {
        "type": "object",
        "properties": {
          "repos": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§repositoryã„§overview",
            "$unref": "#/components/schemas/enterprise-repository-overview"
          },
          "hooks": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§hookã„§overview",
            "$unref": "#/components/schemas/enterprise-hook-overview"
          },
          "pages": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§pageã„§overview",
            "$unref": "#/components/schemas/enterprise-page-overview"
          },
          "orgs": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§organizationã„§overview",
            "$unref": "#/components/schemas/enterprise-organization-overview"
          },
          "users": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§userã„§overview",
            "$unref": "#/components/schemas/enterprise-user-overview"
          },
          "pulls": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§pullã„§requestã„§overview",
            "$unref": "#/components/schemas/enterprise-pull-request-overview"
          },
          "issues": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§issueã„§overview",
            "$unref": "#/components/schemas/enterprise-issue-overview"
          },
          "milestones": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§milestoneã„§overview",
            "$unref": "#/components/schemas/enterprise-milestone-overview"
          },
          "gists": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§gistã„§overview",
            "$unref": "#/components/schemas/enterprise-gist-overview"
          },
          "comments": {
            "$ref": "#/components/schemasð›°Ženterpriseã„§commentã„§overview",
            "$unref": "#/components/schemas/enterprise-comment-overview"
          }
        }
      },
      "enterpriseã„§commentã„§overview": {
        "title": "Enterprise Comment Stats",
        "type": "object",
        "required": [
          "total_commit_comments",
          "total_gist_comments",
          "total_issue_comments",
          "total_pull_request_comments"
        ],
        "properties": {
          "total_commit_comments": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "total_gist_comments": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "total_issue_comments": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "total_pull_request_comments": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§gistã„§overview": {
        "title": "Enterprise Gist Stats",
        "type": "object",
        "required": [
          "total_gists",
          "private_gists",
          "public_gists"
        ],
        "properties": {
          "total_gists": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "private_gists": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "public_gists": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§hookã„§overview": {
        "title": "Hooks Enterprise Stats",
        "type": "object",
        "required": [
          "total_hooks",
          "active_hooks",
          "inactive_hooks"
        ],
        "properties": {
          "total_hooks": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "active_hooks": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "inactive_hooks": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§issueã„§overview": {
        "title": "Enterprise Issue Stats",
        "type": "object",
        "required": [
          "total_issues",
          "open_issues",
          "closed_issues"
        ],
        "properties": {
          "total_issues": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "open_issues": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "closed_issues": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§milestoneã„§overview": {
        "title": "Enterprise Milestone Stats",
        "type": "object",
        "required": [
          "total_milestones",
          "open_milestones",
          "closed_milestones"
        ],
        "properties": {
          "total_milestones": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "open_milestones": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "closed_milestones": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§organizationã„§overview": {
        "title": "Enterprise Organization Stats",
        "type": "object",
        "required": [
          "total_orgs",
          "disabled_orgs",
          "total_teams",
          "total_team_members"
        ],
        "properties": {
          "total_orgs": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "disabled_orgs": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "total_teams": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "total_team_members": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§pageã„§overview": {
        "title": "Enterprise Pages Stats",
        "type": "object",
        "required": [
          "total_pages"
        ],
        "properties": {
          "total_pages": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§pullã„§requestã„§overview": {
        "title": "Enterprise Pull Request Stats",
        "type": "object",
        "required": [
          "total_pulls",
          "merged_pulls",
          "mergeable_pulls",
          "unmergeable_pulls"
        ],
        "properties": {
          "total_pulls": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "merged_pulls": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "mergeable_pulls": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "unmergeable_pulls": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§repositoryã„§overview": {
        "title": "Repository Enterprise Stats",
        "type": "object",
        "required": [
          "total_repos",
          "root_repos",
          "fork_repos",
          "org_repos",
          "total_pushes",
          "total_wikis"
        ],
        "properties": {
          "total_repos": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "root_repos": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "fork_repos": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "org_repos": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "total_pushes": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "total_wikis": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "enterpriseã„§userã„§overview": {
        "title": "Enterprise User Stats",
        "type": "object",
        "required": [
          "total_users",
          "admin_users",
          "suspended_users"
        ],
        "properties": {
          "total_users": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "admin_users": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "suspended_users": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "actionsã„§cacheã„§usageã„§policyã„§enterprise": {
        "title": "Actions cache usage policy for an enterprise",
        "description": "GitHub Actions cache usage policy for an enterprise.",
        "type": "object",
        "properties": {
          "repo_cache_size_limit_in_gb": {
            "type": "integer",
            "meta": {
              "description": "For repositories in an enterprise, the default size limit for the sum of all caches in a repository, in gigabytes.",
              "type": "integer",
              "example": 10
            }
          },
          "max_repo_cache_size_limit_in_gb": {
            "type": "integer",
            "meta": {
              "description": "For repositories in an enterprise, the maximum value that can be set as the limit for the sum of all caches in a repository, in gigabytes.",
              "type": "integer",
              "example": 15
            }
          }
        }
      },
      "selectedã„§actions": {
        "type": "object",
        "required": [
          "github_owned_allowed",
          "patterns_allowed"
        ],
        "properties": {
          "github_owned_allowed": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization."
            }
          },
          "patterns_allowed": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "description": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\"",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "auditã„§logã„§event": {
        "type": "object",
        "properties": {
          "@timestamp": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time)."
            }
          },
          "action": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The name of the action that was performed, for example `user.login` or `repo.create`."
            }
          },
          "active": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "active_was": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "actor": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The actor who performed the action."
            }
          },
          "actor_id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The id of the actor who performed the action."
            }
          },
          "actor_location": {
            "type": "object",
            "properties": {
              "country_name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          },
          "data": {
            "type": "record",
            "additionalProperties": true,
            "meta": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "org_id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "blocked_user": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The username of the account being blocked."
            }
          },
          "business": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "config": {
            "type": "array",
            "items": {
              "type": "record",
              "meta": {
                "type": "object"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "config_was": {
            "type": "array",
            "items": {
              "type": "record",
              "meta": {
                "type": "object"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "content_type": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time)."
            }
          },
          "deploy_key_fingerprint": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "_document_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "A unique identifier for an audit event."
            }
          },
          "emoji": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "record",
              "meta": {
                "type": "object"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "events_were": {
            "type": "array",
            "items": {
              "type": "record",
              "meta": {
                "type": "object"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "explanation": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "fingerprint": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "hook_id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "limited_availability": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "message": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "old_user": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "openssh_public_key": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "org": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "previous_visibility": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "read_only": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "repo": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The name of the repository."
            }
          },
          "repository": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The name of the repository."
            }
          },
          "repository_public": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "target_login": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "team": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "transport_protocol": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The type of protocol (for example, HTTP or SSH) used to transfer Git data."
            }
          },
          "transport_protocol_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data."
            }
          },
          "user": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The user that was affected by the action performed (if available)."
            }
          },
          "visibility": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The repository visibility, for example `public` or `private`."
            }
          }
        }
      },
      "organizationã„§secretã„§scanningã„§alert": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemasð›°Žalertã„§number",
            "$unref": "#/components/schemas/alert-number"
          },
          "created_at": {
            "$ref": "#/components/schemasð›°Žalertã„§createdã„§at",
            "$unref": "#/components/schemas/alert-created-at"
          },
          "updated_at": {
            "$ref": "#/components/schemasð›°Žnullableã„§alertã„§updatedã„§at",
            "$unref": "#/components/schemas/nullable-alert-updated-at"
          },
          "url": {
            "$ref": "#/components/schemasð›°Žalertã„§url",
            "$unref": "#/components/schemas/alert-url"
          },
          "html_url": {
            "$ref": "#/components/schemasð›°Žalertã„§htmlã„§url",
            "$unref": "#/components/schemas/alert-html-url"
          },
          "locations_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "description": "The REST API URL of the code locations for this alert."
            }
          },
          "state": {
            "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alertã„§state",
            "$unref": "#/components/schemas/secret-scanning-alert-state"
          },
          "resolution": {
            "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alertã„§resolution",
            "$unref": "#/components/schemas/secret-scanning-alert-resolution"
          },
          "resolved_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "description": "The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
              "nullable": true
            }
          },
          "resolved_by": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "secret_type": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The type of secret that secret scanning detected."
            }
          },
          "secret_type_display_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "User-friendly name for the detected secret, matching the `secret_type`.\nFor a list of built-in patterns, see \"[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\""
            }
          },
          "secret": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The secret that was detected."
            }
          },
          "repository": {
            "$ref": "#/components/schemasð›°Žsimpleã„§repository",
            "$unref": "#/components/schemas/simple-repository"
          },
          "push_protection_bypassed": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether push protection was bypassed for the detected secret.",
              "nullable": true
            }
          },
          "push_protection_bypassed_by": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "push_protection_bypassed_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "description": "The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
              "nullable": true
            }
          }
        }
      },
      "apiã„§overview": {
        "title": "Api Overview",
        "description": "Api Overview",
        "type": "object",
        "required": [
          "verifiable_password_authentication"
        ],
        "properties": {
          "verifiable_password_authentication": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "packages": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "13.65.0.0/16",
                "157.55.204.33/32",
                "2a01:111:f403:f90c::/62"
              ]
            }
          },
          "dependabot": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "192.168.7.15/32",
                "192.168.7.16/32"
              ]
            }
          },
          "installed_version": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "3.6.0"
            }
          }
        }
      },
      "organizationã„§customã„§repositoryã„§role": {
        "title": "Organization Custom Repository Role",
        "description": "Custom repository roles created by organization administrators",
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "description": "The unique identifier of the custom role.",
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "description": "The name of the custom role.",
              "type": "string"
            }
          }
        }
      },
      "organizationã„§full": {
        "title": "Organization Full",
        "description": "Organization Full",
        "type": "object",
        "required": [
          "login",
          "url",
          "id",
          "node_id",
          "repos_url",
          "events_url",
          "hooks_url",
          "issues_url",
          "members_url",
          "public_members_url",
          "avatar_url",
          "description",
          "html_url",
          "has_organization_projects",
          "has_repository_projects",
          "public_repos",
          "public_gists",
          "followers",
          "following",
          "type",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEyOk9yZ2FuaXphdGlvbjE="
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/events"
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/hooks"
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/issues"
            }
          },
          "members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/members{/member}"
            }
          },
          "public_members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/public_members{/member}"
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "A great organization",
              "nullable": true
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github"
            }
          },
          "company": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "GitHub"
            }
          },
          "blog": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/blog"
            }
          },
          "location": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "San Francisco"
            }
          },
          "email": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "email",
              "example": "octocat@github.com"
            }
          },
          "twitter_username": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github",
              "nullable": true
            }
          },
          "is_verified": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "has_organization_projects": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "has_repository_projects": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "public_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 2
            }
          },
          "public_gists": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "followers": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 20
            }
          },
          "following": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2008-01-14T04:33:35Z"
            }
          },
          "type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Organization"
            }
          },
          "total_private_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 100
            }
          },
          "owned_private_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 100
            }
          },
          "private_gists": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 81,
              "nullable": true
            }
          },
          "disk_usage": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 10000,
              "nullable": true
            }
          },
          "collaborators": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 8,
              "nullable": true
            }
          },
          "billing_email": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "email",
              "example": "org@example.com",
              "nullable": true
            }
          },
          "plan": {
            "type": "object",
            "required": [
              "name",
              "space",
              "private_repos"
            ],
            "properties": {
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "space": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "private_repos": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "filled_seats": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "seats": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              }
            }
          },
          "default_repository_permission": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "members_can_create_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true,
              "nullable": true
            }
          },
          "two_factor_requirement_enabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true,
              "nullable": true
            }
          },
          "members_allowed_repository_creation_type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "all"
            }
          },
          "members_can_create_public_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_private_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_internal_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_public_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_private_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_fork_private_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false,
              "nullable": true
            }
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "validationã„§error": {
        "title": "Validation Error",
        "description": "Validation Error",
        "type": "object",
        "required": [
          "message",
          "documentation_url"
        ],
        "properties": {
          "message": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "documentation_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "resource": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "field": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "message": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "code": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "index": {
                  "type": "integer",
                  "meta": {
                    "type": "integer"
                  }
                },
                "value": {
                  "type": "oneOf",
                  "oneOf": [
                    {
                      "type": "string",
                      "meta": {
                        "type": "string",
                        "nullable": true
                      }
                    },
                    {
                      "type": "integer",
                      "meta": {
                        "type": "integer",
                        "nullable": true
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      },
                      "meta": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "meta": {
                    "oneOf": [
                      {
                        "type": "string",
                        "nullable": true
                      },
                      {
                        "type": "integer",
                        "nullable": true
                      },
                      {
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "string"
                        }
                      }
                    ]
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "resource": {
                    "type": "string"
                  },
                  "field": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string",
                        "nullable": true
                      },
                      {
                        "type": "integer",
                        "nullable": true
                      },
                      {
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "string"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "validationã„§errorã„§simple": {
        "title": "Validation Error Simple",
        "description": "Validation Error Simple",
        "type": "object",
        "required": [
          "message",
          "documentation_url"
        ],
        "properties": {
          "message": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "documentation_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "externalã„§group": {
        "title": "ExternalGroup",
        "description": "Information about an external group's usage and its members",
        "type": "object",
        "required": [
          "group_id",
          "group_name",
          "teams",
          "members"
        ],
        "properties": {
          "group_id": {
            "type": "integer",
            "meta": {
              "description": "The internal ID of the group",
              "example": 1,
              "type": "integer"
            }
          },
          "group_name": {
            "type": "string",
            "meta": {
              "description": "The display name for the group",
              "example": "group-azuread-test",
              "type": "string"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "description": "The date when the group was last updated_at",
              "example": "2021-01-03 22:27:15:000 -700",
              "type": "string"
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "team_id",
                "team_name"
              ],
              "properties": {
                "team_id": {
                  "type": "integer",
                  "meta": {
                    "description": "The id for a team",
                    "example": 1,
                    "type": "integer"
                  }
                },
                "team_name": {
                  "type": "string",
                  "meta": {
                    "description": "The name of the team",
                    "example": "team-test",
                    "type": "string"
                  }
                }
              }
            },
            "meta": {
              "description": "An array of teams linked to this group",
              "example": [
                {
                  "team_id": 1,
                  "team_name": "team-test"
                },
                {
                  "team_id": 2,
                  "team_name": "team-test2"
                }
              ],
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "team_id",
                  "team_name"
                ],
                "properties": {
                  "team_id": {
                    "description": "The id for a team",
                    "example": 1,
                    "type": "integer"
                  },
                  "team_name": {
                    "description": "The name of the team",
                    "example": "team-test",
                    "type": "string"
                  }
                }
              }
            }
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "member_id",
                "member_login",
                "member_name",
                "member_email"
              ],
              "properties": {
                "member_id": {
                  "type": "integer",
                  "meta": {
                    "description": "The internal user ID of the identity",
                    "example": 1,
                    "type": "integer"
                  }
                },
                "member_login": {
                  "type": "string",
                  "meta": {
                    "description": "The handle/login for the user",
                    "example": "mona-lisa_eocsaxrs",
                    "type": "string"
                  }
                },
                "member_name": {
                  "type": "string",
                  "meta": {
                    "description": "The user display name/profile name",
                    "example": "Mona Lisa",
                    "type": "string"
                  }
                },
                "member_email": {
                  "type": "string",
                  "meta": {
                    "description": "An email attached to a user",
                    "example": "mona_lisa@github.com",
                    "type": "string"
                  }
                }
              }
            },
            "meta": {
              "description": "An array of external members linked to this group",
              "example": [
                {
                  "member_id": 1,
                  "member_login": "mona-lisa_eocsaxrs",
                  "member_name": "Mona Lisa",
                  "member_email": "mona_lisa@github.com"
                },
                {
                  "member_id": 2,
                  "member_login": "octo-lisa_eocsaxrs",
                  "member_name": "Octo Lisa",
                  "member_email": "octo_lisa@github.com"
                }
              ],
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "member_id",
                  "member_login",
                  "member_name",
                  "member_email"
                ],
                "properties": {
                  "member_id": {
                    "description": "The internal user ID of the identity",
                    "example": 1,
                    "type": "integer"
                  },
                  "member_login": {
                    "description": "The handle/login for the user",
                    "example": "mona-lisa_eocsaxrs",
                    "type": "string"
                  },
                  "member_name": {
                    "description": "The user display name/profile name",
                    "example": "Mona Lisa",
                    "type": "string"
                  },
                  "member_email": {
                    "description": "An email attached to a user",
                    "example": "mona_lisa@github.com",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "externalã„§groups": {
        "title": "ExternalGroups",
        "description": "A list of external groups available to be connected to a team",
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "group_id",
                "group_name",
                "updated_at"
              ],
              "properties": {
                "group_id": {
                  "type": "integer",
                  "meta": {
                    "description": "The internal ID of the group",
                    "example": 1,
                    "type": "integer"
                  }
                },
                "group_name": {
                  "type": "string",
                  "meta": {
                    "description": "The display name of the group",
                    "example": "group-azuread-test",
                    "type": "string"
                  }
                },
                "updated_at": {
                  "type": "string",
                  "meta": {
                    "description": "The time of the last update for this group",
                    "example": "2019-06-03 22:27:15:000 -700",
                    "type": "string"
                  }
                }
              }
            },
            "meta": {
              "description": "An array of external groups available to be mapped to a team",
              "example": [
                {
                  "group_id": 1,
                  "group_name": "group-azuread-test",
                  "updated_at": "2021-01-03 22:27:15:000 -700"
                },
                {
                  "group_id": 2,
                  "group_name": "group-azuread-test2",
                  "updated_at": "2021-06-03 22:27:15:000 -700"
                }
              ],
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "group_id",
                  "group_name",
                  "updated_at"
                ],
                "properties": {
                  "group_id": {
                    "description": "The internal ID of the group",
                    "example": 1,
                    "type": "integer"
                  },
                  "group_name": {
                    "description": "The display name of the group",
                    "example": "group-azuread-test",
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The time of the last update for this group",
                    "example": "2019-06-03 22:27:15:000 -700",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "orgã„§preã„§receiveã„§hook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "enforcement": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "configuration_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "allow_downstream_configuration": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          }
        }
      },
      "teamã„§full": {
        "title": "Full Team",
        "description": "Groups of organization members that gives permissions on specified repositories.",
        "type": "object",
        "required": [
          "id",
          "node_id",
          "url",
          "members_url",
          "name",
          "description",
          "permission",
          "html_url",
          "repositories_url",
          "slug",
          "created_at",
          "updated_at",
          "members_count",
          "repos_count",
          "organization"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "description": "Unique identifier of the team",
              "example": 42,
              "type": "integer"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDQ6VGVhbTE="
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "description": "URL for the team",
              "example": "https://api.github.com/organizations/1/team/1",
              "type": "string",
              "format": "uri"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/orgs/rails/teams/core"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "description": "Name of the team",
              "example": "Developers",
              "type": "string"
            }
          },
          "slug": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "justice-league"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "A great team.",
              "nullable": true
            }
          },
          "privacy": {
            "type": "enum",
            "enum": [
              "closed",
              "secret"
            ],
            "meta": {
              "description": "The level of privacy this team should have",
              "type": "string",
              "enum": [
                "closed",
                "secret"
              ],
              "example": "closed"
            }
          },
          "permission": {
            "type": "string",
            "meta": {
              "description": "Permission that the team will have for its repositories",
              "example": "push",
              "type": "string"
            }
          },
          "members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/organizations/1/team/1/members{/member}"
            }
          },
          "repositories_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/organizations/1/team/1/repos"
            }
          },
          "parent": {
            "$ref": "#/components/schemasð›°Žnullableã„§teamã„§simple",
            "$unref": "#/components/schemas/nullable-team-simple"
          },
          "members_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 3
            }
          },
          "repos_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 10
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2017-07-14T16:53:42Z"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2017-08-17T12:37:15Z"
            }
          },
          "organization": {
            "$ref": "#/components/schemasð›°Žteamã„§organization",
            "$unref": "#/components/schemas/team-organization"
          },
          "ldap_dn": {
            "type": "string",
            "meta": {
              "description": "Distinguished Name (DN) that team maps to within LDAP environment",
              "example": "uid=example,ou=users,dc=github,dc=com",
              "type": "string"
            }
          }
        }
      },
      "rateã„§limitã„§overview": {
        "title": "Rate Limit Overview",
        "description": "Rate Limit Overview",
        "type": "object",
        "required": [
          "rate",
          "resources"
        ],
        "properties": {
          "resources": {
            "type": "object",
            "required": [
              "core",
              "search"
            ],
            "properties": {
              "core": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              },
              "graphql": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              },
              "search": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              },
              "source_import": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              },
              "integration_manifest": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              },
              "code_scanning_upload": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              },
              "actions_runner_registration": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              },
              "scim": {
                "$ref": "#/components/schemasð›°Žrateã„§limit",
                "$unref": "#/components/schemas/rate-limit"
              }
            }
          },
          "rate": {
            "$ref": "#/components/schemasð›°Žrateã„§limit",
            "$unref": "#/components/schemas/rate-limit"
          }
        }
      },
      "actionsã„§cacheã„§usageã„§policyã„§forã„§repository": {
        "title": "Actions cache usage policy for repository",
        "description": "GitHub Actions cache usage policy for repository.",
        "type": "object",
        "required": [
          "repo_cache_size_limit_in_gb"
        ],
        "properties": {
          "repo_cache_size_limit_in_gb": {
            "type": "integer",
            "meta": {
              "description": "The size limit for the sum of all caches, in gigabytes.",
              "type": "integer",
              "example": 14
            }
          }
        }
      },
      "workflowã„§run": {
        "title": "Workflow Run",
        "description": "An invocation of a workflow",
        "type": "object",
        "required": [
          "id",
          "node_id",
          "head_branch",
          "run_number",
          "display_title",
          "event",
          "status",
          "conclusion",
          "head_sha",
          "path",
          "workflow_id",
          "url",
          "html_url",
          "created_at",
          "updated_at",
          "head_commit",
          "head_repository",
          "repository",
          "jobs_url",
          "logs_url",
          "check_suite_url",
          "cancel_url",
          "rerun_url",
          "artifacts_url",
          "workflow_url",
          "pull_requests"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The ID of the workflow run.",
              "example": 5
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The name of the workflow run.",
              "nullable": true,
              "example": "Build"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEwOkNoZWNrU3VpdGU1"
            }
          },
          "check_suite_id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The ID of the associated check suite.",
              "example": 42
            }
          },
          "check_suite_node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The node ID of the associated check suite.",
              "example": "MDEwOkNoZWNrU3VpdGU0Mg=="
            }
          },
          "head_branch": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "example": "master"
            }
          },
          "head_sha": {
            "type": "string",
            "meta": {
              "description": "The SHA of the head commit that points to the version of the workflow being run.",
              "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
              "type": "string"
            }
          },
          "path": {
            "type": "string",
            "meta": {
              "description": "The full path of the workflow",
              "example": "octocat/octo-repo/.github/workflows/ci.yml@main",
              "type": "string"
            }
          },
          "run_number": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The auto incrementing run number for the workflow run.",
              "example": 106
            }
          },
          "run_attempt": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.",
              "example": 1
            }
          },
          "referenced_workflows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemasð›°Žreferencedã„§workflow",
              "$unref": "#/components/schemas/referenced-workflow"
            },
            "meta": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemasð›°Žreferencedã„§workflow",
                "$unref": "#/components/schemas/referenced-workflow"
              }
            }
          },
          "event": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "push"
            }
          },
          "status": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "example": "completed"
            }
          },
          "conclusion": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "example": "neutral"
            }
          },
          "workflow_id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The ID of the parent workflow.",
              "example": 5
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The URL to the workflow run.",
              "example": "https://api.github.com/repos/github/hello-world/actions/runs/5"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/github/hello-world/suites/4"
            }
          },
          "pull_requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemasð›°Žpullã„§requestã„§minimal",
              "$unref": "#/components/schemas/pull-request-minimal"
            },
            "meta": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemasð›°Žpullã„§requestã„§minimal",
                "$unref": "#/components/schemas/pull-request-minimal"
              }
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "actor": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "triggering_actor": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "run_started_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "description": "The start time of the latest run. Resets on re-run."
            }
          },
          "jobs_url": {
            "type": "string",
            "meta": {
              "description": "The URL to the jobs for the workflow run.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
            }
          },
          "logs_url": {
            "type": "string",
            "meta": {
              "description": "The URL to download the logs for the workflow run.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
            }
          },
          "check_suite_url": {
            "type": "string",
            "meta": {
              "description": "The URL to the associated check suite.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/check-suites/12"
            }
          },
          "artifacts_url": {
            "type": "string",
            "meta": {
              "description": "The URL to the artifacts for the workflow run.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
            }
          },
          "cancel_url": {
            "type": "string",
            "meta": {
              "description": "The URL to cancel the workflow run.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
            }
          },
          "rerun_url": {
            "type": "string",
            "meta": {
              "description": "The URL to rerun the workflow run.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
            }
          },
          "previous_attempt_url": {
            "type": "string",
            "meta": {
              "nullable": true,
              "description": "The URL to the previous attempted run of this workflow, if one exists.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3"
            }
          },
          "workflow_url": {
            "type": "string",
            "meta": {
              "description": "The URL to the workflow.",
              "type": "string",
              "example": "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
            }
          },
          "head_commit": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§commit",
            "$unref": "#/components/schemas/nullable-simple-commit"
          },
          "repository": {
            "$ref": "#/components/schemasð›°Žminimalã„§repository",
            "$unref": "#/components/schemas/minimal-repository"
          },
          "head_repository": {
            "$ref": "#/components/schemasð›°Žminimalã„§repository",
            "$unref": "#/components/schemas/minimal-repository"
          },
          "head_repository_id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 5
            }
          }
        }
      },
      "autolink": {
        "title": "Autolink reference",
        "description": "An autolink reference.",
        "type": "object",
        "required": [
          "id",
          "key_prefix",
          "url_template"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 3
            }
          },
          "key_prefix": {
            "type": "string",
            "meta": {
              "description": "The prefix of a key that is linkified.",
              "example": "TICKET-",
              "type": "string"
            }
          },
          "url_template": {
            "type": "string",
            "meta": {
              "description": "A template for the target URL that is generated if a key was found.",
              "example": "https://example.com/TICKET?query=<num>",
              "type": "string"
            }
          }
        }
      },
      "codeã„§scanningã„§ref": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`."
        }
      },
      "codeã„§scanningã„§analysisã„§sarifã„§id": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "An identifier for the upload.",
          "example": "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
        }
      },
      "codeã„§scanningã„§analysis": {
        "type": "object",
        "required": [
          "ref",
          "commit_sha",
          "analysis_key",
          "environment",
          "error",
          "created_at",
          "results_count",
          "rules_count",
          "id",
          "url",
          "sarif_id",
          "tool",
          "deletable",
          "warning"
        ],
        "properties": {
          "ref": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§ref",
            "$unref": "#/components/schemas/code-scanning-ref"
          },
          "commit_sha": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§commitã„§sha",
            "$unref": "#/components/schemas/code-scanning-analysis-commit-sha"
          },
          "analysis_key": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§analysisã„§key",
            "$unref": "#/components/schemas/code-scanning-analysis-analysis-key"
          },
          "environment": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§environment",
            "$unref": "#/components/schemas/code-scanning-analysis-environment"
          },
          "category": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§category",
            "$unref": "#/components/schemas/code-scanning-analysis-category"
          },
          "error": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "error reading field xyz"
            }
          },
          "created_at": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§createdã„§at",
            "$unref": "#/components/schemas/code-scanning-analysis-created-at"
          },
          "results_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The total number of results in the analysis."
            }
          },
          "rules_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "The total number of rules used in the analysis."
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "description": "Unique identifier for this analysis."
            }
          },
          "url": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§url",
            "$unref": "#/components/schemas/code-scanning-analysis-url"
          },
          "sarif_id": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§sarifã„§id",
            "$unref": "#/components/schemas/code-scanning-analysis-sarif-id"
          },
          "tool": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§tool",
            "$unref": "#/components/schemas/code-scanning-analysis-tool"
          },
          "deletable": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "warning": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "Warning generated when processing the analysis",
              "example": "123 results were ignored"
            }
          }
        }
      },
      "collaborator": {
        "title": "Collaborator",
        "description": "Collaborator",
        "type": "object",
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ],
        "properties": {
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "email": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "gravatar_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            }
          },
          "followers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            }
          },
          "following_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            }
          },
          "gists_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            }
          },
          "starred_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            }
          },
          "subscriptions_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            }
          },
          "organizations_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            }
          },
          "received_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            }
          },
          "type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "User"
            }
          },
          "site_admin": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "permissions": {
            "type": "object",
            "required": [
              "pull",
              "push",
              "admin"
            ],
            "properties": {
              "pull": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "triage": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "push": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "maintain": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "admin": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              }
            }
          },
          "role_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "admin"
            }
          }
        }
      },
      "repositoryã„§collaboratorã„§permission": {
        "title": "Repository Collaborator Permission",
        "description": "Repository Collaborator Permission",
        "type": "object",
        "required": [
          "permission",
          "role_name",
          "user"
        ],
        "properties": {
          "permission": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "role_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "admin"
            }
          },
          "user": {
            "$ref": "#/components/schemasð›°Žnullableã„§collaborator",
            "$unref": "#/components/schemas/nullable-collaborator"
          }
        }
      },
      "dependencyã„§graphã„§diff": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "change_type",
            "manifest",
            "ecosystem",
            "name",
            "version",
            "package_url",
            "license",
            "source_repository_url",
            "vulnerabilities"
          ],
          "properties": {
            "change_type": {
              "type": "enum",
              "enum": [
                "added",
                "removed"
              ],
              "meta": {
                "type": "string",
                "enum": [
                  "added",
                  "removed"
                ]
              }
            },
            "manifest": {
              "type": "string",
              "meta": {
                "type": "string",
                "example": "path/to/package-lock.json"
              }
            },
            "ecosystem": {
              "type": "string",
              "meta": {
                "type": "string",
                "example": "npm"
              }
            },
            "name": {
              "type": "string",
              "meta": {
                "type": "string",
                "example": "@actions/core"
              }
            },
            "version": {
              "type": "string",
              "meta": {
                "type": "string",
                "example": "1.0.0"
              }
            },
            "package_url": {
              "type": "string",
              "meta": {
                "type": "string",
                "nullable": true,
                "example": "pkg:/npm/%40actions/core@1.1.0"
              }
            },
            "license": {
              "type": "string",
              "meta": {
                "type": "string",
                "nullable": true,
                "example": "MIT"
              }
            },
            "source_repository_url": {
              "type": "string",
              "meta": {
                "type": "string",
                "nullable": true,
                "example": "https://github.com/github/actions"
              }
            },
            "vulnerabilities": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "severity",
                  "advisory_ghsa_id",
                  "advisory_summary",
                  "advisory_url"
                ],
                "properties": {
                  "severity": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "example": "critical"
                    }
                  },
                  "advisory_ghsa_id": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "example": "GHSA-rf4j-j272-fj86"
                    }
                  },
                  "advisory_summary": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "example": "A summary of the advisory."
                    }
                  },
                  "advisory_url": {
                    "type": "string",
                    "meta": {
                      "type": "string",
                      "example": "https://github.com/advisories/GHSA-rf4j-j272-fj86"
                    }
                  }
                }
              },
              "meta": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "severity": {
                      "type": "string",
                      "example": "critical"
                    },
                    "advisory_ghsa_id": {
                      "type": "string",
                      "example": "GHSA-rf4j-j272-fj86"
                    },
                    "advisory_summary": {
                      "type": "string",
                      "example": "A summary of the advisory."
                    },
                    "advisory_url": {
                      "type": "string",
                      "example": "https://github.com/advisories/GHSA-rf4j-j272-fj86"
                    }
                  },
                  "required": [
                    "severity",
                    "advisory_ghsa_id",
                    "advisory_summary",
                    "advisory_url"
                  ]
                }
              }
            }
          }
        },
        "meta": {
          "title": "Dependency Graph Diff",
          "description": "A diff of the dependencies between two commits.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "change_type": {
                "type": "string",
                "enum": [
                  "added",
                  "removed"
                ]
              },
              "manifest": {
                "type": "string",
                "example": "path/to/package-lock.json"
              },
              "ecosystem": {
                "type": "string",
                "example": "npm"
              },
              "name": {
                "type": "string",
                "example": "@actions/core"
              },
              "version": {
                "type": "string",
                "example": "1.0.0"
              },
              "package_url": {
                "type": "string",
                "nullable": true,
                "example": "pkg:/npm/%40actions/core@1.1.0"
              },
              "license": {
                "type": "string",
                "nullable": true,
                "example": "MIT"
              },
              "source_repository_url": {
                "type": "string",
                "nullable": true,
                "example": "https://github.com/github/actions"
              },
              "vulnerabilities": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "severity": {
                      "type": "string",
                      "example": "critical"
                    },
                    "advisory_ghsa_id": {
                      "type": "string",
                      "example": "GHSA-rf4j-j272-fj86"
                    },
                    "advisory_summary": {
                      "type": "string",
                      "example": "A summary of the advisory."
                    },
                    "advisory_url": {
                      "type": "string",
                      "example": "https://github.com/advisories/GHSA-rf4j-j272-fj86"
                    }
                  },
                  "required": [
                    "severity",
                    "advisory_ghsa_id",
                    "advisory_summary",
                    "advisory_url"
                  ]
                }
              }
            },
            "required": [
              "change_type",
              "manifest",
              "ecosystem",
              "name",
              "version",
              "package_url",
              "license",
              "source_repository_url",
              "vulnerabilities"
            ]
          }
        }
      },
      "fullã„§repository": {
        "title": "Full Repository",
        "description": "Full Repository",
        "type": "object",
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url",
          "clone_url",
          "default_branch",
          "forks",
          "forks_count",
          "git_url",
          "has_downloads",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "homepage",
          "language",
          "archived",
          "disabled",
          "mirror_url",
          "open_issues",
          "open_issues_count",
          "license",
          "pushed_at",
          "size",
          "ssh_url",
          "stargazers_count",
          "svn_url",
          "watchers",
          "watchers_count",
          "created_at",
          "updated_at",
          "network_count",
          "subscribers_count"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1296269
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Hello-World"
            }
          },
          "full_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat/Hello-World"
            }
          },
          "owner": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat/Hello-World"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "This your first repo!",
              "nullable": true
            }
          },
          "fork": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World"
            }
          },
          "archive_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
            }
          },
          "assignees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
            }
          },
          "blobs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
            }
          },
          "branches_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
            }
          },
          "collaborators_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
            }
          },
          "comments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
            }
          },
          "commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
            }
          },
          "compare_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
            }
          },
          "contents_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
            }
          },
          "contributors_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
            }
          },
          "deployments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
            }
          },
          "downloads_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/events"
            }
          },
          "forks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/forks"
            }
          },
          "git_commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
            }
          },
          "git_refs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
            }
          },
          "git_tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
            }
          },
          "git_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "git:github.com/octocat/Hello-World.git"
            }
          },
          "issue_comment_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
            }
          },
          "issue_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
            }
          },
          "keys_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
            }
          },
          "labels_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
            }
          },
          "languages_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/languages"
            }
          },
          "merges_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/merges"
            }
          },
          "milestones_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
            }
          },
          "notifications_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
            }
          },
          "pulls_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
            }
          },
          "releases_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
            }
          },
          "ssh_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "git@github.com:octocat/Hello-World.git"
            }
          },
          "stargazers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
            }
          },
          "statuses_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
            }
          },
          "subscribers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
            }
          },
          "subscription_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
            }
          },
          "tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/tags"
            }
          },
          "teams_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/teams"
            }
          },
          "trees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            }
          },
          "clone_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/octocat/Hello-World.git"
            }
          },
          "mirror_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "git:git.example.com/octocat/Hello-World",
              "nullable": true
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
            }
          },
          "svn_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://svn.github.com/octocat/Hello-World"
            }
          },
          "homepage": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com",
              "nullable": true
            }
          },
          "language": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "forks_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 9
            }
          },
          "stargazers_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 80
            }
          },
          "watchers_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 80
            }
          },
          "size": {
            "type": "integer",
            "meta": {
              "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
              "type": "integer",
              "example": 108
            }
          },
          "default_branch": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "master"
            }
          },
          "open_issues_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "is_template": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "octocat",
                "atom",
                "electron",
                "API"
              ]
            }
          },
          "has_issues": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "has_projects": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "has_wiki": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "has_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "has_downloads": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "archived": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "disabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Returns whether or not this repository disabled."
            }
          },
          "visibility": {
            "type": "string",
            "meta": {
              "description": "The repository visibility: public, private, or internal.",
              "type": "string",
              "example": "public"
            }
          },
          "pushed_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:06:43Z"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:01:12Z"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:14:43Z"
            }
          },
          "permissions": {
            "type": "object",
            "required": [
              "admin",
              "pull",
              "push"
            ],
            "properties": {
              "admin": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "maintain": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "push": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "triage": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "pull": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              }
            }
          },
          "allow_rebase_merge": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "template_repository": {
            "$ref": "#/components/schemasð›°Žnullableã„§repository",
            "$unref": "#/components/schemas/nullable-repository"
          },
          "temp_clone_token": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "allow_squash_merge": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "allow_auto_merge": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false
            }
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false
            }
          },
          "allow_merge_commit": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "allow_update_branch": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "use_squash_pr_title_as_default": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false
            }
          },
          "squash_merge_commit_title": {
            "type": "enum",
            "enum": [
              "PR_TITLE",
              "COMMIT_OR_PR_TITLE"
            ],
            "meta": {
              "type": "string",
              "example": "PR_TITLE",
              "enum": [
                "PR_TITLE",
                "COMMIT_OR_PR_TITLE"
              ],
              "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
            }
          },
          "squash_merge_commit_message": {
            "type": "enum",
            "enum": [
              "PR_BODY",
              "COMMIT_MESSAGES",
              "BLANK"
            ],
            "meta": {
              "type": "string",
              "example": "PR_BODY",
              "enum": [
                "PR_BODY",
                "COMMIT_MESSAGES",
                "BLANK"
              ],
              "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
            }
          },
          "merge_commit_title": {
            "type": "enum",
            "enum": [
              "PR_TITLE",
              "MERGE_MESSAGE"
            ],
            "meta": {
              "type": "string",
              "example": "PR_TITLE",
              "enum": [
                "PR_TITLE",
                "MERGE_MESSAGE"
              ],
              "description": "The default value for a merge commit title.\n\n  - `PR_TITLE` - default to the pull request's title.\n  - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
            }
          },
          "merge_commit_message": {
            "type": "enum",
            "enum": [
              "PR_BODY",
              "PR_TITLE",
              "BLANK"
            ],
            "meta": {
              "type": "string",
              "example": "PR_BODY",
              "enum": [
                "PR_BODY",
                "PR_TITLE",
                "BLANK"
              ],
              "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
            }
          },
          "allow_forking": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false
            }
          },
          "subscribers_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 42
            }
          },
          "network_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "license": {
            "$ref": "#/components/schemasð›°Žnullableã„§licenseã„§simple",
            "$unref": "#/components/schemas/nullable-license-simple"
          },
          "organization": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "parent": {
            "$ref": "#/components/schemasð›°Žrepository",
            "$unref": "#/components/schemas/repository"
          },
          "source": {
            "$ref": "#/components/schemasð›°Žrepository",
            "$unref": "#/components/schemas/repository"
          },
          "forks": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "master_branch": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "open_issues": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "watchers": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "anonymous_access_enabled": {
            "type": "boolean",
            "meta": {
              "description": "Whether anonymous git access is allowed.",
              "default": true,
              "type": "boolean"
            }
          },
          "code_of_conduct": {
            "$ref": "#/components/schemasð›°Žcodeã„§ofã„§conductã„§simple",
            "$unref": "#/components/schemas/code-of-conduct-simple"
          },
          "security_and_analysis": {
            "$ref": "#/components/schemasð›°Žsecurityã„§andã„§analysis",
            "$unref": "#/components/schemas/security-and-analysis"
          }
        }
      },
      "deployã„§key": {
        "title": "Deploy Key",
        "description": "An SSH key granting access to a single repository.",
        "type": "object",
        "required": [
          "id",
          "key",
          "url",
          "title",
          "verified",
          "created_at",
          "read_only"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "key": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "verified": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "read_only": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          }
        }
      },
      "repositoryã„§preã„§receiveã„§hook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "enforcement": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "configuration_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          }
        }
      },
      "release": {
        "title": "Release",
        "description": "A release.",
        "type": "object",
        "required": [
          "assets_url",
          "upload_url",
          "tarball_url",
          "zipball_url",
          "created_at",
          "published_at",
          "draft",
          "id",
          "node_id",
          "author",
          "html_url",
          "name",
          "prerelease",
          "tag_name",
          "target_commitish",
          "assets",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          },
          "assets_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          },
          "upload_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "tarball_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "nullable": true
            }
          },
          "zipball_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "nullable": true
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "tag_name": {
            "type": "string",
            "meta": {
              "description": "The name of the tag.",
              "example": "v1.0.0",
              "type": "string"
            }
          },
          "target_commitish": {
            "type": "string",
            "meta": {
              "description": "Specifies the commitish value that determines where the Git tag is created from.",
              "example": "master",
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "body": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "draft": {
            "type": "boolean",
            "meta": {
              "description": "true to create a draft (unpublished) release, false to create a published one.",
              "example": false,
              "type": "boolean"
            }
          },
          "prerelease": {
            "type": "boolean",
            "meta": {
              "description": "Whether to identify the release as a prerelease or a full release.",
              "example": false,
              "type": "boolean"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "published_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "author": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemasð›°Žreleaseã„§asset",
              "$unref": "#/components/schemas/release-asset"
            },
            "meta": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemasð›°Žreleaseã„§asset",
                "$unref": "#/components/schemas/release-asset"
              }
            }
          },
          "body_html": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "body_text": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "mentions_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "reactions": {
            "$ref": "#/components/schemasð›°Žreactionã„§rollup",
            "$unref": "#/components/schemas/reaction-rollup"
          }
        }
      },
      "secretã„§scanningã„§alert": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemasð›°Žalertã„§number",
            "$unref": "#/components/schemas/alert-number"
          },
          "created_at": {
            "$ref": "#/components/schemasð›°Žalertã„§createdã„§at",
            "$unref": "#/components/schemas/alert-created-at"
          },
          "updated_at": {
            "$ref": "#/components/schemasð›°Žalertã„§updatedã„§at",
            "$unref": "#/components/schemas/alert-updated-at"
          },
          "url": {
            "$ref": "#/components/schemasð›°Žalertã„§url",
            "$unref": "#/components/schemas/alert-url"
          },
          "html_url": {
            "$ref": "#/components/schemasð›°Žalertã„§htmlã„§url",
            "$unref": "#/components/schemas/alert-html-url"
          },
          "locations_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "description": "The REST API URL of the code locations for this alert."
            }
          },
          "state": {
            "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alertã„§state",
            "$unref": "#/components/schemas/secret-scanning-alert-state"
          },
          "resolution": {
            "$ref": "#/components/schemasð›°Žsecretã„§scanningã„§alertã„§resolution",
            "$unref": "#/components/schemas/secret-scanning-alert-resolution"
          },
          "resolved_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "description": "The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
              "nullable": true
            }
          },
          "resolved_by": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "secret_type": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The type of secret that secret scanning detected."
            }
          },
          "secret_type_display_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "User-friendly name for the detected secret, matching the `secret_type`.\nFor a list of built-in patterns, see \"[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\""
            }
          },
          "secret": {
            "type": "string",
            "meta": {
              "type": "string",
              "description": "The secret that was detected."
            }
          },
          "push_protection_bypassed": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether push protection was bypassed for the detected secret.",
              "nullable": true
            }
          },
          "push_protection_bypassed_by": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "push_protection_bypassed_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "description": "The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
              "nullable": true
            }
          }
        }
      },
      "secretã„§scanningã„§alertã„§state": {
        "type": "enum",
        "enum": [
          "open",
          "resolved"
        ],
        "meta": {
          "description": "Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
          "type": "string",
          "enum": [
            "open",
            "resolved"
          ]
        }
      },
      "secretã„§scanningã„§alertã„§resolution": {
        "type": "enum",
        "enum": [
          null,
          "false_positive",
          "wont_fix",
          "revoked",
          "used_in_tests"
        ],
        "meta": {
          "type": "string",
          "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert.",
          "nullable": true,
          "enum": [
            null,
            "false_positive",
            "wont_fix",
            "revoked",
            "used_in_tests"
          ]
        }
      },
      "minimalã„§repository": {
        "title": "Minimal Repository",
        "description": "Minimal Repository",
        "type": "object",
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1296269
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Hello-World"
            }
          },
          "full_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat/Hello-World"
            }
          },
          "owner": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat/Hello-World"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "This your first repo!",
              "nullable": true
            }
          },
          "fork": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World"
            }
          },
          "archive_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
            }
          },
          "assignees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
            }
          },
          "blobs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
            }
          },
          "branches_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
            }
          },
          "collaborators_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
            }
          },
          "comments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
            }
          },
          "commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
            }
          },
          "compare_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
            }
          },
          "contents_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
            }
          },
          "contributors_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
            }
          },
          "deployments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
            }
          },
          "downloads_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/events"
            }
          },
          "forks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/forks"
            }
          },
          "git_commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
            }
          },
          "git_refs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
            }
          },
          "git_tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
            }
          },
          "git_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "issue_comment_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
            }
          },
          "issue_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
            }
          },
          "keys_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
            }
          },
          "labels_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
            }
          },
          "languages_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/languages"
            }
          },
          "merges_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/merges"
            }
          },
          "milestones_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
            }
          },
          "notifications_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
            }
          },
          "pulls_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
            }
          },
          "releases_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
            }
          },
          "ssh_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "stargazers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
            }
          },
          "statuses_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
            }
          },
          "subscribers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
            }
          },
          "subscription_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
            }
          },
          "tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/tags"
            }
          },
          "teams_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/teams"
            }
          },
          "trees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            }
          },
          "clone_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "mirror_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
            }
          },
          "svn_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "homepage": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "language": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "forks_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "stargazers_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "watchers_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "size": {
            "type": "integer",
            "meta": {
              "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
              "type": "integer"
            }
          },
          "default_branch": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "open_issues_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "is_template": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "has_issues": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "has_projects": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "has_wiki": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "has_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "has_downloads": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "archived": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "disabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "visibility": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "pushed_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:06:43Z",
              "nullable": true
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:01:12Z",
              "nullable": true
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:14:43Z",
              "nullable": true
            }
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "maintain": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "push": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "triage": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "pull": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              }
            }
          },
          "role_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "admin"
            }
          },
          "template_repository": {
            "$ref": "#/components/schemasð›°Žnullableã„§repository",
            "$unref": "#/components/schemas/nullable-repository"
          },
          "temp_clone_token": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "subscribers_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "network_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "code_of_conduct": {
            "$ref": "#/components/schemasð›°Žcodeã„§ofã„§conduct",
            "$unref": "#/components/schemas/code-of-conduct"
          },
          "license": {
            "type": "object",
            "nullable": true,
            "properties": {
              "key": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "spdx_id": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "node_id": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          },
          "forks": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "open_issues": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "watchers": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "allow_forking": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false
            }
          }
        }
      },
      "scimã„§groupã„§listã„§enterprise": {
        "type": "object",
        "required": [
          "schemas",
          "totalResults",
          "itemsPerPage",
          "startIndex",
          "Resources"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "totalResults": {
            "type": "number",
            "meta": {
              "type": "number"
            }
          },
          "itemsPerPage": {
            "type": "number",
            "meta": {
              "type": "number"
            }
          },
          "startIndex": {
            "type": "number",
            "meta": {
              "type": "number"
            }
          },
          "Resources": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "schemas",
                "id"
              ],
              "properties": {
                "schemas": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "externalId": {
                  "type": "string",
                  "meta": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "displayName": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "members": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      },
                      "$ref": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      },
                      "display": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "$ref": {
                          "type": "string"
                        },
                        "display": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "resourceType": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "created": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "location": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "type": "string"
                  },
                  "externalId": {
                    "type": "string",
                    "nullable": true
                  },
                  "displayName": {
                    "type": "string"
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "$ref": {
                          "type": "string"
                        },
                        "display": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "resourceType": {
                        "type": "string"
                      },
                      "created": {
                        "type": "string"
                      },
                      "lastModified": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "schemas",
                  "id"
                ]
              }
            }
          }
        }
      },
      "scimã„§enterpriseã„§group": {
        "type": "object",
        "required": [
          "schemas",
          "id"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "externalId": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "displayName": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "$ref": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "display": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "$ref": {
                    "type": "string"
                  },
                  "display": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "created": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "lastModified": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "location": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "scimã„§userã„§listã„§enterprise": {
        "type": "object",
        "required": [
          "schemas",
          "totalResults",
          "itemsPerPage",
          "startIndex",
          "Resources"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "totalResults": {
            "type": "number",
            "meta": {
              "type": "number"
            }
          },
          "itemsPerPage": {
            "type": "number",
            "meta": {
              "type": "number"
            }
          },
          "startIndex": {
            "type": "number",
            "meta": {
              "type": "number"
            }
          },
          "Resources": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "schemas",
                "id"
              ],
              "properties": {
                "schemas": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "externalId": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "userName": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "givenName": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "familyName": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    }
                  }
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      },
                      "primary": {
                        "type": "boolean",
                        "meta": {
                          "type": "boolean"
                        }
                      },
                      "type": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "primary": {
                          "type": "boolean"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "active": {
                  "type": "boolean",
                  "meta": {
                    "type": "boolean"
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "resourceType": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "created": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    },
                    "location": {
                      "type": "string",
                      "meta": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "schemas": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "type": "string"
                  },
                  "externalId": {
                    "type": "string"
                  },
                  "userName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "givenName": {
                        "type": "string"
                      },
                      "familyName": {
                        "type": "string"
                      }
                    }
                  },
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "primary": {
                          "type": "boolean"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "resourceType": {
                        "type": "string"
                      },
                      "created": {
                        "type": "string"
                      },
                      "lastModified": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "schemas",
                  "id"
                ]
              }
            }
          }
        }
      },
      "scimã„§enterpriseã„§user": {
        "type": "object",
        "required": [
          "schemas",
          "id"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "externalId": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "userName": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "name": {
            "type": "object",
            "properties": {
              "givenName": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "familyName": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "type": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "primary": {
                  "type": "boolean",
                  "meta": {
                    "type": "boolean"
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "primary": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "active": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "created": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "lastModified": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "location": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "configurationã„§status": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "progress": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "status",
                "key"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "key": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  }
                },
                "required": [
                  "status",
                  "key"
                ]
              }
            }
          }
        }
      },
      "maintenanceã„§status": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "scheduled_time": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "connection_services": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "number"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "number": {
                  "type": "integer",
                  "meta": {
                    "type": "integer"
                  }
                }
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "number": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "number"
                ]
              }
            }
          }
        }
      },
      "enterpriseã„§settings": {
        "type": "object",
        "properties": {
          "enterprise": {
            "type": "object",
            "properties": {
              "private_mode": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "public_pages": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "subdomain_isolation": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "signup_enabled": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "github_hostname": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "identicons_host": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "http_proxy": {
                "type": "string",
                "meta": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "auth_mode": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "expire_sessions": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "admin_password": {
                "type": "string",
                "meta": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "configuration_id": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "configuration_run_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "avatar": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "uri": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "customer": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "email": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "uuid": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "secret_key_data": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "public_key_data": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "license": {
                "type": "object",
                "properties": {
                  "seats": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "evaluation": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "perpetual": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "unlimited_seating": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "support_key": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "ssh_allowed": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "cluster_support": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "expire_at": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "github_ssl": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "cert": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "key": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  }
                }
              },
              "ldap": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "port": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "base": {
                    "type": "array",
                    "items": {},
                    "meta": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "uid": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "bind_dn": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "password": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "method": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "search_strategy": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "user_groups": {
                    "type": "array",
                    "items": {},
                    "meta": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "admin_group": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "virtual_attribute_enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "recursive_group_search": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "posix_support": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "user_sync_emails": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "user_sync_keys": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "user_sync_interval": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "team_sync_interval": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "sync_enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "reconciliation": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "string",
                        "meta": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "org": {
                        "type": "string",
                        "meta": {
                          "nullable": true,
                          "type": "string"
                        }
                      }
                    }
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string",
                        "meta": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "meta": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "mail": {
                        "type": "string",
                        "meta": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "key": {
                        "type": "string",
                        "meta": {
                          "nullable": true,
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "cas": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  }
                }
              },
              "saml": {
                "type": "object",
                "properties": {
                  "sso_url": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "certificate": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "certificate_path": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "issuer": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "idp_initiated_sso": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "disable_admin_demote": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "github_oauth": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "client_secret": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "organization_name": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "organization_team": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "smtp": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "address": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "authentication": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "port": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "domain": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "username": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "user_name": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "enable_starttls_auto": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "password": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "discardã„§toã„§noreplyã„§address": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "support_address": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "support_address_type": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "noreply_address": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "ntp": {
                "type": "object",
                "properties": {
                  "primary_server": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "secondary_server": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "timezone": {
                "type": "string",
                "meta": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "snmp": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "community": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "syslog": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "server": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "protocol_name": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              },
              "assets": {
                "type": "string",
                "meta": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "pages": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "collectd": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "server": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "port": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "encryption": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "username": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "password": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  }
                }
              },
              "mapping": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "tileserver": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "basemap": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "token": {
                    "type": "string",
                    "meta": {
                      "nullable": true,
                      "type": "string"
                    }
                  }
                }
              },
              "load_balancer": {
                "type": "string",
                "meta": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "run_list": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "sshã„§key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "prettyã„§print": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          }
        }
      },
      "nullableã„§simpleã„§user": {
        "title": "Simple User",
        "description": "Simple User",
        "type": "object",
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ],
        "nullable": true,
        "properties": {
          "name": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "email": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "gravatar_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            }
          },
          "followers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            }
          },
          "following_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            }
          },
          "gists_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            }
          },
          "starred_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            }
          },
          "subscriptions_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            }
          },
          "organizations_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            }
          },
          "received_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            }
          },
          "type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "User"
            }
          },
          "site_admin": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "starred_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "\"2020-07-09T00:17:55Z\""
            }
          }
        }
      },
      "nullableã„§scopedã„§installation": {
        "title": "Scoped Installation",
        "type": "object",
        "required": [
          "permissions",
          "repository_selection",
          "single_file_name",
          "repositories_url",
          "account"
        ],
        "nullable": true,
        "properties": {
          "permissions": {
            "$ref": "#/components/schemasð›°Žappã„§permissions",
            "$unref": "#/components/schemas/app-permissions"
          },
          "repository_selection": {
            "type": "enum",
            "enum": [
              "all",
              "selected"
            ],
            "meta": {
              "description": "Describe whether all repositories have been selected or there's a selection involved",
              "type": "string",
              "enum": [
                "all",
                "selected"
              ]
            }
          },
          "single_file_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "config.yaml",
              "nullable": true
            }
          },
          "has_multiple_single_files": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "single_file_paths": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ]
            }
          },
          "repositories_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            }
          },
          "account": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          }
        }
      },
      "enterprise": {
        "title": "Enterprise",
        "description": "An enterprise account",
        "type": "object",
        "required": [
          "id",
          "node_id",
          "name",
          "slug",
          "html_url",
          "created_at",
          "updated_at",
          "avatar_url"
        ],
        "properties": {
          "description": {
            "type": "string",
            "meta": {
              "description": "A short description of the enterprise.",
              "type": "string",
              "nullable": true
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/enterprises/octo-business"
            }
          },
          "website_url": {
            "type": "string",
            "meta": {
              "description": "The enterprise's website URL.",
              "type": "string",
              "nullable": true,
              "format": "uri"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "description": "Unique identifier of the enterprise",
              "example": 42,
              "type": "integer"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "description": "The name of the enterprise.",
              "type": "string",
              "example": "Octo Business"
            }
          },
          "slug": {
            "type": "string",
            "meta": {
              "description": "The slug url identifier for the enterprise.",
              "type": "string",
              "example": "octo-business"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "format": "date-time",
              "example": "2019-01-26T19:01:12Z"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "format": "date-time",
              "example": "2019-01-26T19:14:43Z"
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      },
      "basicã„§error": {
        "title": "Basic Error",
        "description": "Basic Error",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "documentation_url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          }
        }
      },
      "repository": {
        "title": "Repository",
        "description": "A git repository",
        "type": "object",
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url",
          "clone_url",
          "default_branch",
          "forks",
          "forks_count",
          "git_url",
          "has_downloads",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "homepage",
          "language",
          "archived",
          "disabled",
          "mirror_url",
          "open_issues",
          "open_issues_count",
          "license",
          "pushed_at",
          "size",
          "ssh_url",
          "stargazers_count",
          "svn_url",
          "watchers",
          "watchers_count",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "description": "Unique identifier of the repository",
              "example": 42,
              "type": "integer"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "description": "The name of the repository.",
              "type": "string",
              "example": "Team Environment"
            }
          },
          "full_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat/Hello-World"
            }
          },
          "license": {
            "$ref": "#/components/schemasð›°Žnullableã„§licenseã„§simple",
            "$unref": "#/components/schemas/nullable-license-simple"
          },
          "organization": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "forks": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "permissions": {
            "type": "object",
            "required": [
              "admin",
              "pull",
              "push"
            ],
            "properties": {
              "admin": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "pull": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "triage": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "push": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "maintain": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              }
            }
          },
          "owner": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean",
            "meta": {
              "description": "Whether the repository is private or public.",
              "default": false,
              "type": "boolean"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat/Hello-World"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "This your first repo!",
              "nullable": true
            }
          },
          "fork": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World"
            }
          },
          "archive_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
            }
          },
          "assignees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
            }
          },
          "blobs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
            }
          },
          "branches_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
            }
          },
          "collaborators_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
            }
          },
          "comments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
            }
          },
          "commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
            }
          },
          "compare_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
            }
          },
          "contents_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
            }
          },
          "contributors_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
            }
          },
          "deployments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
            }
          },
          "downloads_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/events"
            }
          },
          "forks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/forks"
            }
          },
          "git_commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
            }
          },
          "git_refs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
            }
          },
          "git_tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
            }
          },
          "git_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "git:github.com/octocat/Hello-World.git"
            }
          },
          "issue_comment_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
            }
          },
          "issue_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
            }
          },
          "keys_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
            }
          },
          "labels_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
            }
          },
          "languages_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/languages"
            }
          },
          "merges_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/merges"
            }
          },
          "milestones_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
            }
          },
          "notifications_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
            }
          },
          "pulls_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
            }
          },
          "releases_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
            }
          },
          "ssh_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "git@github.com:octocat/Hello-World.git"
            }
          },
          "stargazers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
            }
          },
          "statuses_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
            }
          },
          "subscribers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
            }
          },
          "subscription_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
            }
          },
          "tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/tags"
            }
          },
          "teams_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/teams"
            }
          },
          "trees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            }
          },
          "clone_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/octocat/Hello-World.git"
            }
          },
          "mirror_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "git:git.example.com/octocat/Hello-World",
              "nullable": true
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
            }
          },
          "svn_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://svn.github.com/octocat/Hello-World"
            }
          },
          "homepage": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com",
              "nullable": true
            }
          },
          "language": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "forks_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 9
            }
          },
          "stargazers_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 80
            }
          },
          "watchers_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 80
            }
          },
          "size": {
            "type": "integer",
            "meta": {
              "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
              "type": "integer",
              "example": 108
            }
          },
          "default_branch": {
            "type": "string",
            "meta": {
              "description": "The default branch of the repository.",
              "type": "string",
              "example": "master"
            }
          },
          "open_issues_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "is_template": {
            "type": "boolean",
            "meta": {
              "description": "Whether this repository acts as a template that can be used to generate new repositories.",
              "default": false,
              "type": "boolean",
              "example": true
            }
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "has_issues": {
            "type": "boolean",
            "meta": {
              "description": "Whether issues are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "has_projects": {
            "type": "boolean",
            "meta": {
              "description": "Whether projects are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "has_wiki": {
            "type": "boolean",
            "meta": {
              "description": "Whether the wiki is enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "has_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "has_downloads": {
            "type": "boolean",
            "meta": {
              "description": "Whether downloads are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "archived": {
            "type": "boolean",
            "meta": {
              "description": "Whether the repository is archived.",
              "default": false,
              "type": "boolean"
            }
          },
          "disabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Returns whether or not this repository disabled."
            }
          },
          "visibility": {
            "type": "string",
            "meta": {
              "description": "The repository visibility: public, private, or internal.",
              "default": "public",
              "type": "string"
            }
          },
          "pushed_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:06:43Z",
              "nullable": true
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:01:12Z",
              "nullable": true
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:14:43Z",
              "nullable": true
            }
          },
          "allow_rebase_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow rebase merges for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "template_repository": {
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "node_id": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "full_name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "node_id": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "avatar_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "gravatar_id": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "html_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "followers_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "following_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "gists_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "starred_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "subscriptions_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "organizations_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "repos_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "events_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "received_events_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "site_admin": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "private": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "html_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "description": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "fork": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "archive_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "assignees_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "blobs_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "branches_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "collaborators_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "comments_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "commits_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "compare_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "contents_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "contributors_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "deployments_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "downloads_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "events_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "forks_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_commits_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_refs_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_tags_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "issue_comment_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "issue_events_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "issues_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "keys_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "labels_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "languages_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "merges_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "milestones_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "notifications_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "pulls_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "releases_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "ssh_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "stargazers_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "statuses_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "subscribers_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "subscription_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "tags_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "teams_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "trees_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "clone_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "mirror_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "hooks_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "svn_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "homepage": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "language": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "forks_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "stargazers_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "watchers_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "size": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "default_branch": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "open_issues_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "is_template": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "meta": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "has_issues": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_projects": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_wiki": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_pages": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_downloads": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "archived": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "disabled": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "visibility": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "pushed_at": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "maintain": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "push": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "triage": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "pull": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "temp_clone_token": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "allow_squash_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "allow_auto_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "delete_branch_on_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "allow_update_branch": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "use_squash_pr_title_as_default": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "squash_merge_commit_title": {
                "type": "enum",
                "enum": [
                  "PR_TITLE",
                  "COMMIT_OR_PR_TITLE"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_TITLE",
                    "COMMIT_OR_PR_TITLE"
                  ],
                  "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                }
              },
              "squash_merge_commit_message": {
                "type": "enum",
                "enum": [
                  "PR_BODY",
                  "COMMIT_MESSAGES",
                  "BLANK"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_BODY",
                    "COMMIT_MESSAGES",
                    "BLANK"
                  ],
                  "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                }
              },
              "merge_commit_title": {
                "type": "enum",
                "enum": [
                  "PR_TITLE",
                  "MERGE_MESSAGE"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_TITLE",
                    "MERGE_MESSAGE"
                  ],
                  "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                }
              },
              "merge_commit_message": {
                "type": "enum",
                "enum": [
                  "PR_BODY",
                  "PR_TITLE",
                  "BLANK"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_BODY",
                    "PR_TITLE",
                    "BLANK"
                  ],
                  "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                }
              },
              "allow_merge_commit": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "subscribers_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "network_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              }
            }
          },
          "temp_clone_token": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "allow_squash_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow squash merges for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "allow_auto_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow Auto-merge to be used on pull requests.",
              "default": false,
              "type": "boolean",
              "example": false
            }
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to delete head branches when pull requests are merged",
              "default": false,
              "type": "boolean",
              "example": false
            }
          },
          "allow_update_branch": {
            "type": "boolean",
            "meta": {
              "description": "Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
              "default": false,
              "type": "boolean",
              "example": false
            }
          },
          "use_squash_pr_title_as_default": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
              "default": false,
              "deprecated": true
            }
          },
          "squash_merge_commit_title": {
            "type": "enum",
            "enum": [
              "PR_TITLE",
              "COMMIT_OR_PR_TITLE"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "COMMIT_OR_PR_TITLE"
              ],
              "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
            }
          },
          "squash_merge_commit_message": {
            "type": "enum",
            "enum": [
              "PR_BODY",
              "COMMIT_MESSAGES",
              "BLANK"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "COMMIT_MESSAGES",
                "BLANK"
              ],
              "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
            }
          },
          "merge_commit_title": {
            "type": "enum",
            "enum": [
              "PR_TITLE",
              "MERGE_MESSAGE"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "MERGE_MESSAGE"
              ],
              "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
            }
          },
          "merge_commit_message": {
            "type": "enum",
            "enum": [
              "PR_BODY",
              "PR_TITLE",
              "BLANK"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "PR_TITLE",
                "BLANK"
              ],
              "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
            }
          },
          "allow_merge_commit": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow merge commits for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "allow_forking": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow forking this repo",
              "type": "boolean"
            }
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "meta": {
              "description": "Whether to require contributors to sign off on web-based commits",
              "default": false,
              "type": "boolean"
            }
          },
          "subscribers_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "network_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "open_issues": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "watchers": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "master_branch": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "starred_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "\"2020-07-09T00:17:42Z\""
            }
          },
          "anonymous_access_enabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether anonymous git access is enabled for this repository"
            }
          }
        }
      },
      "nullableã„§licenseã„§simple": {
        "title": "License Simple",
        "description": "License Simple",
        "type": "object",
        "required": [
          "key",
          "name",
          "url",
          "spdx_id",
          "node_id"
        ],
        "nullable": true,
        "properties": {
          "key": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "mit"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MIT License"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "format": "uri",
              "example": "https://api.github.com/licenses/mit"
            }
          },
          "spdx_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "example": "MIT"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDc6TGljZW5zZW1pdA=="
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      },
      "announcementã„§message": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.6/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"",
          "example": "Very **important** announcement about _nothing_."
        }
      },
      "announcementã„§expiration": {
        "type": "string",
        "meta": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
          "example": "\"2021-01-01T00:00:00.000-07:00\"",
          "nullable": true
        }
      },
      "alertã„§number": {
        "type": "integer",
        "meta": {
          "type": "integer",
          "description": "The security alert number.",
          "readOnly": true
        }
      },
      "alertã„§createdã„§at": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "format": "date-time",
          "readOnly": true
        }
      },
      "nullableã„§alertã„§updatedã„§at": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "format": "date-time",
          "readOnly": true,
          "nullable": true
        }
      },
      "alertã„§url": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The REST API URL of the alert resource.",
          "format": "uri",
          "readOnly": true
        }
      },
      "alertã„§htmlã„§url": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The GitHub URL of the alert resource.",
          "format": "uri",
          "readOnly": true
        }
      },
      "simpleã„§repository": {
        "title": "Simple Repository",
        "description": "Simple Repository",
        "type": "object",
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1296269,
              "description": "A unique identifier of the repository."
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "description": "The GraphQL identifier of the repository."
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Hello-World",
              "description": "The name of the repository."
            }
          },
          "full_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat/Hello-World",
              "description": "The full, globally unique, name of the repository."
            }
          },
          "owner": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether the repository is private."
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat/Hello-World",
              "description": "The URL to view the repository on GitHub.com."
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "This your first repo!",
              "nullable": true,
              "description": "The repository description."
            }
          },
          "fork": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether the repository is a fork."
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World",
              "description": "The URL to get more information about the repository from the GitHub API."
            }
          },
          "archive_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "description": "A template for the API URL to download the repository as an archive."
            }
          },
          "assignees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "description": "A template for the API URL to list the available assignees for issues in the repository."
            }
          },
          "blobs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "description": "A template for the API URL to create or retrieve a raw Git blob in the repository."
            }
          },
          "branches_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "description": "A template for the API URL to get information about branches in the repository."
            }
          },
          "collaborators_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "description": "A template for the API URL to get information about collaborators of the repository."
            }
          },
          "comments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "description": "A template for the API URL to get information about comments on the repository."
            }
          },
          "commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "description": "A template for the API URL to get information about commits on the repository."
            }
          },
          "compare_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "description": "A template for the API URL to compare two commits or refs."
            }
          },
          "contents_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "description": "A template for the API URL to get the contents of the repository."
            }
          },
          "contributors_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "description": "A template for the API URL to list the contributors to the repository."
            }
          },
          "deployments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "The API URL to list the deployments of the repository."
            }
          },
          "downloads_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "description": "The API URL to list the downloads on the repository."
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/events",
              "description": "The API URL to list the events of the repository."
            }
          },
          "forks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/forks",
              "description": "The API URL to list the forks of the repository."
            }
          },
          "git_commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "description": "A template for the API URL to get information about Git commits of the repository."
            }
          },
          "git_refs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "description": "A template for the API URL to get information about Git refs of the repository."
            }
          },
          "git_tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "description": "A template for the API URL to get information about Git tags of the repository."
            }
          },
          "issue_comment_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "description": "A template for the API URL to get information about issue comments on the repository."
            }
          },
          "issue_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "description": "A template for the API URL to get information about issue events on the repository."
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "description": "A template for the API URL to get information about issues on the repository."
            }
          },
          "keys_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "description": "A template for the API URL to get information about deploy keys on the repository."
            }
          },
          "labels_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "description": "A template for the API URL to get information about labels of the repository."
            }
          },
          "languages_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/languages",
              "description": "The API URL to get information about the languages of the repository."
            }
          },
          "merges_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/merges",
              "description": "The API URL to merge branches in the repository."
            }
          },
          "milestones_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "description": "A template for the API URL to get information about milestones of the repository."
            }
          },
          "notifications_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "description": "A template for the API URL to get information about notifications on the repository."
            }
          },
          "pulls_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "description": "A template for the API URL to get information about pull requests on the repository."
            }
          },
          "releases_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "description": "A template for the API URL to get information about releases on the repository."
            }
          },
          "stargazers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "description": "The API URL to list the stargazers on the repository."
            }
          },
          "statuses_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "description": "A template for the API URL to get information about statuses of a commit."
            }
          },
          "subscribers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "description": "The API URL to list the subscribers on the repository."
            }
          },
          "subscription_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "description": "The API URL to subscribe to notifications for this repository."
            }
          },
          "tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/tags",
              "description": "The API URL to get information about tags on the repository."
            }
          },
          "teams_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/teams",
              "description": "The API URL to list the teams on the repository."
            }
          },
          "trees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "description": "A template for the API URL to create or retrieve a raw Git tree of the repository."
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "description": "The API URL to list the hooks on the repository."
            }
          }
        }
      },
      "nullableã„§teamã„§simple": {
        "title": "Team Simple",
        "description": "Groups of organization members that gives permissions on specified repositories.",
        "type": "object",
        "required": [
          "id",
          "node_id",
          "url",
          "members_url",
          "name",
          "description",
          "permission",
          "html_url",
          "repositories_url",
          "slug"
        ],
        "nullable": true,
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "description": "Unique identifier of the team",
              "type": "integer",
              "example": 1
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDQ6VGVhbTE="
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "description": "URL for the team",
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/organizations/1/team/1"
            }
          },
          "members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/organizations/1/team/1/members{/member}"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "description": "Name of the team",
              "type": "string",
              "example": "Justice League"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "description": "Description of the team",
              "type": "string",
              "nullable": true,
              "example": "A great team."
            }
          },
          "permission": {
            "type": "string",
            "meta": {
              "description": "Permission that the team will have for its repositories",
              "type": "string",
              "example": "admin"
            }
          },
          "privacy": {
            "type": "string",
            "meta": {
              "description": "The level of privacy this team should have",
              "type": "string",
              "example": "closed"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/orgs/rails/teams/core"
            }
          },
          "repositories_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/organizations/1/team/1/repos"
            }
          },
          "slug": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "justice-league"
            }
          },
          "ldap_dn": {
            "type": "string",
            "meta": {
              "description": "Distinguished Name (DN) that team maps to within LDAP environment",
              "example": "uid=example,ou=users,dc=github,dc=com",
              "type": "string"
            }
          }
        }
      },
      "teamã„§organization": {
        "title": "Team Organization",
        "description": "Team Organization",
        "type": "object",
        "required": [
          "login",
          "url",
          "id",
          "node_id",
          "repos_url",
          "events_url",
          "hooks_url",
          "issues_url",
          "members_url",
          "public_members_url",
          "avatar_url",
          "description",
          "html_url",
          "has_organization_projects",
          "has_repository_projects",
          "public_repos",
          "public_gists",
          "followers",
          "following",
          "type",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEyOk9yZ2FuaXphdGlvbjE="
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/events"
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/hooks"
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/issues"
            }
          },
          "members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/members{/member}"
            }
          },
          "public_members_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/public_members{/member}"
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "A great organization",
              "nullable": true
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github"
            }
          },
          "company": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "GitHub"
            }
          },
          "blog": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/blog"
            }
          },
          "location": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "San Francisco"
            }
          },
          "email": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "email",
              "example": "octocat@github.com"
            }
          },
          "twitter_username": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "github",
              "nullable": true
            }
          },
          "is_verified": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "has_organization_projects": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "has_repository_projects": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "public_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 2
            }
          },
          "public_gists": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "followers": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 20
            }
          },
          "following": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2008-01-14T04:33:35Z"
            }
          },
          "type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Organization"
            }
          },
          "total_private_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 100
            }
          },
          "owned_private_repos": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 100
            }
          },
          "private_gists": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 81,
              "nullable": true
            }
          },
          "disk_usage": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 10000,
              "nullable": true
            }
          },
          "collaborators": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 8,
              "nullable": true
            }
          },
          "billing_email": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "email",
              "example": "org@example.com",
              "nullable": true
            }
          },
          "plan": {
            "type": "object",
            "required": [
              "name",
              "space",
              "private_repos"
            ],
            "properties": {
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "space": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "private_repos": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "filled_seats": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "seats": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              }
            }
          },
          "default_repository_permission": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "members_can_create_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true,
              "nullable": true
            }
          },
          "two_factor_requirement_enabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true,
              "nullable": true
            }
          },
          "members_allowed_repository_creation_type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "all"
            }
          },
          "members_can_create_public_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_private_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_internal_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_public_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_create_private_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": true
            }
          },
          "members_can_fork_private_repositories": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false,
              "nullable": true
            }
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "example": false
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "rateã„§limit": {
        "title": "Rate Limit",
        "type": "object",
        "required": [
          "limit",
          "remaining",
          "reset",
          "used"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "remaining": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "reset": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "used": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "referencedã„§workflow": {
        "title": "Referenced workflow",
        "description": "A workflow referenced/reused by the initial caller workflow",
        "type": "object",
        "required": [
          "path",
          "sha"
        ],
        "properties": {
          "path": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "sha": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "ref": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          }
        }
      },
      "pullã„§requestã„§minimal": {
        "title": "Pull Request Minimal",
        "type": "object",
        "required": [
          "id",
          "number",
          "url",
          "head",
          "base"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "number": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "head": {
            "type": "object",
            "required": [
              "ref",
              "sha",
              "repo"
            ],
            "properties": {
              "ref": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "sha": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "repo": {
                "type": "object",
                "required": [
                  "id",
                  "url",
                  "name"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "base": {
            "type": "object",
            "required": [
              "ref",
              "sha",
              "repo"
            ],
            "properties": {
              "ref": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "sha": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "repo": {
                "type": "object",
                "required": [
                  "id",
                  "url",
                  "name"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "nullableã„§simpleã„§commit": {
        "title": "Simple Commit",
        "description": "Simple Commit",
        "type": "object",
        "required": [
          "id",
          "tree_id",
          "message",
          "timestamp",
          "author",
          "committer"
        ],
        "nullable": true,
        "properties": {
          "id": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "tree_id": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "message": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "timestamp": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "author": {
            "type": "object",
            "required": [
              "name",
              "email"
            ],
            "nullable": true,
            "properties": {
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "email": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          },
          "committer": {
            "type": "object",
            "required": [
              "name",
              "email"
            ],
            "nullable": true,
            "properties": {
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "email": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "codeã„§scanningã„§analysisã„§toolã„§name": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The name of the tool used to generate the code scanning analysis."
        }
      },
      "codeã„§scanningã„§analysisã„§toolã„§guid": {
        "type": "string",
        "meta": {
          "nullable": true,
          "type": "string",
          "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data."
        }
      },
      "codeã„§scanningã„§analysisã„§commitã„§sha": {
        "type": "string",
        "meta": {
          "description": "The SHA of the commit to which the analysis you are uploading relates.",
          "type": "string",
          "minLength": 40,
          "maxLength": 40,
          "pattern": "^[0-9a-fA-F]+$"
        }
      },
      "codeã„§scanningã„§analysisã„§analysisã„§key": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
        }
      },
      "codeã„§scanningã„§analysisã„§environment": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "Identifies the variable values associated with the environment in which this analysis was performed."
        }
      },
      "codeã„§scanningã„§analysisã„§category": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code."
        }
      },
      "codeã„§scanningã„§analysisã„§createdã„§at": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "format": "date-time",
          "readOnly": true
        }
      },
      "codeã„§scanningã„§analysisã„§url": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The REST API URL of the analysis resource.",
          "format": "uri",
          "readOnly": true
        }
      },
      "codeã„§scanningã„§analysisã„§tool": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§toolã„§name",
            "$unref": "#/components/schemas/code-scanning-analysis-tool-name"
          },
          "version": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§toolã„§version",
            "$unref": "#/components/schemas/code-scanning-analysis-tool-version"
          },
          "guid": {
            "$ref": "#/components/schemasð›°Žcodeã„§scanningã„§analysisã„§toolã„§guid",
            "$unref": "#/components/schemas/code-scanning-analysis-tool-guid"
          }
        }
      },
      "codeã„§scanningã„§analysisã„§toolã„§version": {
        "type": "string",
        "meta": {
          "nullable": true,
          "type": "string",
          "description": "The version of the tool used to generate the code scanning analysis."
        }
      },
      "nullableã„§collaborator": {
        "title": "Collaborator",
        "description": "Collaborator",
        "type": "object",
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ],
        "nullable": true,
        "properties": {
          "login": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 1
            }
          },
          "email": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "nullable": true,
              "type": "string"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            }
          },
          "avatar_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            }
          },
          "gravatar_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            }
          },
          "followers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            }
          },
          "following_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            }
          },
          "gists_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            }
          },
          "starred_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            }
          },
          "subscriptions_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            }
          },
          "organizations_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            }
          },
          "repos_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            }
          },
          "received_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            }
          },
          "type": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "User"
            }
          },
          "site_admin": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "permissions": {
            "type": "object",
            "required": [
              "pull",
              "push",
              "admin"
            ],
            "properties": {
              "pull": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "triage": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "push": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "maintain": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "admin": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              }
            }
          },
          "role_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "admin"
            }
          }
        }
      },
      "nullableã„§repository": {
        "title": "Repository",
        "description": "A git repository",
        "type": "object",
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url",
          "clone_url",
          "default_branch",
          "forks",
          "forks_count",
          "git_url",
          "has_downloads",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "homepage",
          "language",
          "archived",
          "disabled",
          "mirror_url",
          "open_issues",
          "open_issues_count",
          "license",
          "pushed_at",
          "size",
          "ssh_url",
          "stargazers_count",
          "svn_url",
          "watchers",
          "watchers_count",
          "created_at",
          "updated_at"
        ],
        "nullable": true,
        "properties": {
          "id": {
            "type": "integer",
            "meta": {
              "description": "Unique identifier of the repository",
              "example": 42,
              "type": "integer"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "description": "The name of the repository.",
              "type": "string",
              "example": "Team Environment"
            }
          },
          "full_name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "octocat/Hello-World"
            }
          },
          "license": {
            "$ref": "#/components/schemasð›°Žnullableã„§licenseã„§simple",
            "$unref": "#/components/schemas/nullable-license-simple"
          },
          "organization": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          },
          "forks": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "permissions": {
            "type": "object",
            "required": [
              "admin",
              "pull",
              "push"
            ],
            "properties": {
              "admin": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "pull": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "triage": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "push": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "maintain": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              }
            }
          },
          "owner": {
            "$ref": "#/components/schemasð›°Žsimpleã„§user",
            "$unref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean",
            "meta": {
              "description": "Whether the repository is private or public.",
              "default": false,
              "type": "boolean"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat/Hello-World"
            }
          },
          "description": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "This your first repo!",
              "nullable": true
            }
          },
          "fork": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World"
            }
          },
          "archive_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
            }
          },
          "assignees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
            }
          },
          "blobs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
            }
          },
          "branches_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
            }
          },
          "collaborators_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
            }
          },
          "comments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
            }
          },
          "commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
            }
          },
          "compare_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
            }
          },
          "contents_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
            }
          },
          "contributors_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
            }
          },
          "deployments_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
            }
          },
          "downloads_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
            }
          },
          "events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/events"
            }
          },
          "forks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/forks"
            }
          },
          "git_commits_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
            }
          },
          "git_refs_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
            }
          },
          "git_tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
            }
          },
          "git_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "git:github.com/octocat/Hello-World.git"
            }
          },
          "issue_comment_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
            }
          },
          "issue_events_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
            }
          },
          "issues_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
            }
          },
          "keys_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
            }
          },
          "labels_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
            }
          },
          "languages_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/languages"
            }
          },
          "merges_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/merges"
            }
          },
          "milestones_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
            }
          },
          "notifications_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
            }
          },
          "pulls_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
            }
          },
          "releases_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
            }
          },
          "ssh_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "git@github.com:octocat/Hello-World.git"
            }
          },
          "stargazers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
            }
          },
          "statuses_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
            }
          },
          "subscribers_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
            }
          },
          "subscription_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
            }
          },
          "tags_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/tags"
            }
          },
          "teams_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/teams"
            }
          },
          "trees_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            }
          },
          "clone_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "https://github.com/octocat/Hello-World.git"
            }
          },
          "mirror_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "git:git.example.com/octocat/Hello-World",
              "nullable": true
            }
          },
          "hooks_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
            }
          },
          "svn_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://svn.github.com/octocat/Hello-World"
            }
          },
          "homepage": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com",
              "nullable": true
            }
          },
          "language": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "forks_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 9
            }
          },
          "stargazers_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 80
            }
          },
          "watchers_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 80
            }
          },
          "size": {
            "type": "integer",
            "meta": {
              "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
              "type": "integer",
              "example": 108
            }
          },
          "default_branch": {
            "type": "string",
            "meta": {
              "description": "The default branch of the repository.",
              "type": "string",
              "example": "master"
            }
          },
          "open_issues_count": {
            "type": "integer",
            "meta": {
              "type": "integer",
              "example": 0
            }
          },
          "is_template": {
            "type": "boolean",
            "meta": {
              "description": "Whether this repository acts as a template that can be used to generate new repositories.",
              "default": false,
              "type": "boolean",
              "example": true
            }
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "has_issues": {
            "type": "boolean",
            "meta": {
              "description": "Whether issues are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "has_projects": {
            "type": "boolean",
            "meta": {
              "description": "Whether projects are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "has_wiki": {
            "type": "boolean",
            "meta": {
              "description": "Whether the wiki is enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "has_pages": {
            "type": "boolean",
            "meta": {
              "type": "boolean"
            }
          },
          "has_downloads": {
            "type": "boolean",
            "meta": {
              "description": "Whether downloads are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "archived": {
            "type": "boolean",
            "meta": {
              "description": "Whether the repository is archived.",
              "default": false,
              "type": "boolean"
            }
          },
          "disabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Returns whether or not this repository disabled."
            }
          },
          "visibility": {
            "type": "string",
            "meta": {
              "description": "The repository visibility: public, private, or internal.",
              "default": "public",
              "type": "string"
            }
          },
          "pushed_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:06:43Z",
              "nullable": true
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:01:12Z",
              "nullable": true
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:14:43Z",
              "nullable": true
            }
          },
          "allow_rebase_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow rebase merges for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "template_repository": {
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "node_id": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "full_name": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "type": "integer",
                    "meta": {
                      "type": "integer"
                    }
                  },
                  "node_id": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "avatar_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "gravatar_id": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "html_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "followers_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "following_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "gists_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "starred_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "subscriptions_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "organizations_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "repos_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "events_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "received_events_url": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "type": "string",
                    "meta": {
                      "type": "string"
                    }
                  },
                  "site_admin": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "private": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "html_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "description": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "fork": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "archive_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "assignees_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "blobs_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "branches_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "collaborators_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "comments_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "commits_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "compare_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "contents_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "contributors_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "deployments_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "downloads_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "events_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "forks_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_commits_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_refs_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_tags_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "git_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "issue_comment_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "issue_events_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "issues_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "keys_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "labels_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "languages_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "merges_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "milestones_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "notifications_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "pulls_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "releases_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "ssh_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "stargazers_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "statuses_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "subscribers_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "subscription_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "tags_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "teams_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "trees_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "clone_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "mirror_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "hooks_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "svn_url": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "homepage": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "language": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "forks_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "stargazers_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "watchers_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "size": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "default_branch": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "open_issues_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "is_template": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string",
                  "meta": {
                    "type": "string"
                  }
                },
                "meta": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "has_issues": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_projects": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_wiki": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_pages": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "has_downloads": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "archived": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "disabled": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "visibility": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "pushed_at": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "maintain": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "push": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "triage": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  },
                  "pull": {
                    "type": "boolean",
                    "meta": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "temp_clone_token": {
                "type": "string",
                "meta": {
                  "type": "string"
                }
              },
              "allow_squash_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "allow_auto_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "delete_branch_on_merge": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "allow_update_branch": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "use_squash_pr_title_as_default": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "squash_merge_commit_title": {
                "type": "enum",
                "enum": [
                  "PR_TITLE",
                  "COMMIT_OR_PR_TITLE"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_TITLE",
                    "COMMIT_OR_PR_TITLE"
                  ],
                  "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                }
              },
              "squash_merge_commit_message": {
                "type": "enum",
                "enum": [
                  "PR_BODY",
                  "COMMIT_MESSAGES",
                  "BLANK"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_BODY",
                    "COMMIT_MESSAGES",
                    "BLANK"
                  ],
                  "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                }
              },
              "merge_commit_title": {
                "type": "enum",
                "enum": [
                  "PR_TITLE",
                  "MERGE_MESSAGE"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_TITLE",
                    "MERGE_MESSAGE"
                  ],
                  "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                }
              },
              "merge_commit_message": {
                "type": "enum",
                "enum": [
                  "PR_BODY",
                  "PR_TITLE",
                  "BLANK"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "PR_BODY",
                    "PR_TITLE",
                    "BLANK"
                  ],
                  "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                }
              },
              "allow_merge_commit": {
                "type": "boolean",
                "meta": {
                  "type": "boolean"
                }
              },
              "subscribers_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              },
              "network_count": {
                "type": "integer",
                "meta": {
                  "type": "integer"
                }
              }
            }
          },
          "temp_clone_token": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "allow_squash_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow squash merges for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "allow_auto_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow Auto-merge to be used on pull requests.",
              "default": false,
              "type": "boolean",
              "example": false
            }
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "meta": {
              "description": "Whether to delete head branches when pull requests are merged",
              "default": false,
              "type": "boolean",
              "example": false
            }
          },
          "allow_update_branch": {
            "type": "boolean",
            "meta": {
              "description": "Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
              "default": false,
              "type": "boolean",
              "example": false
            }
          },
          "use_squash_pr_title_as_default": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
              "default": false,
              "deprecated": true
            }
          },
          "squash_merge_commit_title": {
            "type": "enum",
            "enum": [
              "PR_TITLE",
              "COMMIT_OR_PR_TITLE"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "COMMIT_OR_PR_TITLE"
              ],
              "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
            }
          },
          "squash_merge_commit_message": {
            "type": "enum",
            "enum": [
              "PR_BODY",
              "COMMIT_MESSAGES",
              "BLANK"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "COMMIT_MESSAGES",
                "BLANK"
              ],
              "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
            }
          },
          "merge_commit_title": {
            "type": "enum",
            "enum": [
              "PR_TITLE",
              "MERGE_MESSAGE"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "MERGE_MESSAGE"
              ],
              "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
            }
          },
          "merge_commit_message": {
            "type": "enum",
            "enum": [
              "PR_BODY",
              "PR_TITLE",
              "BLANK"
            ],
            "meta": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "PR_TITLE",
                "BLANK"
              ],
              "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
            }
          },
          "allow_merge_commit": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow merge commits for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            }
          },
          "allow_forking": {
            "type": "boolean",
            "meta": {
              "description": "Whether to allow forking this repo",
              "type": "boolean"
            }
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "meta": {
              "description": "Whether to require contributors to sign off on web-based commits",
              "default": false,
              "type": "boolean"
            }
          },
          "subscribers_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "network_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "open_issues": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "watchers": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "master_branch": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "starred_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "\"2020-07-09T00:17:42Z\""
            }
          },
          "anonymous_access_enabled": {
            "type": "boolean",
            "meta": {
              "type": "boolean",
              "description": "Whether anonymous git access is enabled for this repository"
            }
          }
        }
      },
      "codeã„§ofã„§conductã„§simple": {
        "title": "Code Of Conduct Simple",
        "description": "Code of Conduct Simple",
        "type": "object",
        "required": [
          "url",
          "key",
          "name",
          "html_url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/github/docs/community/code_of_conduct"
            }
          },
          "key": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "citizen_code_of_conduct"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Citizen Code of Conduct"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true,
              "format": "uri",
              "example": "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
            }
          }
        }
      },
      "securityã„§andã„§analysis": {
        "nullable": true,
        "type": "object",
        "properties": {
          "advanced_security": {
            "type": "object",
            "properties": {
              "status": {
                "type": "enum",
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            }
          },
          "secret_scanning": {
            "type": "object",
            "properties": {
              "status": {
                "type": "enum",
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            }
          },
          "secret_scanning_push_protection": {
            "type": "object",
            "properties": {
              "status": {
                "type": "enum",
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "meta": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            }
          }
        }
      },
      "scimã„§error": {
        "title": "Scim Error",
        "description": "Scim Error",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "documentation_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "detail": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "status": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "scimType": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string",
              "meta": {
                "type": "string"
              }
            },
            "meta": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "releaseã„§asset": {
        "title": "Release Asset",
        "description": "Data related to a release.",
        "type": "object",
        "required": [
          "id",
          "name",
          "content_type",
          "size",
          "state",
          "url",
          "node_id",
          "download_count",
          "label",
          "uploader",
          "browser_download_url",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          },
          "browser_download_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          },
          "id": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "node_id": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "description": "The file name of the asset.",
              "type": "string",
              "example": "Team Environment"
            }
          },
          "label": {
            "type": "string",
            "meta": {
              "type": "string",
              "nullable": true
            }
          },
          "state": {
            "type": "enum",
            "enum": [
              "uploaded",
              "open"
            ],
            "meta": {
              "description": "State of the release asset.",
              "type": "string",
              "enum": [
                "uploaded",
                "open"
              ]
            }
          },
          "content_type": {
            "type": "string",
            "meta": {
              "type": "string"
            }
          },
          "size": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "download_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "created_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "updated_at": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "date-time"
            }
          },
          "uploader": {
            "$ref": "#/components/schemasð›°Žnullableã„§simpleã„§user",
            "$unref": "#/components/schemas/nullable-simple-user"
          }
        }
      },
      "reactionã„§rollup": {
        "title": "Reaction Rollup",
        "type": "object",
        "required": [
          "url",
          "total_count",
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "eyes",
          "rocket"
        ],
        "properties": {
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri"
            }
          },
          "total_count": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "+1": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "ã„§1": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "laugh": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "confused": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "heart": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "hooray": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "eyes": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          },
          "rocket": {
            "type": "integer",
            "meta": {
              "type": "integer"
            }
          }
        }
      },
      "alertã„§updatedã„§at": {
        "type": "string",
        "meta": {
          "type": "string",
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "format": "date-time",
          "readOnly": true
        }
      },
      "codeã„§ofã„§conduct": {
        "title": "Code Of Conduct",
        "description": "Code Of Conduct",
        "type": "object",
        "required": [
          "url",
          "html_url",
          "key",
          "name"
        ],
        "properties": {
          "key": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "contributor_covenant"
            }
          },
          "name": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "Contributor Covenant"
            }
          },
          "url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/codes_of_conduct/contributor_covenant"
            }
          },
          "body": {
            "type": "string",
            "meta": {
              "type": "string",
              "example": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
            }
          },
          "html_url": {
            "type": "string",
            "meta": {
              "type": "string",
              "format": "uri",
              "nullable": true
            }
          }
        }
      }
    },
    "examples": {
      "globalã„§hookã„§items": {
        "value": [
          {
            "type": "Global",
            "id": 1,
            "name": "web",
            "active": true,
            "events": [
              "organization",
              "user"
            ],
            "config": {
              "url": "https://example.com",
              "content_type": "json",
              "insecure_ssl": "0",
              "secret": "********"
            },
            "updated_at": "2017-12-07T00:14:59Z",
            "created_at": "2017-12-07T00:14:59Z",
            "url": "https://api.github.com/admin/hooks/1",
            "ping_url": "https://api.github.com/admin/hooks/1/pings"
          }
        ]
      },
      "globalã„§hook": {
        "value": {
          "type": "Global",
          "id": 1,
          "name": "web",
          "active": true,
          "events": [
            "organization",
            "user"
          ],
          "config": {
            "url": "https://example.com",
            "content_type": "json",
            "insecure_ssl": "0",
            "secret": "********"
          },
          "updated_at": "2017-12-07T00:14:59Z",
          "created_at": "2017-12-07T00:14:59Z",
          "url": "https://api.github.com/admin/hooks/1",
          "ping_url": "https://api.github.com/admin/hooks/1/pings"
        }
      },
      "globalã„§hookã„§2": {
        "value": {
          "type": "Global",
          "id": 1,
          "name": "web",
          "active": true,
          "events": [
            "organization"
          ],
          "config": {
            "url": "https://example.com",
            "content_type": "form",
            "insecure_ssl": "0"
          },
          "updated_at": "2017-12-07T00:14:59Z",
          "created_at": "2017-12-07T00:14:59Z",
          "url": "https://api.github.com/admin/hooks/1",
          "ping_url": "https://api.github.com/admin/hooks/1/pings"
        }
      },
      "enterpriseã„§publicã„§keyã„§items": {
        "value": [
          {
            "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
            "id": 2,
            "url": "https://api.github.com/user/keys/2",
            "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
            "created_at": "2020-06-11T21:31:57Z",
            "verified": false,
            "read_only": false,
            "last_used": "2020-06-11T22:31:57Z",
            "user_id": 1,
            "repository_id": 2
          },
          {
            "key": "9Og8iYjAyymI9LvABpJerYrMxURPc8r+dB7TJyvv1234",
            "id": 3,
            "url": "https://api.github.com/user/keys/2",
            "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
            "created_at": "2020-06-11T21:31:57Z",
            "verified": false,
            "read_only": false,
            "last_used": "2020-06-11T22:31:57Z",
            "user_id": 1,
            "repository_id": 2
          }
        ]
      },
      "ldapã„§mappingã„§team": {
        "value": {
          "ldap_dn": "cn=Enterprise Ops,ou=teams,dc=github,dc=com",
          "id": 1,
          "node_id": "MDQ6VGVhbTE=",
          "url": "https://api.github.com/teams/1",
          "html_url": "https://github.com/orgs/github/teams/justice-league",
          "name": "Justice League",
          "slug": "justice-league",
          "description": "A great team.",
          "privacy": "closed",
          "permission": "admin",
          "members_url": "https://api.github.com/teams/1/members{/member}",
          "repositories_url": "https://api.github.com/teams/1/repos",
          "parent": null
        }
      },
      "ldapã„§mappingã„§user": {
        "value": {
          "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com",
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false,
          "name": "monalisa octocat",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "hireable": false,
          "bio": "There once was...",
          "twitter_username": "monatheoctocat",
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "created_at": "2008-01-14T04:33:35Z",
          "updated_at": "2008-01-14T04:33:35Z",
          "private_gists": 81,
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "disk_usage": 10000,
          "collaborators": 8,
          "two_factor_authentication": true,
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20,
            "collaborators": 0
          }
        }
      },
      "organizationã„§simple": {
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization"
        }
      },
      "preã„§receiveã„§environmentã„§items": {
        "value": [
          {
            "id": 1,
            "name": "Default",
            "image_url": "githubenterprise://internal",
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1",
            "html_url": "https://github.example.com/admin/pre-receive-environments/1",
            "default_environment": true,
            "created_at": "2016-05-20T11:35:45-05:00",
            "hooks_count": 14,
            "download": {
              "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1/downloads/latest",
              "state": "not_started",
              "downloaded_at": "2016-05-26T07:42:53-05:00",
              "message": null
            }
          },
          {
            "id": 2,
            "name": "DevTools Hook Env",
            "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
            "html_url": "https://github.example.com/admin/pre-receive-environments/2",
            "default_environment": false,
            "created_at": "2016-05-20T11:35:45-05:00",
            "hooks_count": 1,
            "download": {
              "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
              "state": "success",
              "downloaded_at": "2016-05-26T07:42:53-05:00",
              "message": null
            }
          }
        ]
      },
      "preã„§receiveã„§environment": {
        "value": {
          "id": 2,
          "name": "DevTools Hook Env",
          "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
          "html_url": "https://github.example.com/admin/pre-receive-environments/2",
          "default_environment": false,
          "created_at": "2016-05-20T11:35:45-05:00",
          "hooks_count": 1,
          "download": {
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
            "state": "not_started",
            "downloaded_at": null,
            "message": null
          }
        }
      },
      "preã„§receiveã„§environmentã„§defaultã„§response": {
        "value": {
          "id": 2,
          "name": "DevTools Hook Env",
          "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
          "html_url": "https://github.example.com/admin/pre-receive-environments/2",
          "default_environment": false,
          "created_at": "2016-05-20T11:35:45-05:00",
          "hooks_count": 1,
          "download": {
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
            "state": "success",
            "downloaded_at": "2016-05-26T07:42:53-05:00",
            "message": null
          }
        }
      },
      "preã„§receiveã„§environmentã„§downloadã„§statusã„§defaultã„§response": {
        "value": {
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest",
          "state": "not_started",
          "downloaded_at": null,
          "message": null
        }
      },
      "preã„§receiveã„§environmentã„§downloadã„§status": {
        "value": {
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest",
          "state": "success",
          "downloaded_at": "2016-05-26T07:42:53-05:00",
          "message": null
        }
      },
      "preã„§receiveã„§hookã„§items": {
        "value": [
          {
            "id": 1,
            "name": "Check Commits",
            "enforcement": "disabled",
            "script": "scripts/commmit_check.sh",
            "script_repository": {
              "id": 595,
              "full_name": "DevIT/hooks",
              "url": "https://github.example.com/api/v3/repos/DevIT/hooks",
              "html_url": "https://github.example.com/DevIT/hooks"
            },
            "environment": {
              "id": 2,
              "name": "DevTools Hook Env",
              "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
              "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
              "html_url": "https://github.example.com/admin/pre-receive-environments/2",
              "default_environment": false,
              "created_at": "2016-05-20T11:35:45-05:00",
              "hooks_count": 1,
              "download": {
                "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                "state": "success",
                "downloaded_at": "2016-05-26T07:42:53-05:00",
                "message": null
              }
            },
            "allow_downstream_configuration": false
          }
        ]
      },
      "preã„§receiveã„§hook": {
        "value": {
          "id": 1,
          "name": "Check Commits",
          "enforcement": "disabled",
          "script": "scripts/commmit_check.sh",
          "script_repository": {
            "id": 595,
            "full_name": "DevIT/hooks",
            "url": "https://github.example.com/api/v3/repos/DevIT/hooks",
            "html_url": "https://github.example.com/DevIT/hooks"
          },
          "environment": {
            "id": 2,
            "name": "DevTools Hook Env",
            "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
            "html_url": "https://github.example.com/admin/pre-receive-environments/2",
            "default_environment": false,
            "created_at": "2016-05-20T11:35:45-05:00",
            "hooks_count": 1,
            "download": {
              "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
              "state": "success",
              "downloaded_at": "2016-05-26T07:42:53-05:00",
              "message": null
            }
          },
          "allow_downstream_configuration": false
        }
      },
      "preã„§receiveã„§hookã„§2": {
        "value": {
          "id": 1,
          "name": "Check Commits",
          "enforcement": "disabled",
          "script": "scripts/commmit_check.sh",
          "script_repository": {
            "id": 595,
            "full_name": "DevIT/hooks",
            "url": "https://github.example.com/api/v3/repos/DevIT/hooks",
            "html_url": "https://github.example.com/DevIT/hooks"
          },
          "environment": {
            "id": 1,
            "name": "Default",
            "image_url": "githubenterprise://internal",
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1",
            "html_url": "https://github.example.com/admin/pre-receive-environments/1",
            "default_environment": true,
            "created_at": "2016-05-20T11:35:45-05:00",
            "hooks_count": 1,
            "download": {
              "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1/downloads/latest",
              "state": "success",
              "downloaded_at": "2016-05-26T07:42:53-05:00",
              "message": null
            }
          },
          "allow_downstream_configuration": true
        }
      },
      "authorizationã„§items": {
        "value": [
          {
            "id": 2,
            "url": "https://enterprise.octocat.com/api/v3/authorizations/2",
            "app": {
              "name": "My personal access token",
              "url": "https://docs.github.com/enterprise/rest/reference/enterprise-admin#list-personal-access-tokens",
              "client_id": "00000000000000000000"
            },
            "token": "ghp_16C7e42F292c6912E7710c838347Ae178B4a",
            "hashed_token": "23cffb2fab1b0a62747863eba88cb9327e561f2f7a0c8661c0d9b83146cb8d45",
            "token_last_eight": "Ae178B4a",
            "note": "My personal access token",
            "note_url": null,
            "created_at": "2019-04-24T21:49:02Z",
            "updated_at": "2019-04-24T21:49:02Z",
            "scopes": [
              "admin:business",
              "admin:gpg_key",
              "admin:org",
              "admin:org_hook",
              "admin:pre_receive_hook",
              "admin:public_key",
              "admin:repo_hook",
              "delete_repo",
              "gist",
              "notifications",
              "repo",
              "user",
              "write:discussion"
            ],
            "fingerprint": null
          }
        ]
      },
      "simpleã„§user": {
        "value": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false
        }
      },
      "authorization": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "expires_at": "2011-10-06T17:26:27Z",
          "fingerprint": "jklmnop12345678"
        }
      },
      "baseã„§installationã„§items": {
        "value": [
          {
            "id": 1,
            "account": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
            "repositories_url": "https://api.github.com/installation/repositories",
            "html_url": "https://github.com/organizations/github/settings/installations/1",
            "app_id": 1,
            "target_id": 1,
            "target_type": "Organization",
            "permissions": {
              "checks": "write",
              "metadata": "read",
              "contents": "read"
            },
            "events": [
              "push",
              "pull_request"
            ],
            "single_file_name": "config.yaml",
            "has_multiple_single_files": true,
            "single_file_paths": [
              "config.yml",
              ".github/issue_TEMPLATE.md"
            ],
            "repository_selection": "selected",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "app_slug": "github-actions",
            "suspended_at": null,
            "suspended_by": null
          }
        ]
      },
      "baseã„§installation": {
        "value": {
          "id": 1,
          "account": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "repositories_url": "https://api.github.com/installation/repositories",
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "app_id": 1,
          "target_id": 1,
          "target_type": "Organization",
          "permissions": {
            "checks": "write",
            "metadata": "read",
            "contents": "read"
          },
          "events": [
            "push",
            "pull_request"
          ],
          "single_file_name": "config.yaml",
          "has_multiple_single_files": true,
          "single_file_paths": [
            "config.yml",
            ".github/issue_TEMPLATE.md"
          ],
          "repository_selection": "selected",
          "created_at": "2017-07-08T16:18:44-04:00",
          "updated_at": "2017-07-08T16:18:44-04:00",
          "app_slug": "github-actions",
          "suspended_at": null,
          "suspended_by": null
        }
      },
      "installationã„§token": {
        "value": {
          "token": "ghs_16C7e42F292c6912E7710c838347Ae178B4a",
          "expires_at": "2016-07-11T22:14:10Z",
          "permissions": {
            "issues": "write",
            "contents": "read"
          },
          "repository_selection": "selected",
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ]
        }
      },
      "applicationã„§grantã„§items": {
        "value": [
          {
            "id": 1,
            "url": "https://api.github.com/applications/grants/1",
            "app": {
              "url": "http://my-github-app.com",
              "name": "my github app",
              "client_id": "abcde12345fghij67890"
            },
            "created_at": "2011-09-06T17:26:27Z",
            "updated_at": "2011-09-06T20:39:23Z",
            "scopes": [
              "public_repo"
            ]
          }
        ]
      },
      "applicationã„§grant": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/applications/grants/1",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "updated_at": "2011-09-06T20:39:23Z",
          "scopes": [
            "public_repo"
          ]
        }
      },
      "authorizationã„§withã„§user": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo",
            "user"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "Iv1.8a61f9b3a7aba766"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "expires_at": "2011-09-08T17:26:27Z",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "scopeã„§token": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "Iv1.8a61f9b3a7aba766"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "expires_at": "2011-09-08T17:26:27Z",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "installation": {
            "permissions": {
              "metadata": "read",
              "issues": "write",
              "contents": "read"
            },
            "repository_selection": "selected",
            "single_file_name": ".github/workflow.yml",
            "repositories_url": "https://api.github.com/user/repos",
            "account": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "has_multiple_single_files": false,
            "single_file_paths": []
          }
        }
      },
      "authorizationã„§responseã„§ifã„§returningã„§anã„§existingã„§tokenã„§2": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "expires_at": "2011-10-06T17:26:27Z",
          "fingerprint": ""
        }
      },
      "authorizationã„§responseã„§ifã„§returningã„§anã„§existingã„§token": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "expires_at": "2011-10-06T17:26:27Z",
          "fingerprint": "jklmnop12345678"
        }
      },
      "authorizationã„§3": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "expires_at": "2012-10-06T17:26:27Z",
          "fingerprint": "jklmnop12345678"
        }
      },
      "authorizationã„§2": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "expires_at": "2011-10-06T17:26:27Z",
          "fingerprint": "jklmnop12345678"
        }
      },
      "announcement": {
        "summary": "Default response",
        "value": {
          "announcement": "Very **important** announcement about _nothing_.",
          "expires_at": "2021-01-01T00:00:00.000+00:00"
        }
      },
      "licenseã„§info": {
        "value": {
          "seats": 1400,
          "seats_used": 1316,
          "seats_available": 84,
          "kind": "standard",
          "days_until_expiration": 365,
          "expire_at": "2016/02/06 12:41:52 -0600"
        }
      },
      "enterpriseã„§overview": {
        "value": {
          "repos": {
            "total_repos": 212,
            "root_repos": 194,
            "fork_repos": 18,
            "org_repos": 51,
            "total_pushes": 3082,
            "total_wikis": 15
          },
          "hooks": {
            "total_hooks": 27,
            "active_hooks": 23,
            "inactive_hooks": 4
          },
          "pages": {
            "total_pages": 36
          },
          "orgs": {
            "total_orgs": 33,
            "disabled_orgs": 0,
            "total_teams": 60,
            "total_team_members": 314
          },
          "users": {
            "total_users": 254,
            "admin_users": 45,
            "suspended_users": 21
          },
          "pulls": {
            "total_pulls": 86,
            "merged_pulls": 60,
            "mergeable_pulls": 21,
            "unmergeable_pulls": 3
          },
          "issues": {
            "total_issues": 179,
            "open_issues": 83,
            "closed_issues": 96
          },
          "milestones": {
            "total_milestones": 7,
            "open_milestones": 6,
            "closed_milestones": 1
          },
          "gists": {
            "total_gists": 178,
            "private_gists": 151,
            "public_gists": 25
          },
          "comments": {
            "total_commit_comments": 6,
            "total_gist_comments": 28,
            "total_issue_comments": 366,
            "total_pull_request_comments": 30
          }
        }
      },
      "actionsã„§cacheã„§usageã„§policyã„§enterprise": {
        "value": {
          "repo_cache_size_limit_in_gb": 10,
          "max_repo_cache_size_limit_in_gb": 15
        }
      },
      "selectedã„§actions": {
        "value": {
          "github_owned_allowed": true,
          "verified_allowed": false,
          "patterns_allowed": [
            "monalisa/octocat@*",
            "docker/*"
          ]
        }
      },
      "auditã„§log": {
        "value": [
          {
            "actor_ip": "88.123.45.123",
            "from": "pull_requests#merge",
            "device_cookie": null,
            "actor": "mona-admin",
            "actor_id": 7,
            "repo": "octo-org/octo-repo",
            "repo_id": 17,
            "business": "github",
            "business_id": 1,
            "org": "octo-org",
            "org_id": 8,
            "action": "pull_request.merge",
            "@timestamp": 1635940599755,
            "created_at": 1635940599755,
            "operation_type": "modify",
            "actor_location": {
              "country_code": "GB",
              "country_name": "United Kingdom",
              "region": "ENG",
              "region_name": "England",
              "city": "Louth",
              "postal_code": "LN11",
              "location": {
                "lat": 53.4457,
                "lon": 0.141
              }
            },
            "data": {
              "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ...",
              "method": "POST",
              "request_id": "e4dabc4d-ba16-4bca-1234-649be7ae1188",
              "server_id": "5d17aab5-fd9f-abcd-a820-16bed246441b",
              "request_category": "other",
              "controller_action": "merge",
              "url": "https://example.com/octo-org/octo-repo/pull/1/merge",
              "client_id": 322299977.1635936,
              "referrer": "https://example.com/octo-org/octo-repo/pull/1",
              "actor_session": 1,
              "pull_request_id": 1,
              "category_type": "Resource Management"
            }
          },
          {
            "actor_ip": "88.123.45.123",
            "from": "pull_request_review_events#create",
            "device_cookie": null,
            "actor": "mona-admin",
            "actor_id": 7,
            "business_id": 1,
            "org_id": 8,
            "action": "pull_request_review.submit",
            "@timestamp": 1635940593079,
            "created_at": 1635940593079,
            "operation_type": "modify",
            "actor_location": {
              "country_code": "GB",
              "country_name": "United Kingdom",
              "region": "ENG",
              "region_name": "England",
              "city": "Louth",
              "postal_code": "LN11",
              "location": {
                "lat": 53.4457,
                "lon": 0.141
              }
            },
            "data": {
              "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ...",
              "method": "PUT",
              "request_id": "c0f63bb7-17b6-4796-940c-12345c5a581b",
              "server_id": "2abc1234-f651-43e3-9696-e942ad5f8c89",
              "request_category": "other",
              "controller_action": "create",
              "url": "https://example.com/octo-org/octo-repo/pull/1/reviews",
              "client_id": 322299977.1635936,
              "referrer": "https://example.com/octo-org/octo-repo/pull/1/files",
              "actor_session": 1,
              "spammy": false,
              "pull_request_id": 1,
              "body": null,
              "allowed": true,
              "id": 1,
              "state": 40,
              "issue_id": 1,
              "review_id": 1,
              "category_type": "Resource Management"
            }
          },
          {
            "actor_ip": "88.123.45.123",
            "from": "pull_requests#create",
            "device_cookie": null,
            "actor": "mona",
            "actor_id": 9,
            "user_id": 9,
            "repo": "octo-org/octo-repo",
            "repo_id": 17,
            "business": "github",
            "business_id": 1,
            "org": "octo-org",
            "org_id": 8,
            "action": "pull_request.create",
            "@timestamp": 1635940554161,
            "created_at": 1635940554161,
            "operation_type": "create",
            "actor_location": {
              "country_code": "GB",
              "country_name": "United Kingdom",
              "region": "ENG",
              "region_name": "England",
              "city": "Louth",
              "postal_code": "LN11",
              "location": {
                "lat": 53.4457,
                "lon": 0.141
              }
            },
            "data": {
              "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ...",
              "method": "POST",
              "request_id": "2773abeb-477f-4ebf-a017-f8e8a206c305",
              "server_id": "796e3115-4ce8-4606-8fd0-99ea57a2e12b",
              "request_category": "other",
              "controller_action": "create",
              "url": "https://example.com/octo-org/octo-repo/pull/create?base=octo-org%3Amain&head=mona%3Apatch-1",
              "client_id": 386351111.163594,
              "referrer": "https://example.com/octo-org/octo-repo/compare/main...mona:patch-1",
              "actor_session": 2,
              "pull_request_id": 1,
              "category_type": "Resource Management"
            }
          }
        ]
      },
      "organizationã„§secretã„§scanningã„§alertã„§list": {
        "value": [
          {
            "number": 2,
            "created_at": "2020-11-06T18:48:51Z",
            "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/2",
            "html_url": "https://github.com/owner/private-repo/security/secret-scanning/2",
            "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/2/locations",
            "state": "resolved",
            "resolution": "false_positive",
            "resolved_at": "2020-11-07T02:47:13Z",
            "resolved_by": {
              "login": "monalisa",
              "id": 2,
              "node_id": "MDQ6VXNlcjI=",
              "avatar_url": "https://alambic.github.com/avatars/u/2?",
              "gravatar_id": "",
              "url": "https://api.github.com/users/monalisa",
              "html_url": "https://github.com/monalisa",
              "followers_url": "https://api.github.com/users/monalisa/followers",
              "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
              "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
              "organizations_url": "https://api.github.com/users/monalisa/orgs",
              "repos_url": "https://api.github.com/users/monalisa/repos",
              "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
              "received_events_url": "https://api.github.com/users/monalisa/received_events",
              "type": "User",
              "site_admin": true
            },
            "secret_type": "adafruit_io_key",
            "secret_type_display_name": "Adafruit IO Key",
            "secret": "aio_XXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks"
            },
            "push_protection_bypassed_by": {
              "login": "monalisa",
              "id": 2,
              "node_id": "MDQ6VXNlcjI=",
              "avatar_url": "https://alambic.github.com/avatars/u/2?",
              "gravatar_id": "",
              "url": "https://api.github.com/users/monalisa",
              "html_url": "https://github.com/monalisa",
              "followers_url": "https://api.github.com/users/monalisa/followers",
              "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
              "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
              "organizations_url": "https://api.github.com/users/monalisa/orgs",
              "repos_url": "https://api.github.com/users/monalisa/repos",
              "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
              "received_events_url": "https://api.github.com/users/monalisa/received_events",
              "type": "User",
              "site_admin": true
            },
            "push_protection_bypassed": true,
            "push_protection_bypassed_at": "2020-11-06T21:48:51Z"
          },
          {
            "number": 1,
            "created_at": "2020-11-06T18:18:30Z",
            "url": "https://api.github.com/repos/owner/repo/secret-scanning/alerts/1",
            "html_url": "https://github.com/owner/repo/security/secret-scanning/1",
            "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/1/locations",
            "state": "open",
            "resolution": null,
            "resolved_at": null,
            "resolved_by": null,
            "secret_type": "mailchimp_api_key",
            "secret_type_display_name": "Mailchimp API Key",
            "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks"
            },
            "push_protection_bypassed_by": null,
            "push_protection_bypassed": false,
            "push_protection_bypassed_at": null
          }
        ]
      },
      "apiã„§overview": {
        "value": {
          "verifiable_password_authentication": true,
          "packages": [
            "192.30.252.0/22"
          ],
          "dependabot": [
            "54.158.161.132"
          ],
          "installed_version": "3.6.0"
        }
      },
      "organizationã„§customã„§repositoryã„§roleã„§example": {
        "value": {
          "total_count": 2,
          "custom_roles": [
            {
              "id": 8030,
              "name": "Developer"
            },
            {
              "id": 8031,
              "name": "Designer"
            }
          ]
        }
      },
      "organizationã„§fullã„§defaultã„§response": {
        "summary": "Default response",
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization",
          "name": "github",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "twitter_username": "github",
          "is_verified": true,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "html_url": "https://github.com/octocat",
          "created_at": "2008-01-14T04:33:35Z",
          "updated_at": "2014-03-03T18:58:10Z",
          "type": "Organization",
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "private_gists": 81,
          "disk_usage": 10000,
          "collaborators": 8,
          "billing_email": "mona@github.com",
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20,
            "filled_seats": 4,
            "seats": 5
          },
          "default_repository_permission": "read",
          "members_can_create_repositories": true,
          "two_factor_requirement_enabled": true,
          "members_allowed_repository_creation_type": "all",
          "members_can_create_public_repositories": false,
          "members_can_create_private_repositories": false,
          "members_can_create_internal_repositories": false,
          "members_can_create_pages": true,
          "members_can_fork_private_repositories": false
        }
      },
      "organizationã„§full": {
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization",
          "name": "github",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "twitter_username": "github",
          "is_verified": true,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "html_url": "https://github.com/octocat",
          "created_at": "2008-01-14T04:33:35Z",
          "type": "Organization",
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "private_gists": 81,
          "disk_usage": 10000,
          "collaborators": 8,
          "billing_email": "mona@github.com",
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20
          },
          "default_repository_permission": "read",
          "members_can_create_repositories": true,
          "two_factor_requirement_enabled": true,
          "members_allowed_repository_creation_type": "all",
          "members_can_create_public_repositories": false,
          "members_can_create_private_repositories": false,
          "members_can_create_internal_repositories": false,
          "members_can_create_pages": true,
          "members_can_create_public_pages": true,
          "members_can_create_private_pages": true,
          "members_can_fork_private_repositories": false,
          "web_commit_signoff_required": false,
          "updated_at": "2014-03-03T18:58:10Z"
        }
      },
      "externalã„§group": {
        "value": {
          "group_id": "123",
          "group_name": "Octocat admins",
          "updated_at": "2021-01-24T11:31:04-06:00",
          "teams": [
            {
              "team_id": 1,
              "team_name": "team-test"
            },
            {
              "team_id": 2,
              "team_name": "team-test2"
            }
          ],
          "members": [
            {
              "member_id": 1,
              "member_login": "mona-lisa_eocsaxrs",
              "member_name": "Mona Lisa",
              "member_email": "mona_lisa@github.com"
            },
            {
              "member_id": 2,
              "member_login": "octo-lisa_eocsaxrs",
              "member_name": "Octo Lisa",
              "member_email": "octo_lisa@github.com"
            }
          ]
        }
      },
      "externalã„§groups": {
        "value": {
          "groups": [
            {
              "group_id": "123",
              "group_name": "Octocat admins",
              "updated_at": "2021-01-24T11:31:04-06:00"
            },
            {
              "group_id": "456",
              "group_name": "Octocat docs members",
              "updated_at": "2021-03-24T11:31:04-06:00"
            }
          ]
        }
      },
      "installation": {
        "value": {
          "id": 1,
          "account": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "avatar_url": "https://github.com/images/error/hubot_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/github",
            "html_url": "https://github.com/github",
            "followers_url": "https://api.github.com/users/github/followers",
            "following_url": "https://api.github.com/users/github/following{/other_user}",
            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
            "organizations_url": "https://api.github.com/users/github/orgs",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "received_events_url": "https://api.github.com/users/github/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "repository_selection": "all",
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "repositories_url": "https://api.github.com/installation/repositories",
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "app_id": 1,
          "target_id": 1,
          "target_type": "Organization",
          "permissions": {
            "checks": "write",
            "metadata": "read",
            "contents": "read"
          },
          "events": [
            "push",
            "pull_request"
          ],
          "created_at": "2018-02-09T20:51:14Z",
          "updated_at": "2018-02-09T20:51:14Z",
          "single_file_name": "config.yml",
          "has_multiple_single_files": true,
          "single_file_paths": [
            "config.yml",
            ".github/issue_TEMPLATE.md"
          ],
          "app_slug": "github-actions",
          "suspended_at": null,
          "suspended_by": null
        }
      },
      "installationã„§paginated": {
        "value": {
          "total_count": 1,
          "installations": [
            {
              "id": 25381,
              "account": {
                "login": "octo-org",
                "id": 6811672,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/6811672?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octo-org",
                "html_url": "https://github.com/octo-org",
                "followers_url": "https://api.github.com/users/octo-org/followers",
                "following_url": "https://api.github.com/users/octo-org/following{/other_user}",
                "gists_url": "https://api.github.com/users/octo-org/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octo-org/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octo-org/subscriptions",
                "organizations_url": "https://api.github.com/users/octo-org/orgs",
                "repos_url": "https://api.github.com/users/octo-org/repos",
                "events_url": "https://api.github.com/users/octo-org/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octo-org/received_events",
                "type": "Organization",
                "site_admin": false
              },
              "repository_selection": "selected",
              "access_tokens_url": "https://api.github.com/app/installations/25381/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/octo-org/settings/installations/25381",
              "app_id": 2218,
              "target_id": 6811672,
              "target_type": "Organization",
              "permissions": {
                "deployments": "write",
                "metadata": "read",
                "pull_requests": "read",
                "statuses": "read"
              },
              "events": [
                "deployment",
                "deployment_status"
              ],
              "created_at": "2017-05-16T08:47:09.000-07:00",
              "updated_at": "2017-06-06T11:23:23.000-07:00",
              "single_file_name": "config.yml",
              "has_multiple_single_files": true,
              "single_file_paths": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ],
              "app_slug": "github-actions",
              "suspended_at": null,
              "suspended_by": null
            }
          ]
        }
      },
      "orgã„§preã„§receiveã„§hookã„§items": {
        "value": [
          {
            "id": 42,
            "name": "Check Commits",
            "enforcement": "disabled",
            "configuration_url": "https://github.example.com/api/v3/admin/pre-receive-hooks/42",
            "allow_downstream_configuration": true
          }
        ]
      },
      "orgã„§preã„§receiveã„§hook": {
        "value": {
          "id": 42,
          "name": "Check Commits",
          "enforcement": "disabled",
          "configuration_url": "https://github.example.com/api/v3/admin/pre-receive-hooks/42",
          "allow_downstream_configuration": true
        }
      },
      "orgã„§preã„§receiveã„§hookã„§2": {
        "value": {
          "id": 42,
          "name": "Check Commits",
          "enforcement": "enabled",
          "configuration_url": "https://github.example.com/api/v3/orgs/octocat/pre-receive-hooks/42",
          "allow_downstream_configuration": false
        }
      },
      "teamã„§full": {
        "value": {
          "id": 1,
          "node_id": "MDQ6VGVhbTE=",
          "url": "https://api.github.com/teams/1",
          "html_url": "https://github.com/orgs/github/teams/justice-league",
          "name": "Justice League",
          "slug": "justice-league",
          "description": "A great team.",
          "privacy": "closed",
          "permission": "admin",
          "members_url": "https://api.github.com/teams/1/members{/member}",
          "repositories_url": "https://api.github.com/teams/1/repos",
          "members_count": 3,
          "repos_count": 10,
          "created_at": "2017-07-14T16:53:42Z",
          "updated_at": "2017-08-17T12:37:15Z",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "name": "github",
            "company": "GitHub",
            "blog": "https://github.com/blog",
            "location": "San Francisco",
            "email": "octocat@github.com",
            "has_organization_projects": true,
            "has_repository_projects": true,
            "public_repos": 2,
            "public_gists": 1,
            "followers": 20,
            "following": 0,
            "html_url": "https://github.com/octocat",
            "created_at": "2008-01-14T04:33:35Z",
            "updated_at": "2017-08-17T12:37:15Z",
            "type": "Organization"
          },
          "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
        }
      },
      "rateã„§limitã„§overview": {
        "value": {
          "resources": {
            "core": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1372700873,
              "used": 1
            },
            "search": {
              "limit": 30,
              "remaining": 18,
              "reset": 1372697452,
              "used": 12
            },
            "graphql": {
              "limit": 5000,
              "remaining": 4993,
              "reset": 1372700389,
              "used": 7
            },
            "integration_manifest": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1551806725,
              "used": 1
            },
            "code_scanning_upload": {
              "limit": 500,
              "remaining": 499,
              "reset": 1551806725,
              "used": 1
            }
          },
          "rate": {
            "limit": 5000,
            "remaining": 4999,
            "reset": 1372700873,
            "used": 1
          }
        }
      },
      "actionsã„§cacheã„§usageã„§policy": {
        "value": {
          "repo_cache_size_limit_in_gb": 14
        }
      },
      "workflowã„§runã„§paginated": {
        "value": {
          "total_count": 1,
          "workflow_runs": [
            {
              "id": 30433642,
              "name": "Build",
              "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
              "check_suite_id": 42,
              "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
              "head_branch": "master",
              "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
              "run_number": 562,
              "event": "push",
              "status": "queued",
              "conclusion": null,
              "workflow_id": 159038,
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
              "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
              "pull_requests": [],
              "created_at": "2020-01-22T19:33:08Z",
              "updated_at": "2020-01-22T19:33:08Z",
              "actor": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "run_attempt": 1,
              "run_started_at": "2020-01-22T19:33:08Z",
              "triggering_actor": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
              "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
              "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
              "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
              "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
              "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
              "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
              "head_commit": {
                "id": "acb5820ced9479c074f688cc328bf03f341a511d",
                "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
                "message": "Create linter.yaml",
                "timestamp": "2020-01-22T19:33:05Z",
                "author": {
                  "name": "Octo Cat",
                  "email": "octocat@github.com"
                },
                "committer": {
                  "name": "GitHub",
                  "email": "noreply@github.com"
                }
              },
              "repository": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
              },
              "head_repository": {
                "id": 217723378,
                "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
                "name": "octo-repo",
                "full_name": "octo-org/octo-repo",
                "private": true,
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "html_url": "https://github.com/octo-org/octo-repo",
                "description": null,
                "fork": false,
                "url": "https://api.github.com/repos/octo-org/octo-repo",
                "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
                "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
                "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
                "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
                "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
                "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
                "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
                "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
                "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
                "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
                "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
                "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
                "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
                "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
                "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
                "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
                "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
                "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
                "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
                "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
                "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
              }
            }
          ]
        }
      },
      "workflowã„§run": {
        "value": {
          "id": 30433642,
          "name": "Build",
          "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
          "check_suite_id": 42,
          "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
          "head_branch": "main",
          "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
          "path": ".github/workflows/build.yml@main",
          "run_number": 562,
          "event": "push",
          "status": "queued",
          "workflow_id": 159038,
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
          "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
          "pull_requests": [],
          "created_at": "2020-01-22T19:33:08Z",
          "updated_at": "2020-01-22T19:33:08Z",
          "actor": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "run_attempt": 1,
          "referenced_workflows": [
            {
              "path": "octocat/Hello-World/.github/workflows/deploy.yml@main",
              "sha": "86e8bc9ecf7d38b1ed2d2cfb8eb87ba9b35b01db",
              "ref": "refs/heads/main"
            },
            {
              "path": "octo-org/octo-repo/.github/workflows/report.yml@v2",
              "sha": "79e9790903e1c3373b1a3e3a941d57405478a232",
              "ref": "refs/tags/v2"
            },
            {
              "path": "octo-org/octo-repo/.github/workflows/secure.yml@1595d4b6de6a9e9751fb270a41019ce507d4099e",
              "sha": "1595d4b6de6a9e9751fb270a41019ce507d4099e"
            }
          ],
          "run_started_at": "2020-01-22T19:33:08Z",
          "triggering_actor": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
          "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
          "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
          "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
          "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
          "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
          "previous_attempt_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/attempts/1",
          "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
          "head_commit": {
            "id": "acb5820ced9479c074f688cc328bf03f341a511d",
            "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
            "message": "Create linter.yaml",
            "timestamp": "2020-01-22T19:33:05Z",
            "author": {
              "name": "Octo Cat",
              "email": "octocat@github.com"
            },
            "committer": {
              "name": "GitHub",
              "email": "noreply@github.com"
            }
          },
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "head_repository": {
            "id": 217723378,
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
            "name": "octo-repo",
            "full_name": "octo-org/octo-repo",
            "private": true,
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "html_url": "https://github.com/octo-org/octo-repo",
            "description": null,
            "fork": false,
            "url": "https://api.github.com/repos/octo-org/octo-repo",
            "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
            "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
            "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
            "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
            "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
            "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
            "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
            "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
            "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
            "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
            "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
            "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
            "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
            "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
            "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
            "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
            "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
            "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
            "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
            "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
            "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
          }
        }
      },
      "autolinkã„§items": {
        "value": [
          {
            "id": 1,
            "key_prefix": "TICKET-",
            "url_template": "https://example.com/TICKET?query=<num>"
          }
        ]
      },
      "autolink": {
        "value": {
          "id": 1,
          "key_prefix": "TICKET-",
          "url_template": "https://example.com/TICKET?query=<num>"
        }
      },
      "codeã„§scanningã„§analysisã„§items": {
        "value": [
          {
            "ref": "refs/heads/main",
            "commit_sha": "d99612c3e1f2970085cfbaeadf8f010ef69bad83",
            "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
            "environment": "{\"language\":\"python\"}",
            "error": "",
            "category": ".github/workflows/codeql-analysis.yml:analyze/language:python",
            "created_at": "2020-08-27T15:05:21Z",
            "results_count": 17,
            "rules_count": 49,
            "id": 201,
            "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/201",
            "sarif_id": "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53",
            "tool": {
              "name": "CodeQL",
              "guid": null,
              "version": "2.4.0"
            },
            "deletable": true,
            "warning": ""
          },
          {
            "ref": "refs/heads/my-branch",
            "commit_sha": "c8cff6510d4d084fb1b4aa13b64b97ca12b07321",
            "analysis_key": ".github/workflows/shiftleft.yml:build",
            "environment": "{}",
            "error": "",
            "category": ".github/workflows/shiftleft.yml:build/",
            "created_at": "2020-08-31T22:46:44Z",
            "results_count": 17,
            "rules_count": 32,
            "id": 200,
            "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/200",
            "sarif_id": "8981cd8e-b078-4ac3-a3be-1dad7dbd0b582",
            "tool": {
              "name": "Python Security Analysis",
              "guid": null,
              "version": "1.2.0"
            },
            "deletable": true,
            "warning": ""
          }
        ]
      },
      "collaboratorã„§items": {
        "value": [
          {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false,
            "permissions": {
              "pull": true,
              "triage": true,
              "push": true,
              "maintain": false,
              "admin": false
            },
            "role_name": "write"
          }
        ]
      },
      "repositoryã„§collaboratorã„§permissionã„§responseã„§ifã„§userã„§hasã„§adminã„§permissions": {
        "value": {
          "permission": "admin",
          "role_name": "admin",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "diffã„§rangeã„§response": {
        "value": [
          {
            "change_type": "removed",
            "manifest": "package.json",
            "ecosystem": "npm",
            "name": "helmet",
            "version": "4.6.0",
            "package_url": "pkg:npm/helmet@4.6.0",
            "license": "MIT",
            "source_repository_url": "https://github.com/helmetjs/helmet",
            "vulnerabilities": []
          },
          {
            "change_type": "added",
            "manifest": "package.json",
            "ecosystem": "npm",
            "name": "helmet",
            "version": "5.0.0",
            "package_url": "pkg:npm/helmet@5.0.0",
            "license": "MIT",
            "source_repository_url": "https://github.com/helmetjs/helmet",
            "vulnerabilities": []
          },
          {
            "change_type": "added",
            "manifest": "Gemfile",
            "ecosystem": "rubygems",
            "name": "ruby-openid",
            "version": "2.7.0",
            "package_url": "pkg:gem/ruby-openid@2.7.0",
            "license": null,
            "source_repository_url": "https://github.com/openid/ruby-openid",
            "vulnerabilities": [
              {
                "severity": "critical",
                "advisory_ghsa_id": "GHSA-fqfj-cmh6-hj49",
                "advisory_summary": "Ruby OpenID",
                "advisory_url": "https://github.com/advisories/GHSA-fqfj-cmh6-hj49"
              }
            ]
          }
        ]
      },
      "fullã„§repository": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "license": {
            "key": "mit",
            "name": "MIT License",
            "url": "https://api.github.com/licenses/mit",
            "spdx_id": "MIT",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "html_url": "https://github.com/licenses/mit"
          },
          "language": null,
          "forks_count": 9,
          "forks": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "watchers": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "open_issues": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "pull": true,
            "push": false,
            "admin": false
          },
          "allow_rebase_merge": true,
          "template_repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World-Template",
            "full_name": "octocat/Hello-World-Template",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World-Template",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World-Template",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World-Template.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World-Template.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
            "homepage": "https://github.com",
            "language": null,
            "forks": 9,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "watchers": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues": 0,
            "open_issues_count": 0,
            "is_template": true,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "allow_auto_merge": false,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "allow_forking": true,
          "web_commit_signoff_required": false,
          "subscribers_count": 42,
          "network_count": 0,
          "organization": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "parent": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "forks": 1,
            "open_issues": 1,
            "watchers": 1
          },
          "source": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "forks": 1,
            "open_issues": 1,
            "watchers": 1
          }
        }
      },
      "deployã„§keyã„§items": {
        "value": {}
      },
      "deployã„§key": {
        "value": {
          "id": 1,
          "key": "ssh-rsa AAA...",
          "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
          "title": "octocat@octomac",
          "verified": true,
          "created_at": "2014-12-10T15:53:42Z",
          "read_only": true
        }
      },
      "repositoryã„§preã„§receiveã„§hookã„§items": {
        "value": [
          {
            "id": 42,
            "name": "Check Commits",
            "enforcement": "disabled",
            "configuration_url": "https://github.example.com/api/v3/orgs/octocat/pre-receive-hooks/42"
          }
        ]
      },
      "repositoryã„§preã„§receiveã„§hook": {
        "value": {
          "id": 42,
          "name": "Check Commits",
          "enforcement": "disabled",
          "configuration_url": "https://github.example.com/api/v3/orgs/octocat/pre-receive-hooks/42"
        }
      },
      "repositoryã„§preã„§receiveã„§hookã„§2": {
        "value": {
          "id": 42,
          "name": "Check Commits",
          "enforcement": "enabled",
          "configuration_url": "https://github.example.com/api/v3/repos/octocat/hello-world/pre-receive-hooks/42"
        }
      },
      "releaseã„§items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
            "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
            "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
            "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
            "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
            "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
            "id": 1,
            "node_id": "MDc6UmVsZWFzZTE=",
            "tag_name": "v1.0.0",
            "target_commitish": "master",
            "name": "v1.0.0",
            "body": "Description of the release",
            "draft": false,
            "prerelease": false,
            "created_at": "2013-02-27T19:35:32Z",
            "published_at": "2013-02-27T19:35:32Z",
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assets": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                "id": 1,
                "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                "name": "example.zip",
                "label": "short description",
                "state": "uploaded",
                "content_type": "application/zip",
                "size": 1024,
                "download_count": 42,
                "created_at": "2013-02-27T19:35:32Z",
                "updated_at": "2013-02-27T19:35:32Z",
                "uploader": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            ]
          }
        ]
      },
      "release": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
          "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
          "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
          "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
          "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
          "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
          "discussion_url": "https://github.com/octocat/Hello-World/discussions/90",
          "id": 1,
          "node_id": "MDc6UmVsZWFzZTE=",
          "tag_name": "v1.0.0",
          "target_commitish": "master",
          "name": "v1.0.0",
          "body": "Description of the release",
          "draft": false,
          "prerelease": false,
          "created_at": "2013-02-27T19:35:32Z",
          "published_at": "2013-02-27T19:35:32Z",
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assets": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
              "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
              "id": 1,
              "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
              "name": "example.zip",
              "label": "short description",
              "state": "uploaded",
              "content_type": "application/zip",
              "size": 1024,
              "download_count": 42,
              "created_at": "2013-02-27T19:35:32Z",
              "updated_at": "2013-02-27T19:35:32Z",
              "uploader": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            }
          ]
        }
      },
      "secretã„§scanningã„§alertã„§list": {
        "value": [
          {
            "number": 2,
            "created_at": "2020-11-06T18:48:51Z",
            "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/2",
            "html_url": "https://github.com/owner/private-repo/security/secret-scanning/2",
            "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/2/locations",
            "state": "resolved",
            "resolution": "false_positive",
            "resolved_at": "2020-11-07T02:47:13Z",
            "resolved_by": {
              "login": "monalisa",
              "id": 2,
              "node_id": "MDQ6VXNlcjI=",
              "avatar_url": "https://alambic.github.com/avatars/u/2?",
              "gravatar_id": "",
              "url": "https://api.github.com/users/monalisa",
              "html_url": "https://github.com/monalisa",
              "followers_url": "https://api.github.com/users/monalisa/followers",
              "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
              "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
              "organizations_url": "https://api.github.com/users/monalisa/orgs",
              "repos_url": "https://api.github.com/users/monalisa/repos",
              "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
              "received_events_url": "https://api.github.com/users/monalisa/received_events",
              "type": "User",
              "site_admin": true
            },
            "secret_type": "adafruit_io_key",
            "secret_type_display_name": "Adafruit IO Key",
            "secret": "aio_XXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "push_protection_bypassed_by": {
              "login": "monalisa",
              "id": 2,
              "node_id": "MDQ6VXNlcjI=",
              "avatar_url": "https://alambic.github.com/avatars/u/2?",
              "gravatar_id": "",
              "url": "https://api.github.com/users/monalisa",
              "html_url": "https://github.com/monalisa",
              "followers_url": "https://api.github.com/users/monalisa/followers",
              "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
              "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
              "organizations_url": "https://api.github.com/users/monalisa/orgs",
              "repos_url": "https://api.github.com/users/monalisa/repos",
              "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
              "received_events_url": "https://api.github.com/users/monalisa/received_events",
              "type": "User",
              "site_admin": true
            },
            "push_protection_bypassed": true,
            "push_protection_bypassed_at": "2020-11-06T21:48:51Z"
          },
          {
            "number": 1,
            "created_at": "2020-11-06T18:18:30Z",
            "url": "https://api.github.com/repos/owner/repo/secret-scanning/alerts/1",
            "html_url": "https://github.com/owner/repo/security/secret-scanning/1",
            "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/1/locations",
            "state": "open",
            "resolution": null,
            "resolved_at": null,
            "resolved_by": null,
            "secret_type": "mailchimp_api_key",
            "secret_type_display_name": "Mailchimp API Key",
            "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2",
            "push_protection_bypassed_by": null,
            "push_protection_bypassed": false,
            "push_protection_bypassed_at": null
          }
        ]
      },
      "secretã„§scanningã„§alertã„§open": {
        "value": {
          "number": 42,
          "created_at": "2020-11-06T18:18:30Z",
          "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42",
          "html_url": "https://github.com/owner/private-repo/security/secret-scanning/42",
          "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42/locations",
          "state": "open",
          "secret_type": "mailchimp_api_key",
          "secret_type_display_name": "Mailchimp API Key",
          "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2",
          "push_protection_bypassed": false
        }
      },
      "secretã„§scanningã„§alertã„§resolved": {
        "value": {
          "number": 42,
          "created_at": "2020-11-06T18:18:30Z",
          "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42",
          "html_url": "https://github.com/owner/private-repo/security/secret-scanning/42",
          "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42/locations",
          "state": "resolved",
          "resolution": "used_in_tests",
          "resolved_at": "2020-11-16T22:42:07Z",
          "resolved_by": {
            "login": "monalisa",
            "id": 2,
            "node_id": "MDQ6VXNlcjI=",
            "avatar_url": "https://alambic.github.com/avatars/u/2?",
            "gravatar_id": "",
            "url": "https://api.github.com/users/monalisa",
            "html_url": "https://github.com/monalisa",
            "followers_url": "https://api.github.com/users/monalisa/followers",
            "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
            "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
            "organizations_url": "https://api.github.com/users/monalisa/orgs",
            "repos_url": "https://api.github.com/users/monalisa/repos",
            "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/monalisa/received_events",
            "type": "User",
            "site_admin": true
          },
          "secret_type": "mailchimp_api_key",
          "secret_type_display_name": "Mailchimp API Key",
          "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2",
          "push_protection_bypassed": false
        }
      },
      "publicã„§repositoryã„§items": {
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
          }
        ]
      },
      "scimã„§enterpriseã„§groupã„§list": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
          ],
          "totalResults": 2,
          "itemsPerPage": 2,
          "startIndex": 1,
          "Resources": [
            {
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:Group"
              ],
              "id": "abcd27f8-a9aa-11ea-8221-f59b2be9cccc",
              "externalId": null,
              "displayName": "octo-org",
              "members": [
                {
                  "$ref": "https:ð›°Žð›°Žapiâ´°githubâ´°comð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žoctoã„§corpð›°ŽUsersð›°Ž92b58aaaã„§a1d6ã„§11eaã„§8227ã„§b9ce9e023ccc"
                },
                {
                  "$ref": "https:ð›°Žð›°Žapiâ´°githubâ´°comð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žoctoã„§corpð›°ŽUsersð›°Žaaaa8c34ã„§a6b2ã„§11eaã„§9d70ã„§bbbbbd1c8fd5"
                }
              ],
              "meta": {
                "resourceType": "Group",
                "created": "2020-06-09T03:10:17.000+10:00",
                "lastModified": "2020-06-09T03:10:17.000+10:00",
                "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc"
              }
            },
            {
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:Group"
              ],
              "id": "5e75bbbb-aa1a-11ea-8644-75ff655cdddd",
              "externalId": null,
              "displayName": "octo-docs-org",
              "members": [
                {
                  "$ref": "https:ð›°Žð›°Žapiâ´°githubâ´°comð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žoctoã„§corpð›°ŽUsersð›°Ž92b58aaaã„§a1d6ã„§11eaã„§8227ã„§b9ce9e023ccc"
                }
              ],
              "meta": {
                "resourceType": "Group",
                "created": "2020-06-09T16:28:01.000+10:00",
                "lastModified": "2020-06-09T16:28:01.000+10:00",
                "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Groups/5e75bbbb-aa1a-11ea-8644-75ff655cdddd"
              }
            }
          ]
        }
      },
      "scimã„§enterpriseã„§group": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Group"
          ],
          "id": "abcd27f8-a9aa-11ea-8221-f59b2be9cccc",
          "externalId": null,
          "displayName": "octo-org",
          "members": [
            {
              "$ref": "https:ð›°Žð›°Žapiâ´°githubâ´°comð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žoctoã„§corpð›°ŽUsersð›°Ž92b58aaaã„§a1d6ã„§11eaã„§8227ã„§b9ce9e023ccc"
            },
            {
              "$ref": "https:ð›°Žð›°Žapiâ´°githubâ´°comð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žoctoã„§corpð›°ŽUsersð›°Žaaaa8c34ã„§a6b2ã„§11eaã„§9d70ã„§bbbbbd1c8fd5"
            }
          ],
          "meta": {
            "resourceType": "Group",
            "created": "2020-06-09T03:10:17.000+10:0",
            "lastModified": "2020-06-09T03:10:17.000+10:00",
            "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc"
          }
        }
      },
      "scimã„§enterpriseã„§groupã„§2": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Group"
          ],
          "id": "abcd27f8-a9aa-11ea-8221-f59b2be9cccc",
          "externalId": null,
          "displayName": "octo-org",
          "members": [
            {
              "$ref": "https:ð›°Žð›°Žapiâ´°githubâ´°comð›°Žscimð›°Žv2ð›°Ženterprisesð›°Žoctoã„§corpð›°ŽUsersð›°Ž92b58aaaã„§a1d6ã„§11eaã„§8227ã„§b9ce9e023ccc"
            }
          ],
          "meta": {
            "resourceType": "Group",
            "created": "2020-06-09T03:10:17.000+10:00",
            "lastModified": "2020-06-09T03:10:17.000+10:00",
            "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc"
          }
        }
      },
      "scimã„§enterpriseã„§userã„§list": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
          ],
          "totalResults": 2,
          "itemsPerPage": 2,
          "startIndex": 1,
          "Resources": [
            {
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ],
              "id": "92b58aaa-a1d6-11ea-8227-b9ce9e023ccc",
              "externalId": "00dowz5dr9oSfDFRA0h7",
              "userName": "octocat@github.com",
              "name": {
                "givenName": "Mona",
                "familyName": "Octocat"
              },
              "emails": [
                {
                  "value": "octocat@github.com",
                  "primary": true,
                  "type": "work"
                }
              ],
              "groups": [
                {
                  "value": "468dd3fa-a1d6-11ea-9031-15a1f0d7811d"
                }
              ],
              "active": true,
              "meta": {
                "resourceType": "User",
                "created": "2020-05-30T04:02:34.000+10:00",
                "lastModified": "2020-05-30T04:05:04.000+10:00",
                "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc"
              }
            },
            {
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ],
              "id": "e18b8c34-a6b2-11ea-9d70-54abbd1c8fd5",
              "externalId": "sdfoiausdofiua",
              "userName": "hubot@example.com",
              "name": {
                "givenName": "hu",
                "familyName": "bot"
              },
              "emails": [
                {
                  "value": "hubot@example.com",
                  "type": "work",
                  "primary": true
                }
              ],
              "groups": [],
              "active": true,
              "meta": {
                "resourceType": "User",
                "created": "2020-06-05T08:29:40.000+10:00",
                "lastModified": "2020-06-05T08:30:19.000+10:00",
                "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Users/e18b8c34-a6b2-11ea-9d70-54abbd1c8fd5"
              }
            }
          ]
        }
      },
      "scimã„§enterpriseã„§user": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
          ],
          "id": "92b58aaa-a1d6-11ea-8227-b9ce9e023ccc",
          "externalId": "00dowz5dr9oSfDFRA0h7",
          "userName": "mona.octocat@okta.example.com",
          "name": {
            "givenName": "Mona",
            "familyName": "Octocat"
          },
          "emails": [
            {
              "value": "mona.octocat@okta.example.com",
              "type": "work",
              "primary": true
            }
          ],
          "groups": [
            {
              "value": "468dd3fa-a1d6-11ea-9031-15a1f0d7811d"
            }
          ],
          "active": true,
          "meta": {
            "resourceType": "User",
            "created": "2017-03-09T16:11:13-05:00",
            "lastModified": "2017-03-09T16:11:13-05:00",
            "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc"
          }
        }
      },
      "scimã„§enterpriseã„§userã„§2": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
          ],
          "id": "92b58aaa-a1d6-11ea-8227-b9ce9e023ccc",
          "externalId": "00dowz5dr9oSfDFRA0h7",
          "userName": "mona.octocat@okta.example.com",
          "name": {
            "givenName": "Monalisa",
            "familyName": "Octocat"
          },
          "emails": [
            {
              "value": "mona.octocat@okta.example.com",
              "type": "work",
              "primary": true
            },
            {
              "value": "monalisa@octocat.github.com",
              "type": "home"
            }
          ],
          "groups": [
            {
              "value": "468dd3fa-a1d6-11ea-9031-15a1f0d7811d"
            }
          ],
          "active": true,
          "meta": {
            "resourceType": "User",
            "created": "2017-03-09T16:11:13-05:00",
            "lastModified": "2017-03-09T16:11:13-05:00",
            "location": "https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc"
          }
        }
      },
      "configurationã„§status": {
        "value": {
          "status": "running",
          "progress": [
            {
              "status": "DONE",
              "key": "Appliance core components"
            },
            {
              "status": "DONE",
              "key": "GitHub utilities"
            },
            {
              "status": "DONE",
              "key": "GitHub applications"
            },
            {
              "status": "CONFIGURING",
              "key": "GitHub services"
            },
            {
              "status": "PENDING",
              "key": "Reloading appliance services"
            }
          ]
        }
      },
      "maintenanceã„§status": {
        "value": {
          "status": "scheduled",
          "scheduled_time": "Tuesday, January 22 at 15:34 -0800",
          "connection_services": [
            {
              "name": "git operations",
              "number": 0
            },
            {
              "name": "mysql queries",
              "number": 233
            },
            {
              "name": "aqueduct jobs",
              "number": 34
            },
            {
              "name": "resque jobs",
              "number": 54
            }
          ]
        }
      },
      "enterpriseã„§settings": {
        "value": {
          "enterprise": {
            "private_mode": false,
            "public_pages": false,
            "subdomain_isolation": true,
            "signup_enabled": false,
            "github_hostname": "ghe.local",
            "identicons_host": "dotcom",
            "http_proxy": null,
            "auth_mode": "default",
            "expire_sessions": false,
            "admin_password": null,
            "configuration_id": 1401777404,
            "configuration_run_count": 4,
            "avatar": {
              "enabled": false,
              "uri": ""
            },
            "customer": {
              "name": "GitHub",
              "email": "stannis@themannis.biz",
              "uuid": "af6cac80-e4e1-012e-d822-1231380e52e9",
              "secret_key_data": "-----BEGIN PGP PRIVATE KEY BLOCK-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\n\nlQcYBE5TCgsBEACk4yHpUcapplebaumBMXYMiLF+nCQ0lxpx...\n-----END PGP PRIVATE KEY BLOCK-----\n",
              "public_key_data": "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\n\nmI0ETqzZYgEEALSe6snowdenXyqvLfSQ34HWD6C7....\n-----END PGP PUBLIC KEY BLOCK-----\n"
            },
            "license": {
              "seats": 0,
              "evaluation": false,
              "perpetual": false,
              "unlimited_seating": true,
              "support_key": "ssh-rsa AAAAB3N....",
              "ssh_allowed": true,
              "cluster_support": false,
              "expire_at": "2016-04-27T00:00:00-07:00"
            },
            "github_ssl": {
              "enabled": false,
              "cert": null,
              "key": null
            },
            "ldap": {
              "host": null,
              "port": 0,
              "base": [],
              "uid": null,
              "bind_dn": null,
              "password": null,
              "method": "Plain",
              "search_strategy": "detect",
              "user_groups": [],
              "admin_group": null,
              "virtual_attribute_enabled": false,
              "recursive_group_search": false,
              "posix_support": true,
              "user_sync_emails": false,
              "user_sync_keys": false,
              "user_sync_interval": 4,
              "team_sync_interval": 4,
              "sync_enabled": false,
              "reconciliation": {
                "user": null,
                "org": null
              },
              "profile": {
                "uid": "uid",
                "name": null,
                "mail": null,
                "key": null
              }
            },
            "cas": {
              "url": null
            },
            "saml": {
              "sso_url": null,
              "certificate": null,
              "certificate_path": null,
              "issuer": null,
              "idp_initiated_sso": false,
              "disable_admin_demote": false
            },
            "github_oauth": {
              "client_id": "12313412",
              "client_secret": "kj123131132",
              "organization_name": "Homestar Runners",
              "organization_team": "homestarrunners/characters"
            },
            "smtp": {
              "enabled": true,
              "address": "smtp.example.com",
              "authentication": "plain",
              "port": "1234",
              "domain": "blah",
              "username": "foo",
              "user_name": "mr_foo",
              "enable_starttls_auto": true,
              "password": "bar",
              "discardã„§toã„§noreplyã„§address": true,
              "support_address": "enterprise@github.com",
              "support_address_type": "email",
              "noreply_address": "noreply@github.com"
            },
            "ntp": {
              "primary_server": "0.pool.ntp.org",
              "secondary_server": "1.pool.ntp.org"
            },
            "timezone": null,
            "snmp": {
              "enabled": false,
              "community": ""
            },
            "syslog": {
              "enabled": false,
              "server": null,
              "protocol_name": "udp"
            },
            "assets": null,
            "pages": {
              "enabled": true
            },
            "collectd": {
              "enabled": false,
              "server": null,
              "port": 0,
              "encryption": null,
              "username": null,
              "password": null
            },
            "mapping": {
              "enabled": true,
              "tileserver": null,
              "basemap": "company.map-qsz2zrvs",
              "token": null
            },
            "load_balancer": null
          },
          "run_list": [
            "recipe[enterprise-configure]"
          ]
        }
      },
      "sshã„§keyã„§items": {
        "value": [
          {
            "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
            "prettyã„§print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
          },
          {
            "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
            "prettyã„§print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
          },
          {
            "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
            "prettyã„§print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
          }
        ]
      },
      "baseã„§installationã„§forã„§authã„§userã„§paginated": {
        "value": {
          "total_count": 2,
          "installations": [
            {
              "id": 1,
              "account": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "app_id": 1,
              "target_id": 1,
              "target_type": "Organization",
              "permissions": {
                "checks": "write",
                "metadata": "read",
                "contents": "read"
              },
              "events": [
                "push",
                "pull_request"
              ],
              "single_file_name": "config.yaml",
              "has_multiple_single_files": true,
              "single_file_paths": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ],
              "repository_selection": "all",
              "created_at": "2017-07-08T16:18:44-04:00",
              "updated_at": "2017-07-08T16:18:44-04:00",
              "app_slug": "github-actions",
              "suspended_at": null,
              "suspended_by": null
            },
            {
              "id": 3,
              "account": {
                "login": "octocat",
                "id": 2,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "app_id": 1,
              "target_id": 1,
              "target_type": "Organization",
              "permissions": {
                "checks": "write",
                "metadata": "read",
                "contents": "read"
              },
              "events": [
                "push",
                "pull_request"
              ],
              "single_file_name": "config.yaml",
              "has_multiple_single_files": true,
              "single_file_paths": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ],
              "repository_selection": "all",
              "created_at": "2017-07-08T16:18:44-04:00",
              "updated_at": "2017-07-08T16:18:44-04:00",
              "app_slug": "github-actions",
              "suspended_at": null,
              "suspended_by": null
            }
          ]
        }
      }
    },
    "headers": {
      "link": {
        "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
        "schema": {
          "type": "string"
        }
      },
      "xã„§rateã„§limitã„§limit": {
        "example": 5000,
        "schema": {
          "type": "integer"
        }
      },
      "xã„§rateã„§limitã„§remaining": {
        "example": 4999,
        "schema": {
          "type": "integer"
        }
      },
      "xã„§rateã„§limitã„§reset": {
        "example": 1590701888,
        "schema": {
          "type": "integer",
          "format": "timestamp"
        }
      }
    },
    "responses": {
      "not_found": {
        "description": "Resource not found",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "requires_authentication": {
        "description": "Requires authentication",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "forbidden": {
        "description": "Forbidden",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "validation_failed": {
        "description": "Validation failed, or the endpoint has been spammed.",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žvalidationã„§error",
              "$unref": "#/components/schemas/validation-error"
            }
          }
        }
      },
      "not_modified": {
        "description": "Not modified"
      },
      "gone": {
        "description": "Gone",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "service_unavailable": {
        "description": "Service unavailable",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "conflict": {
        "description": "Conflict",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "code_scanning_forbidden_read": {
        "description": "Response if GitHub Advanced Security is not enabled for this repository",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "bad_request": {
        "description": "Bad Request",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          },
          "applicationð›°Žscim+json": {
            "schema": {
              "$ref": "#/components/schemasð›°Žscimã„§error",
              "$unref": "#/components/schemas/scim-error"
            }
          }
        }
      },
      "moved_permanently": {
        "description": "Moved permanently",
        "content": {
          "applicationð›°Žjson": {
            "schema": {
              "$ref": "#/components/schemasð›°Žbasicã„§error",
              "$unref": "#/components/schemas/basic-error"
            }
          }
        }
      }
    }
  }
} as const;